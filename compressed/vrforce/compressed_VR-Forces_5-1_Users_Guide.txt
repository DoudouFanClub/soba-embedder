VR-Forces is a comprehensive Computer Generated Forces (CGF) application and toolkit offering:

1. **Simulation Levels & Views:**
   - Entity-level and aggregate-level simulation.
   - Realistic 3D views of vehicles, terrain, and entities with exaggerated reality features for better situational awareness.
   - 2D views for strategic planning, tactical overlays, and large area simulations.

2. **Scenario Creation & Management:**
   - Capability to create complex scenarios with various object types (vehicles, terrain, etc.).
   - Mission planning and task management for simulation objects.
   - Scripted tasks and data requests for customization.

3. **Terrain & Environment:**
   - Dynamic terrain, ocean, lighting effects, and crowd behaviors.
   - Terrain agility and composability for flexible scenario creation.

4. **User Interface & Interaction:**
   - Flexible, intuitive graphical user interface (GUI).
   - Overlays, behaviors, observer attach modes, special effects, and information visualization.
   - Precise vehicle positioning and batch mode operation.

5. **Additional Features:**
   - Remote control for simulation management.
   - Compatibility with DIS, HLA standards, multiple database formats, and terrain servers.
   - Interoperability with other MAK products like VR-Vantage Stealth, VR-Engage, and MAK Data Logger.

6. **Toolkit & Utilities:**
   - VR-Forces Toolkit with plug-in architecture for extensibility.
   - DI-Guy for human simulation.
   - Helpful utilities and third-party software support (SilverLining, Triton Ocean SDK, GL Studio, SpeedTree, 3D models, OpenSceneGraph, osgEarth).

7. **Visual Features:**
   - Various visual features supported in both 3D and 2D views for entity-level scenarios.

VR-Forces leverages the OpenSceneGraph toolkit for graphics rendering and supports value-added plug-ins from the OSG community and MAK partners.

VR-Forces is a simulation software offering:

1. **Projection Modes:**
   - **3D:** Supports 3D models (colorized), terrain agility, attach modes, observer movement modes.
   - **2D:** Offers 2D icons, level observer frame.

2. **Key Features:**
   - Audio, cockpit displays, communications lines, detonation effects, DI-Guy characters, display units configuration, dynamic ocean/terrain, entity labels, environment effects, extruded tactical graphics, fire and detonation lines, forward+ lighting, high dynamic range lighting, illumination flares, intervisibility, parachuting, radar jamming, range rings, remote draw API (2D graphics only), sea spray effects, sensors (stealth only), sensor contact lines, shadows, speedTree trees, streaming buoys/beacons and terrain, tactical data link support, tactical graphics/smoke, task visualization, terrain profiles, tracers, track histories, trailing effects, view controls, wireframe view, zoom.

3. **Simulation Levels:**
   - **Entity-level:** Models individual entities (ships, tanks, etc.) for detailed interactions.
   - **Aggregate-level:** Simulates large groups based on unit strengths/weaknesses, useful for staff training and command system stimulation.

Most documentation applies to both levels; specific sections are marked by entity or unit icons.

- **Modeling Types:**
  - Entity-Level: Focuses on individual units or vehicles. (Pages 364, 485)
  - Aggregate-Level: Deals with higher echelon units like platoons, companies, or larger formations. (Page 489)

- **Realistic 3D Display:**
  - VR-Forces uses OpenFlight format for terrain and vehicle models.
  - Vehicles can show movement of parts (e.g., turrets, rotors) and damage states.
  - Users can provide custom models mapped to object types.

- **Scenario Creation & Management:**
  - Create complex scenarios with various objects, graphics, plans, and events.
  - Manage hostility relationships, spot reports, line-of-sight, units expansion/collapse, overlays, weather conditions, etc.
  - Save, load, and observe scenario behavior.

- **Simulation Object Types:**
  - Entity-level: Ground (tanks, utility vehicles, artillery, IEDs, civilian vehicles), air (fixed-wing, rotary-wing, civilian aircraft), surface/subsurface entities (aircraft carriers, frigates, sailboats, cargo ships, submarines), life forms (dismounted infantry, civilians).
  - Aggregate-level: Various unit types (ADA PLT, artillery battery, mechanized infantry company, etc.), and larger vessels.

- **Simulation Object States & Embarkation:**
  - Interactively modify object states:
    - Speed
    - On-board stores (fuel, ammunition)
    - Location
    - Heading
    - Altitude
  - Modify parameters via configuration files.
  - Objects can embark/disembark from other objects (e.g., infantry on trucks, aircraft on carriers).

- **Embarkation in HLA Federations:**
  - Requires RPR FOM 2.0, draft 17 or later.

- **Mission Planning:**
  - Create plans with tasks, data requests, conditional statements (e.g., area presence, destruction, phase line position), and global commands.
  - Plans can be saved and edited; supports triggers, While, and Wait Until statements for repeated or delayed actions.
  - Global plans exist independently of objects, enabling ad-hoc actions to modify simulation objects and tactical graphics in response to events.

- **Simulation Object Tasks:**
  - Assign tasks to objects as part of a plan or independently (overriding plan tasks).
  - Entity-level tasks:
    - Move: To an object or along a route.
    - Patrol: Along a route or between two objects.
    - Follow: Another entity.
    - Fire: For effect.
    - Take off and land.
    - Fly to a heading.
  - Aggregate-level tasks:
    - Move: To an object or along a route.
    - Patrol: Along a route or between two objects.
    - Construct: Minefields (and other combat engineering objects).
    - Breach: Obstacles.
    - Bomb: A location.

- **Scripted Tasks and Set Data Requests:**
  - Create new tasks and data requests using Lua scripting language, with input dialog boxes created automatically.
  - Reactive tasks monitor the simulation for specific conditions before execution, allowing targeted responses to events.
  - Background processes manage ongoing object activities continuously in the background.
  - Organize scripts into Behavior Sets to control script availability per force, enabling fine-grained control over simulation object behavior.

- **Tactical Graphics:**
  - Create and name various types (points, lines, areas, obstacles) interactively using VR-Forces.
    - Simulation objects can follow routes or move between points, and VR-Forces can determine if they're in specific areas for mission planning.
  - Combat engineering objects can impede, damage, or defend simulation objects. Other graphics are informational and do not affect the simulation.

- **Terrain Management:**
  - Build terrain at runtime using various formats:
    - Database: OpenFlight DTED, CDB, MetaFlight, GDB (MAK terrain format).
    - Vector: shapefiles, S-57 files, GDB files.
    - Geospatial images: GeoTIFFs or other raster image files.
  - Load local or stream data from networked servers using osgEarth earth file format. Save composed terrains in MTF file format.
  - Support for coordinate systems: UTM, Geocentric, MGRS, Latitude/Longitude, Database.

- **Dynamic Terrain:**
  - Change terrain state using switch nodes due to munition damage, user changes, or entity tasks.
    - Embed cultural features and regenerate navigation data dynamically for entities to navigate around and through objects.

- **Crowd Behaviors & Pattern of Life:**
  - Quickly create civilian crowds with inherent behaviors like wandering and fleeing munition detonations. Assign tasks such as gathering around a person or point.
  - Generate civilian and vehicular traffic using various spawn patterns to simulate typical background traffic for scenarios.

- **Graphical User Interface (GUI):**
  - Intuitive, flexible GUI for manipulating VR-Forces via menus, dockable control panels, keyboard, and customizable layouts.
    - Features include map manipulation (zoom, pan), object selection/tracking, display feature toggling, entity views (hierarchical, echelon, embarkation), labels, line-of-sight, and more.

- **Overlays**:
  - Mimic clear plastic sheets for drawing graphics over terrain maps.
  - All objects are automatically assigned to overlays.
  - Objects can be added, moved between, or have their display hidden per overlay.

- **Behaviors**:
  - Simulation objects interact with their environment and other objects.
  - They respond to targets (e.g., deciding which target to acquire), follow routes, etc.

- **Observer Modes**:
  - Control the observer's (user's view) position, orientation, or mimic vehicle movements.
  - Options include manual control, following objects/maintaining positional offset, mimicking vehicles (driver's-eye view or external), tethering, and automatic tracking from a fixed viewpoint.

- **Special Effects & Visualization**:
  - Includes fire lines, track histories, range rings, radio communication lines, trailing effects (footprints, tire tracks, wakes) for realistic interactions.
  - Enhances understanding of simulation object interactions.

- **Dynamic Ocean**:
  - Provides waves, swells, spray effects, and realistic surface entity behavior in certain observer modes (Stealth and Out-the-Window).
  - Wind speed and direction affect wave action.

- **Lighting Effects**:
  - Supports dynamic lighting, high dynamic range, ocean reflection, lens flare, crepuscular rays.
  - Uses shader-based effect maps for enhanced visualization: normal/bump, specular, ambient occlusion, reflection, emissive maps.

- **Accurate Vehicle Positioning**:
  - Smooths vehicle trajectories to compensate for discontinuous positional data.
  - Ensures ground entities are correctly placed on the terrain surface with ground clamping feature.

**Summary:**

- **Batch Mode Operation:**
  - Run scenarios unattended or under different conditions.
  - Record results using MAK Data Logger for later review.
  - See "7.10. VR-Forces and Batch Mode" on page 265 for more details.

- **Remote Control:**
  - Control the VR-Forces observer remotely via view control messages generated by:
    - MAK applications (e.g., MAK Data Logger)
    - Programs using VR-Vantage Control Toolkit
    - Plans within the simulation
  - See "56.14. Controlling the Observer from Other Applications" on page 1173 and "39.7.7 Sending View Control Messages" on page 945 for details.

- **VR-Forces Toolkit:**
  - Develop CGF applications, enhance simulation engine/GUI, or integrate into own UI.
  - APIs:
    - Simulation API: Control over behaviors, components, object types, parameters, messages, resources, tactical graphics, plans, and tasks.
    - Remote Control API: Control a VR-Forces simulation engine from a remote application.
    - Terrain API: Manipulate terrain databases.
  - Front-end built with VR-Vantage Toolkit, allowing modification or extension.
  - See VR-Forces Developers Guide for details.

- **Plug-in Architecture:**
  - Modify front-end/back-end by:
    - Rebuilding applications
    - Writing plug-ins (dynamically linked libraries)
  - Manage plug-in use in the front-end. See "4.8. Managing Plug-ins" on page 157 for details.

- **DI-Guy:**
  - VR-Forces uses DI-Guy software and content for character animation.
  - Built-in functionality and a large set of characters, appearances, and animations included.
  - DI-Guy Character Viewer bundled with VR-Forces to view the library of characters and animations.
  - Requires a DI-Guy Developer's license to:
    - Develop new character types or alter existing ones
    - Directly access the DI-Guy API outside of VR-Forces-based applications
  - See "28.14. DI-Guy Animation" on page 630 and "36.23." for more information.

**Additional References:**
- "6.11. Trajectory Smoothing"
- "59.7. Using Ground Clamping"

1. **DI-Guy:**
   - **Configuration:** Appearance, head, and body weight settings on page 847.
   - **Files:** Configuration files explained on page 1430.
   - **Editing:** Visual model and animation editing on page 1349.

2. **VR-Forces Utilities:**
   - **Simulation Object Editor:** Graphical interface for managing simulation objects, models, and tactical graphics (page 1271).
   - **vrfMsgDump:** Displays network messages for troubleshooting.
   - **Boundary Generation Tool:** Calculates high-resolution terrain boundaries.
   - **medfTool:** Encrypts 3D model files.
   - **mftTool:** Processes MetaFlight terrains for VR-Forces use.
   - **osgEarth cache feature:** Caches offline terrain data from earth files.
   - **vectorNetworkToShapeFiles utility:** Extracts feature data into shapefiles for terrain addition.
   - **translationFileCreate utility:** Extracts user-visible text for translation.
   - **User Settings Cleanup Tool:** Resets settings to factory defaults.

3. **Third-Party Software and Content:**
   - **Rendering & Ocean:**
     - SilverLining (real-time sky, 3D cloud rendering by Sundog Software).
     - Triton Ocean SDK (3D ocean, ship wakes by Sundog Software).
   - **Instrumentation & HMI:** GL Studio (interactive cockpit instrumentation and HMI by DiSTI).
   - **Foliage:** SpeedTree (animated, 3D foliage by Interactive Data Visualization).
   - **Models & Terrain:** 3D models, terrain, and graphical content from Simthetiq, RealDB, TurboSquid, and TerraSim.
   - **Graphics Toolkit & Plug-in:** OpenSceneGraph and osgEarth (open-source 3D graphics toolkit and streaming terrain plug-in).

4. **SilverLining Rights:** Most VR-Forces customers can use built-in SilverLining technology without additional licensing.

1. **SilverLining:**
   - Requires SilverLining Developer's License for:
     - Modifying MAK's integration via API
     - Commercial mass-market products with SilverLining functionality
   - Default star catalog can be overridden using `star-catalog-file` parameter in `./data/Environment/Sky/SilverLining.config`
   - Resources only for use within VR-Forces applications

2. **Triton Ocean SDK:**
   - No license needed for most VR-Forces customers
   - Requires license for:
     - Modifying MAK's integration via API
     - Commercial mass-market products with Triton Ocean functionality
   - Resources only for use within VR-Forces applications

3. **GL Studio:**
   - Built-in cockpit displays usable without license
   - Requires GL Studio Developer's License for:
     - Building custom cockpits using editor/API
     - Executing custom cockpits in VR-Forces-based apps
   - Resources only for use within VR-Forces applications

4. **SpeedTree:**
   - No SpeedTree license needed for MAK-delivered VR-Forces apps
   - Plug-ins can be built and run without license, unless direct API access is required

- **SpeedTree License Requirement:**
  - A SpeedTree Developer's license is needed to:
    - Write a plug-in using the SpeedTree API to extend or modify SpeedTree integration in VR-Forces.
    - Develop new applications using the VR-Forces Toolkit that include SpeedTree functionality.

- **3D Models, Terrain, and Graphical Content:**
  - VR-Forces includes third-party licensed content (from Simthetiq, Turbosquid, Real DB) for vehicles, buildings, urban clutter, terrains, etc.
  - Use of this content is restricted to VR-Forces-based applications only.

- **OpenSceneGraph (OSG) and osgEarth:**
  - VR-Forces uses OSG for scene graph representation, rendering, file loading, etc. It's open-source and cross-platform under the OSGPL license.
  - MAK provides modified OSG source code upon request.
  - VR-Forces uses osgEarth to import streaming terrain elevation and imagery data. osgEarth is an open-source plugin to OSG under the LGPL license.
  - MAK provides modified osgEarth source code upon request.

- **Distributed Simulation Standards Supported:**
  - VR-Forces supports:
    - High-Level Architecture (HLA) 1.3 and HLA Evolved (IEEE 1516-2010).
    - Distributed Interactive Simulation (DIS) protocol version 7.
  - It has built-in support for the HLA Run-Time Infrastructure (RTI) Protocol Buffer Format (RPR-FOM) and can support other FOMs through FOM Mapping.
  - VR-Forces supports time management for HLA exercises.

1. **Download Packages:**
   - MAK ONE installations are provided as downloadable files from the MAK website.
   - Packages include product installers, optional installers, required data packages, and recommended data packages.

2. **Installation Steps:**
   - **Windows:**
     - Run the installer (named with the compiler used to build VR-Forces).
     - Follow the installation wizard's instructions.
     - Install data separately using "The makData Package".
     - Note: Large applications may have a delay due to Windows scanning setup programs. Turning off User Access Control can reduce this delay.
   - **Linux Systems:**
     - Use the Linux installer and follow similar steps as on Windows.

3. **Additional Installations:**
   - **PDB Files (Debugging):** Install PDB files for debugging purposes.
   - **Toolkit:** Install the VR-Forces Toolkit.
   - **MAK License Manager:**
     - Install and set up the MAK License Manager.
     - Specify the license server during setup.
   - **RTI (Run-Time Infrastructure):** Install an RTI for interoperability using HLA, specifically the MAK RTI.

4. **Directory Structure:** Familiarize yourself with the VR-Forces directory structure to navigate installed files.

5. **Virtual Machines & Localization:**
   - **Virtual Machines:** Use MAK ONE products on virtual machines following specific guidelines.
   - **Localization:**
     - Translate graphical user interface, other interface files, scripts, and console messages for different languages.
     - Apply the language files to use the translated content.

6. **Uninstallation:**
   - **Windows & Linux:** Follow the uninstall process specific to each operating system.
   - **Default Installation Directory:** The default root directory for installing MAK ONE products is `C:/MAK`. Use an environment variable, `MAK_INSTALL_DIR`, to specify a different location.

1. **Windows Documentation Installation:**
   - Separate installer: `vrforces#.#.doc.exe`
   - Install location: Product's directory (default)
   - Customization: Optionally change Start menu shortcut location

2. **Linux Product Installation:**
   - Create install directory
   - Copy tar file (e.g., `applicationxx-os.tar.gz`)
   - Uncompress and untar using `tar -xzf`

3. **Debugging with PDB Files:**
   - Crash diagnosis: `.dmp` file generated, PDB files help create `.callstack.log`
   - Ease of sharing: Call stack logs are plain text
   - Availability:
     - Support for call stack logs: MAK ONE 2024 and later versions
     - PDB files: Included with Linux installation (no separate install needed)
   - Windows PDB installation: Must match application build, requires VR-Forces to be installed first

- **PDB Files Installation:**
  - Download PDB installer with VR-Forces.
  - Run PDB installer; it finds the matching product directory and sets install path automatically, unless corrected manually.
  - Complete installation; PDB files are placed in the product's `./bin64` directory.

- **VR-Forces Installation:**
  - Default installation directory is `C:\MAK`.
  - Ensure correct folder during installation and match PDB installer with VR-Forces version to avoid warnings.

- **Issue Reporting:**
  - Send `.callstack.log` and/or `.dmp` files to MAK support, along with issue details.
  - Log files default to `C:/MAK/logs`, customizable via `MAK_LOG_DIR` environment variable.

- **Toolkit Installation:**
  - Toolkit requires a separate license; install it using the application installer by deselecting runtime and selecting toolkit.
  - Required software for toolkit users: VR-Link 5.9, MAK RTI (version depends on HLA/Evolved use), and Qt 5.15.2 for GUI building.

- **MAKData Packages:**
  - Shared among multiple MAK ONE applications.

- **Data Location:**
  - VR-Forces searches for data in a default location or uses environment variables.
  - Data structure: `shared-data-root/data-compatibility-version/stem/data-folders`.
    - `shared-data-root`: Defaults to `C:/MAK/SharedData` on Windows and `~/MAK/SharedData` on Linux.
    - `data-compatibility-version`: A number, e.g., 16 or 18.
    - `stem`: Directory containing data files, e.g., 'latest' for the most recent installation or a date.
    - `data-folders`: Contains various MAK data files (models, audio, fonts, etc.).

- **Installation Options:**
  - Advanced users can install data on shared drives and configure machines to look there.

- **Installing MAK Data Package:**
  1. Install MAK ONE Software Manager.
  2. Run the manager and select/install data packages.
  3. Specify data file directory (default: Downloads folder).
  4. Select desired data files; install Core data for VR-Forces functionality.
  5. Optionally, choose installation location (MAK recommends default).
  6. Handle previous installations (backup, delete, or overwrite).
  7. Click 'Install' and wait for completion.

- **Data Package Installation Options:**
  - If no preexisting installations, data files are installed in `./SharedData/##/latest`.

When installing a new version of VR-Forces with the same compatibility version already installed:

- **Backup**: Recommended. Moves old files to a dated directory (e.g., `./SharedData/16/2022-11-13`) and installs new files in the latest folder (`./SharedData/16/latest`). Allows reverting to previous releases using command-line options or Windows environment variables.
- **Delete**: Deletes old data from the latest directory before installing new data.
- **Overwrite**: Replaces existing files with newer ones, adds new files, and ignores files not included in the installation package.

**Uninstallation:**

- **Windows**:
  - Use `unins000.exe` in the installation directory to uninstall.
  - Copy custom files before uninstalling as they will be deleted.
  - Run uninstallers from highest to lowest number for complete removal (e.g., unins002.exe, then unins001.exe).
- **Linux**:
  - Delete the installation directory to remove all associated files.
  - Copy custom files beforehand.

**Directory Structure:**

VR-Forces creates a structured directory with contents:

```
./appData
  - Schema, model definitions, settings, configuration files, and other data

./appsrc
  - Source files and project files for API developers

./backup
  - Backup configuration files

./bin64
  - Product executables and DLLs

./data
  - ./bitmaps: Bitmaps and icons
  - ./modelsets: Simulation model sets
  - ./terrain: Terrain database source files
  - ./visual: Visual model data
```

- **VR-Forces Directory Structure:**
  - `./doc`: User documentation (PDF & HTML5), class documentation.
  - `./examples`: Sample code for toolkit users.
  - `./factory`: Backups of application data and settings provided by MAK.
  - `./include`: Header files for use by API developers.
  - `./lib64`: Library files.
  - `./packages`: Header files and libraries for third-party and supplementary APIs that developers may need to build against.
  - `./plugins64`: Plug-in DLLs.
  - `./sfx`: Sound effect files
  - `./Shortcuts`: Contains shortcuts to the documentation and tools, used for the Windows Start menu.
  - `./translations`: Files and an executable for localizing the GUI.
  - `./userData`: Scenarios, terrain files, and other files created while using VR-Forces.

- **MAK License Manager (for VR-Forces):**
  - Install separately from product installer; included with MAK installation media or downloadable from MAK ONE Product Downloads page.
  - Uses client-server architecture; install only on the computer acting as the license server.
  - Obtain a valid license file and configure the license server and client machines.
  - Some customers use dongle licenses instead of running a license server.

- **Specifying the License Server:**
  - Enter hostname (and optional port number) in License Setup dialog box when starting a MAK ONE product for the first time on a computer.
  - Can select 'Use Node Locked License' if applicable, and enter the path to the license file.
  - If running products on the license server machine, specify the license server there as well.
  - Changing the license server requires reconfiguring; clear the license cache (delete `C:\Users\user_name\AppData\Roaming\MAK\licenses<n>.txt` on Windows) if needed.

- **Linux License Cache Location:** `.mak/license<n>.txt` (e.g., `licenses1.txt`, `licenses2.txt`). Can be cleared via RTI Assistant.
- **Setting MAKLMGRD_LICENSE_FILE Environment Variable:**
  - **Windows:**
    - Open System Properties > Advanced > Environment Variables.
    - Add new system variable: `MAKLMGRD_LICENSE_FILE` with value `@server_name`.
  - **Linux (C Shell):**
    - In `.cshrc`, use: `setenv MAKLMGRD_LICENSE_FILE @oak`
  - **Linux (Bourne Shells like sh/bash):**
    - In `.profile` or `.bashrc`, use: `MAKLMGRD_LICENSE_FILE=@oak; export MAKLMGRD_LICENSE_FILE`
- **Installing an RTI (Run-Time Infrastructure):**
  - An RTI is a software library for HLA applications to exchange FOM data.
  - MAK ONE products support various RTI versions. Check the Product Specifications & Dependencies page for updates.
  - To install the MAK RTI, follow Chapter 2 of the MAK RTI Users Guide. For other vendors' RTIs, refer to their documentation.

- **Configuring System for MAK RTI:**
  - Ensure RTI dynamic libraries are on system's search path:
    - Linux: `LD_LIBRARY_PATH`
    - Windows: `PATH`
  - Place configuration files (federation config file, optional RID file) in running directory or set `RTI_CONFIG` environment variable.

- **Running Applications with MAK RTI:**
  - Start license server.
  - Launch application; choose RTI configuration using RTI Assistant.
  - Click 'Connect'. `rtiexec` might be required for certain features.

- **Additional Notes:**
  - **Virtual Machines:** MAK ONE products can run on virtual machines, with specific guidelines available.
  - **GUI Localization:** Use Qt Linguist tool to translate `.ts` files (e.g., `product_untranslated.ts`). Some strings require manual translation in configuration and settings files.

- **Editing Resource Files with Qt Linguist:**
  - Open Qt Linguist, select untranslated `.ts` file.
  - Choose source and target languages, then translate text associated with each class in the list.

1. **Translating VR-Forces GUI:**
   - Open the translation file, select the target language.
   - Type translations in the 'Translation' text box.
   - Confirm each translation with 'Done and Next'; a green checkmark indicates completion, yellow question mark shows unconfirmed strings.
   - Repeat for all elements of source text for each class.
   - Save the file as `filename.qm` using two-character language abbreviation (e.g., `product_es.qm`).

2. **Translating Other Interface Files:**
   - Translate `qt_untranslated.ts` following the same procedure.

3. **Translating VR-Forces Scripts and Console Messages:**
   - Use a utility to scan scripts, SMS files, DI-Guy files, creating individual TS files.
   - Code messages in scripts and console messages for translation (details in respective guides).
   - Translate generated TS files.

4. **Generating TS Files for Scripts and Simulation Model Sets:**
   - Run `translationFileCreate` utility to generate untranslated TS files for scripts, SMS sets, DI-Guy files.
   - Save translated script files with their respective back-ends; other translated files on the user's machine.

**Key Points Added/Modified:**

- Clarified the confirmation process for translations (green checkmark vs. yellow question mark).
- Specified that unconfirmed strings display a yellow question mark.
- Emphasized that translated script files should remain with their respective back-ends, while other translated files should be on the user's machine.
- Removed unnecessary headers and text from the original chunk.

- **Translation File Management:**
  - `.qm` files for DI-Guy and VR-Forces must reside in the `translations` directory.
  - `.qm` files for simulation model sets should be placed alongside their respective `.sms` files.
  - Use `translationFileCreate.exe` to generate translation files with arguments like:
    - `--directory`: Scan specified directories for translatable files (lua, sysdef, xml, mtl).
    - `--smsfile`: Specific SMS file to use when translating simulation model set directories.
    - `--nodiguy`, `--noscripts`, `--nosms`: Exclude specific file types from translation.

- **Generating and Applying Language Files:**
  - Generate untranslated `.ts` files using `lupdate source_directory -ts my_new_translations.ts`.
  - Apply language files by setting the LANG environment variable, locale, or starting VR-Forces with `-G locale`.

- **VR-Forces Architecture:**
  - VR-Forces consists of two executables: `vrfGui` (front-end/GUI) and `vrfSimprotocol` (back-end/simulation engine).
  - Multiple instances of front-ends, back-ends, or both can run simultaneously.
  - Front-ends manage scenarios, display objects, interact with remote objects, and control back-ends using session IDs.

- **Key Components:**
  - Objects: Managed via an object parameter database, with local and remote objects.
  - Time management: Simulation time, time of day, exercise clock modes.
  - Interactions and advanced terrain navigation.
  - Settings management: Synchronization among installations, global vs. observer-specific settings.

1. **Multi-Simulation Engine Benefits:**
   - **Workload Distribution:** Run multiple simulation engines to share the work of simulating objects and graphics across multiple computers, improving performance.
   - **Scenario Saving:** Save scenarios with recorded back-end configurations for future use.

2. **Front-end and Back-end Interaction:**
   - **Communication:** Front-ends (user interfaces) send messages over a network to communicate with back-ends (simulation engines).
   - **Display of Scenario States:** They work together to display scenario states and interactions generated by the back-end.

3. **Back-end Identification:**
   - **Unique Identifiers:** Each back-end needs a unique site ID and application number for proper identification, especially when running multiple instances.
   - **Assignment:** These identifiers are assigned during startup and must be unique to avoid conflicts.

4. **Sessions for Front-end and Back-end Management:**
   - **Session Concept:** Sessions help manage relationships between front-ends and back-ends.
   - **Back-end Participation:** Back-ends are always part of a session; front-ends can join or operate independently.
   - **Control and Consistency:** Joined front-ends control back-ends within the same session, ensuring consistency among them in terms of scenario and terrain usage.

- **Scenario Management:**
  - If a front-end tries to create or load a scenario while another is running, it warns of destruction.
  - All back-ends and other front-ends in a session mirror actions like loading or creating scenarios.

- **Session Benefits:**
  - **Control:** Sessions allow specifying which front-ends control which back-ends. This can be useful for simulating different forces (e.g., friendly vs opposing).
  - **Terrain Management:** Load different terrain databases in separate VR-Forces executables within the same exercise to improve performance and resolution.

- **Session Considerations:**
  - Front-ends see objects from other sessions but cannot control them.
  - Saving a scenario only saves session-specific objects, not those from other sessions.
  - Pausing or rewinding one session affects visible objects in others that overlap in terrain.

- **Multiple Front-ends Coordination:**
  - Only one front-end per session can load or create scenarios to prevent conflicts and ensure consistency.
  - Any front-end can save scenarios.

- **Multiple Front-Ends:**
  - Centralize scenario saving to prevent unsynchronized versions.
  - Objects created and scenario management (closing) can be done from any front-end.
  - VR-Forces helps manage multiple front-ends:
    - Automatically loads terrains when one front-end does so.
    - Closes terrains when a scenario is closed in another front-end.

- **Multiple Back-Ends:**
  - Distribute simulation objects among back-ends on separate machines.
  - When saving scenarios with multiple back-ends, record each object's creation site and application ID for replaying.
  - All back-ends must be started before loading a scenario; they cannot join mid-exercise.
  - If a back-end drops out, it can't rejoin without starting from the beginning.
  - A back-end can join an exercise after start by explicitly loading the terrain database using the `-T` command-line option.
  - Incomplete scenario data may result if any back-ends are unavailable during saving.

- **Remapping Back-Ends:**
  - If required back-ends are not available, remap objects to available ones automatically or manually.
  - Create a new object map file if the original is missing.
  - Default remapping behavior:
    - Combined mode: All simulation objects remapped to the combined mode back-end.
    - Separate mode: Missing back-ends listed as "UNKNOWN" in the remapping dialog.

- **Load Balancing:** Manually remap back-ends for load balancing in specific scenarios. Refer to "7.5. Load Balancing Scenarios" on page 253.

- **Objects:**
  - All simulation objects and tactical graphics are 'objects' with similar management procedures.
  - VR-Forces creates objects based on OPD specifications using SISO enumerations. See "Section XII. Creating and Editing Simulation Models" for details.
  - Objects organized into SMS: `EntityLevel.sms` (entity-level scenarios), `AggregateLevel.sms` (aggregate-level scenarios), and `base.sms` (both types of scenarios).

- **Object Types:**
  - **Local Objects:** Simulated within the same VR-Forces back-end.
  - **Remote Objects:**
    - Simulated by other VR-Forces apps or non-VR-Forces simulations.
    - VR-Forces manages all objects, but you cannot control remote objects. You can attach components and write plans for them.

- **Time Management:**
  - VR-Forces maintains an exercise clock tracking elapsed simulation time (00:00:00:00 format).
  - Simulation time manipulation by developers; starts at 00:00:00:00 unless otherwise specified.

- **Simulation Time Display:**
  - Viewable via Simulation Time Toolbar or Panel.
  - Both display the same time and can be floated or docked.
  - The Simulation Time Panel can be resized, with font size adjusting proportionately.

- **Time of Day:**
  - Represents day/night cycle using a Time of Day value.
  - Default start: 10:00 AM in the time zone of the first simulation object created.
  - Affects simulation (e.g., visual sensors' performance).
  - Advances with simulation time but can be changed manually, even during scenario runtime.
  - Resets to 00:00 after midnight and does not track number of days.

- **Time Advancement:**
  - Default method: Based on simulation time for correct dead reckoning of VR-Forces objects and animations.
  - Alternative method: Based on wall clock time, not affecting dead reckoning.
  - To specify advancement method:
    - Go to Settings > Application.
    - Select the GUI Settings page.
    - Check or uncheck "Use Simulation Time for Time Advancement in VR-Forces GUI".

- **Exercise Clock Modes:**
  - **Variable-Frame Run-To-Complete:** Advances simulation time by the amount of time passed since the last exercise clock tick. Not suitable for time-managed HLA federations.
  - **Fixed-Frame Best-Effort:** Advances simulation time by a fixed amount each frame, waiting if computation takes less time. Suitable for viewing or interactive use and distributed use in time-managed HLA federations.
  - **Fixed-Frame Run-To-Complete:** Similar to Best-Effort but does not wait if computation is faster than the fixed frame time.

- **Fixed-Frame Run-To-Complete Mode:**
  - Useful for:
    - Non-interactive simulations
    - High-fidelity runs to completion (e.g., overnight)
  - Not suitable for:
    - Interactive use
    - Unmanaged HLA federations
  - Disables the Simulation Time Scale Toolbar

- **Simulation Speed:**
  - Supports faster-than-real-time simulation using a tick time multiplier
  - Avoid when interacting with real-time simulations due to potential performance degradation

- **Interactions:**
  - Displays interactions (e.g., detonations) from interaction messages or PDUs
  - Cannot be selected or manipulated, only viewed

- **Advanced Terrain Navigation:**
  - Uses Autodesk Gameware Navigation AI for entity movement optimization
  - Requires additional license to generate navigation data

- **Managing VR-Forces Settings:**
  - Two types of settings:
    - Independent (display, global, observer-specific):
      - Individual settings managed on the Settings menu and Display Settings dialog box
      - Changes do not affect other settings
    - Dependent (model definitions, object type mappings):
      - Determines simulation object modeling in the scene
      - Changing a dependent setting may affect others that depend on it
  - Setting management:
    - Saves changes during a session (except model definitions, element definitions, and object type mappings)
    - Remembers settings between sessions as defaults
    - Can revert to default or factory settings
    - Can save, import, and restore settings

1. **Setting Types: Independent vs Dependent**
   - **Independent**: Save/restore all settings on the current page; changes on other pages unaffected.
   - **Dependent**: Save/restore specific settings; related settings may also be affected.

2. **Save/Restore Operations**
   - Initiated via buttons on settings dialog boxes.
   - VR-Forces handles saving/restoring based on setting type:
     - Independent: All settings on the current page.
     - Dependent: Related settings may also be restored; user is notified of changes.

3. **Merge Settings**
   - Adds new saved settings, replaces matching ones, retains unmatched current settings.
   - Details in Visual Models chapter of MAK ONEApplications Reference Manual.

4. **Settings Management Buttons**
   - Revert to Default: Overrides session changes.
   - Restore Factory Settings: Resets to installation defaults.
   - Import/Merge Settings from File: Replaces/merges current settings with file contents.
   - Save/Export Settings to File: Saves current/selected settings to a file.

5. **Settings Storage Locations**
   - Model and element definitions: `./SharedData/18/latest/ModelData/Configuration/Definitions`
   - Other settings: `./appData/settings/vrfGui`

6. **Synchronizing Settings Among VR-Forces Installations**
   - Copy data directories (`./appData`, `./data`, `./userData`) from updated computer to others.
   - Import customized settings into relevant pages on other machines.

7. **Button Availability**
   - Some buttons disabled on dialog box pages where their function is not supported, e.g., most Terrain Settings pages.

VR-Forces has two types of settings:
1. **Global Settings**:
   - Affect all observer modes.
   - Include simulation object labels, tactical graphics, and cockpit displays.
   - Configured through the Settings menu.

2. **Observer-Specific Settings**:
   - Unique to each observer mode (e.g., Stealth vs Out-the-Window).
   - Distinguish one observer mode from another.

**Starting VR-Forces:**
- Can be started in separate or combined mode using the VR-Forces Launcher.
  - Combined mode: Front-end and back-end start together, front-end shuts down when you shut down the back-end.
  - Separate mode: Front-ends and back-ends start separately.
- Front-end automatically joins a session if a back-end with the same session ID starts later.
- Requires an RTI (Run-Time Infrastructure) for HLA (High Level Architecture).

**Managing VR-Forces:**
- **Windows**:
  - Open new windows.
  - Print the VR-Forces display.
  - Take screen captures.

- **Session Connection**:
  - Configure session messages and join at startup.
  - Join a session.
  - Resign from a session.

- **Time Management**:
  - Understand VR-Forces simulation time versus federation time.
  - Configure time management for HLA exercises.

- **Terrain Database**:
  - Load a terrain database at startup.
  - Display terrain correlation warnings.
  - Close a terrain.

- **Exiting VR-Forces**:
  - Disable the quit prompt.

**Configuration:**
- **Simulation Connections**:
  - Open the simulation connections configuration dialog box.
  - Add, edit, or delete a simulation connection.
    - Configure auto connect.
  - Display connection information.

- **Plug-ins**:
  - Load plug-ins.
  - Add, delete, or view loaded plug-ins.
  - Specify DLLs (Dynamic Link Libraries) for a plug-in.
  - Add or delete a plug-in configuration.

**Logging:**
- VR-Forces generates log files for reference.

- **VR-Forces Launcher** simplifies starting VR-Forces with different simulation standards (like HLA) by offering two primary modes:
  - Combined mode: starts both vrfGui and vrfSim.
  - Separate mode: allows starting either vrfGui or vrfSim independently.

- **Starting VR-Forces:**
  - On Windows, use the Start menu under MAK Technologies > VR-Forces 5.1 configuration.
  - On Linux or from Windows command line, use `vrfLauncher` with options:
    - No options: starts in combined mode (vrfGui + vrfSim).
    - `-F`: starts only vrfGui.
    - `-B`: starts only vrfSim.
    - `--usePredefinedConnection "connection"`: starts in combined mode using a specific predefined connection.

- **VR-Forces Launcher** opens a 'Simulation Connections Configuration' dialog box to:
  - Select an existing connection configuration.
  - Create a new connection configuration (optional).
  - Edit the connection's parameters, which are saved automatically.
  - Specify additional command line arguments for the front-end, back-end, or both.

- After clicking 'Launch', VR-Forces executables start, and a 'Scenario Startup' dialog box appears with options to:
  - Create a new scenario.
  - Load an existing scenario using common options.

1. **Scenario Management:**
   - Choose a terrain and simulation model set.
   - VR-Forces generates a scenario using default parameters; customize via "7.1. Creating a Scenario" (page 226).
   - Load scenarios from recent list or disk, or close the dialog box without selection.

2. **Startup Dialog Box Control:**
   - Enable/disable the Scenario Startup dialog box via Application Settings > GUI Settings page.
   - Alternatively, disable it directly on the dialog box by selecting "Do Not Show This Dialog At Startup".

3. **Launching VR-Forces Executables:**
   - Launch independent executables (vrfGui, vrfSim) from the launcher or command line.
   - Specify protocol (DIS or HLA1516e), site, and application numbers for each executable.
   - Example: `vrfGui -s 1 -a 3000 {--dis | --hla1516e} options` and `vrfSimprotocol -s 1 -a 3001 options`

4. **Session ID Assignment:**
   - Assign a session ID in the VR-Forces Launcher or using the `-i` command line option.
   - Default session ID is 1, non-changeable during runtime.

5. **VR-Forces Multi-Computer Startup:**
   - Run multiple front and back-ends on different computers for DIS and HLA protocols.
   - Use vrfLauncher to start executables with unique site and application numbers.
   - Refer to "5.3" for detailed command syntax.

- **Command-Line Options for vrfLauncher:**
  - **DIS (Distributed Interactive Simulation) Exercises:**
    - Isolate exercise traffic using a specified port.
    - Each front-end and back-end must have a unique site:application ID.
    - Example commands:
      ```
      PC 1: vrfGui -s 1 -a 3000 --dis -P 1234
      PC 2: vrfGui -s 1 -a 3001 --dis -P 1234
      PC 3: vrfSimDIS -s 1 -a 3002 -P 1234
      ```

  - **HLA (High-Level Architecture) Exercises:**
    - Specify site:application ID and use default values for HLA configuration parameters.
    - Example commands using HLA 1516 Evolved:
      ```
      PC 1: vrfGui -s 1 -a 3000 --hla1516e --execName MAK-RPR-2.0 ...
      ```

- **VR-Forces Window Components:**
  - Menus, simulation control toolbars (start/pause/rewind scenario, display elapsed time, control simulation speed), application panels, convenience toolbars, object creation palettes.
  - View modes: 2D, 3D, and exaggerated reality (XR).
  - Customizable layout: undock, hide, or move toolbars and panels.

- **Opening New Windows:**
  - Open secondary windows with 2D or 3D views for additional navigation and observation.
  - Changes made in the Observer Settings toolbar apply to the focused window.

- **Window Management:**
  - Closing the main window closes all associated secondary windows.
  - Open new windows:
    - Via menu: `File > New Stealth Window` or `File > New Plan View Window`
    - Through inset views

- **Printing VR-Forces Display:**
  - Print to any configured printer using `File > Terrain > Print`
  - GUI controls and tabs are not printed

- **Screen Captures:**
  - Take screen captures with `Ctrl+F5` (default save location: `./userData/screenshots`)
  - Linux capture appearance note
  - Change capture location via `Settings > Application > General Application Settings`
  - Save captures manually using `File > Terrain > Save Terrain as Image`

- **Front-end Session Connection:**
  - Front-ends can be joined or not joined to a session (unjoined front-ends function only as viewers)
  - Join/Resign status indicated by File menu commands
  - Automatic joining at startup with options:
    - 'Ask'
    - 'Always join with session database'
    - 'Always join with current database'
  - Configure session messages and startup behavior via `Settings > Application > Session Settings`

- **Session Settings Page:**
  - Enable desired options:
    - *Automatically Join Session*: Automatically joins an available session when VR-Forces starts, if checked.
    - *Automatically Open Session Database without Joining Session*: Loads the terrain database for the current session in view-only mode. Interacts with 'Automatically Join Session' as shown in Table 4.

- **Join Session Options:**
  - *Ask to Join Session*: Provides session data and prompts you to approve whenever you join a session.
  - *Always Join Session with Session Database*: Always joins a session using the database in the loaded scenario, without displaying a 'Join Session' dialog box.
  - *Always Join Session with Open Database*: Always joins a session with whichever terrain is currently open in the front-end. This might generate a terrain correlation warning.
  - *Show Session Terrain Change Prompts*: Enables prompts when the terrain in a session changes.

- **Managing Front-end's Session Connection:**
  - **Joining a Session:**
    - Choose 'File > Join Session'.
      - If VR-Forces is configured to always join with the session database, it loads the session database and joins the session.
      - Otherwise, the 'Join Session' dialog box opens (Figure 24).
    - If a scenario is running, you can load an alternate terrain:
      - Select 'Join Using Alternate Terrain'.
      - Choose the desired terrain in the 'Open Database' dialog box.
      - The front-end and back-end terrains might not be synchronized if joining with an alternate terrain.

  - **Resigning from a Session:**
    - Choose 'File > Resign From Session'.
    - All menu commands related to scenario management are disabled, and any loaded terrain is closed.

- **HLA Time Management**:
  - Allows controlling a federate's progression rate by another federate.
  - Roles: Constrained (controlled), Time Regulating (controller), Unconstrained.
  - Purpose in VR-Forces:
    - To synchronize with wider federations using time management.
    - To maintain synchronization among multiple back-ends when they cannot maintain the same frame rate.

- **Time Streams**:
  - *Federation Time*: Common model of time for the federation, increases linearly. Used by time-managed federates in time stamp ordered messages (TSO).
  - *VR-Forces Simulation Time*: Elapsed time within a scenario, can rewind unlike federation time.

- **Configuration**:
  - Enable time management at the application level in VR-Forces back-end.
  - Scenarios created without time management work in time-managed mode if enabled in the back-end.
  - Back-end becomes regulating and constrained federate when executing fixed-frame scenarios:
    - In 'fixed-frame' mode, it tries to advance simulation time at a rate approximating real time.
    - In 'fixed-frame-run-to-complete' mode, it advances simulation time as fast as possible, independent of wall-clock time.

- **RTI Requirements**: RTI must be properly configured to support time management services for use in VR-Forces.

1. **RTI Configuration:**
   - **MAK RTI:** Set `RTI_useRtiExec` and `RTI_timeMgmt` parameters to 1, run `rtiexec` when starting the federation.
   - **Other RTIs:** Consult respective documentation for configuration instructions.

2. **Back-end Time Management:**
   - Enable using one of these methods:
     - Set `runInTimeManagementMode` to 1 in `vrfSim.mtl`.
     - Use `--timeManagement` command-line option (e.g., `vrfSimHLAprotocol -s 1 -a 3001 --timeManagement`).
   - Time management mode is active only while a scenario is loaded.
   - Variable-frame scenarios do not enable time regulation or constraint.

3. **Terrain Database:**
   - Multiple front-ends load terrains independently, with potential correlation issues if different terrains are used.
   - VR-Forces supports MTF format and caches textures for faster loading.
   - Preprocess terrains using `medfTool` to avoid runtime caching.
   - Disable file caching in the reference manual for further details.

4. **Opening a Terrain Database:**
   - Open terrain via File > Terrain > Open Terrain.
   - Select desired terrain, click 'Open'.
   - Current database closes if a new one is loaded.
   - Paged terrains may not be visible in Plan View mode; use 'E' to zoom in.

1. **Terrain Display Issue:**
   - Some terrains may not display in 2D view initially.
   - To view:
     - Switch to 3D mode.
     - Center the view on the terrain using the spacebar.
     - Switch back to 2D.

2. **Loading Terrain Database at Startup:**
   - Use `-T` command line option to load a terrain database when starting VR-Forces, e.g., `vrfSimprotocol -s 1 -a 3001 -T "../userData/terrains/myDatabase.mtf"`.

3. **Terrain Correlation Warnings:**
   - VR-Forces displays warnings for potential front-end and back-end terrain mismatches.
   - Enable/disable these warnings via Application Settings > GUI Settings.

4. **Closing a Terrain:**
   - Close a terrain using:
     - File > Terrain > Close Terrain, or
     - Opening a different terrain.

5. **Exiting VR-Forces:**
   - Exiting the GUI closes all windows and associated simulation engines.
   - Options: 'Yes' (GUI and associated engine in combined mode), or 'Yes, and Quit All Back-Ends' (everything).
   - Disable exit prompt via Application Settings > General Application Settings.

6. **Configuring Simulation Connections:**
   - VR-Forces provides pre-set configurations for DIS and HLA simulations, including a local-only option (`localhost`).

- **Simulation Connection Configuration:**
  - Accessible via:
    - MAK Technologies > VR-Forces Tools on Windows Start menu.
    - `vrfLauncher` command on Linux or Windows command line.
  - Opens automatically at startup unless a default connection is set.

- **Managing Simulation Connections:**
  - **Adding a Connection:**
    - Click 'Add Connection' to open the Create Connection dialog box.
    - Enter a name, select a protocol (DIS or HLA), and click OK.
    - Customize parameters in the main dialog box after adding.
  - **Copying a Connection:**
    - Click 'Copy Connection', enter a new name, and click OK.
    - Edit parameters as desired.
  - **Editing a Connection:**
    - Select the connection from the list and modify its parameters.

- **Connection Parameters (DIS & HLA):**
  - Equivalent to command-line options for DIS and HLA.
  - Customize connection behavior with options like:
    - Changing DIS ports.
    - Using custom FOM Mappers.
    - Other protocol-specific settings.

The provided text outlines connection parameters for Distributed Interactive Simulation (DIS) and High-Level Architecture (HLA) in VR-Forces 4.7. Here are the key points:

**Common Parameters:**
- **Port, Exercise ID, Site ID, Application Number:** Specified via command-line options (-P, --exerciseId, -s, -a). These values can be identical or different and are arbitrary.
- **DIS Version:** Set with `--disVersion`. Currently, only version 7 is valid.
- **Network Interface Address, Destination Address, Multicast Addresses:** Define network traffic details. Multicast addresses can be specified using `-S`.
- **Send/Receive Buffer Size, Multicast TTL:** Adjust buffer sizes and multicast time-to-live with `--sendBufferSize`, `--recvBufferSize`, and `--mcastTtl` respectively.
- **Use Asynchronous I/O:** Enabled with `--useAsyncIO`.

**DIS-specific Parameters:**
- **Use Absolute Time Stamps:** Enables absolute timestamps using `--useAbsoluteTimeStamps`. Synchronization of time clocks is crucial.

**HLA-specific Parameters:**
- **Federation Name, FED File Name, RPR FOM Version:** Specified with `-x`, `-F`, and `--rprFomVersion` respectively.
- **FOM Mapper Library, Initialization String:** Define the VR-Link FOM Mapper and initialization data using `-f` or `--fomMapperLib` and `--fomMapperInitData`.
- **Local Settings Designator:** A string passed to the RTI during federate connect when using HLA Evolved. It's typically used for additional RTI configuration.

All these parameters are referenced to their detailed descriptions in Chapter 5 of the VR-Forces User Guide (page 165 onwards).

1. **HLA (High Level Architecture) Parameters:**
   - `--fomModules`: Specifies FOM Modules, applicable only to HLA Evolved.
   - `--useAdvisories`: Enables/disables HLA advisories.
   - `--useAbsoluteTimeStamps`: Uses absolute timestamps instead of relative ones, requiring synchronized time clocks among participants.

2. **Simulation Connection Management:**
   - **Deleting a Simulation Connection**:
     - Open 'Configure VR-Forces Connections'.
     - Select the connection to delete and click 'Delete'.
     - Confirm by clicking 'Yes' in the prompt.
   - **Auto Connect**:
     - Enable: Select a connection, then click 'Set as Auto Connect'.
     - Disable: Repeat the process to remove the star next to the selected connection.
   - **Displaying Connection Information**: Access via 'Settings > Connection Information' during VR-Forces runtime.

3. **Plug-in Management**:
   - Extend VR-Forces functionality using plug-ins (DLL or SO files), managed through the 'Plug-ins Editor'.
   - Changes to plug-in configurations apply upon restarting the affected VR-Forces application.
   - Specify plug-ins for startup loading in either the 'Plug-ins dialog box' or the 'Simulation Connections Configuration dialog box'.

- **Managing Plug-ins:**
  - **Plug-ins Dialog Box (Settings > Plug-ins):**
    - Access the 'Plug-ins Editor' page.
    - Select a plug-in and toggle the 'Load Plug-in' checkbox to specify loading at startup.

  - **Simulation Connections Configuration:**
    - Start VR-Forces using the Launcher, open the 'Simulation Connections Configuration'.
    - Click 'Plug-ins', select/deselect plug-ins in the 'Plug-ins Selection' dialog box.
    - Changes apply to all startup configurations.

  - **Adding a Plug-in:**
    - In the 'Plug-ins Editor', click 'Add', enter a name for the new plug-in, and specify DLLs for supported configurations (application, platform, build type, transport).

  - **Specifying DLLs for a Plug-in:**
    - In the 'Plug-ins Editor', select a plug-in, then click on the 'Plug-in Library' cell for the desired configuration.
    - Choose the DLL to load in the 'Select Plug-in' dialog box.

1. **Removing a Plug-in�s DLL:**
   - Open 'Plug-ins' dialog box.
   - Go to 'Plug-ins Editor' page.
   - Select the configuration.
   - Click 'Erase' button.

2. **Adding a Plug-in Configuration:**
   - Open 'Plug-ins' dialog box, go to 'Plug-ins Editor' page.
   - Select plug-in, click 'Add'.
   - Fill in parameters (Application, Platform, Build Type, Transport).
   - Click OK, then specify DLL.

3. **Deleting a Plug-in Configuration:**
   - Open 'Plug-ins' dialog box, go to 'Plug-ins Editor' page.
   - Select plug-in and configuration.
   - Click 'Delete' (above configurations).

4. **Deleting a Plug-in:**
   - Open 'Plug-ins' dialog box, go to 'Plug-ins Editor' page.
   - Select plug-in.
   - Click 'Delete' (to the right of plug-ins list).

5. **Viewing Loaded Plug-ins:**
   - Open 'Plug-ins' dialog box, select 'Plug-ins Loaded' page.
   - Select a plug-in to view details.

6. **VR-Forces Log Files:**
   - Log files: vrfSim.log (Windows/Linux), vrfGui.log (Windows).
   - Default location: C:/MAK/logs (Windows).
   - View back-end output on Linux: `tail -f vrfSim.log`.

- **Logging Output:**
  - Redirect front-end (`vrfGui`) output to log files:
    ```
    vrfGui > vrfGui.log
    ```

- **Command-Line Options (Overview):**
  - VR-Forces offers command-line options for `vrfGui`, `vrfSim`, and `vrfLauncher`.
  - Options cover various aspects such as specifying site ID, language, notification level, loading plugins, and more.
  - Dedicated sections detail options for HLA federations and DIS exercises.

- **Command-Line Options for vrfGui (Selected):**
  - `-- | --ignore_rest`: Ignore following command-line options.
  - `--antiAliasing level` (0, 2, 4, 8, or 16): Set anti-aliasing level.
  - `--appCacheDir directory` & `--appDataDir directory`: Specify cache and application data directories.
  - `(-c | --showConsole)`: Display console window.
  - `(-C | --autoConnect) {filepath | connector_name}`: Automatically connect to network using specified connector.
  - `--depthBits bits` (24 or 32): Set graphics depth.
  - `--dis`: Start in DIS mode, using DIS command-line arguments for connection parameters.

**Command-Line Options for vrfGui (VR-Forces User Guide):**

1. **Error & Rendering Control:**
   - `--disable-error-dialog`: Suppress error messages, logs to console.
   - `--disable-indirect-entities`, `--disable-indirect-external-renderer`: Disable indirect rendering and external renderer for debugging purposes.
   - `--disable-nvidia-bindless-fix`: Use only under MAK technical support guidance.

2. **Model & Terrain Control:**
   - `--disable-model-sets "model-set-number"`: Disable specific model sets (0-3D, 1-Colorized Models, 4-Minimap, 5-2D Icons) using commas for multiple sets.
   - `--disable-reverse-z-buffer`: Disable reverse Z buffering to reduce Z-fighting in 3D observer modes.
   - `--disable-terrain-observer-views`: Prevent loading of terrain observer view files.

3. **Configuration & Plugin Control:**
   - `--disp-setting filename`: Specify display engine configuration file.
   - `--do-not-check-plugin-versions`, `--do-not-load-vrf-plugins`: Skip version checks and prevent loading plugins in the ./plugins directory.

4. **Shadows, Logging, VSync & Profiling:**
   - `--enable-persistent-shadow-technique`: Enable persistent shadows.
   - `--enable-log-file-timestamps`: Add timestamps to log file lines.
   - `--enable-vsync`: Turn on Vertical Sync (VSync).
   - `--enable-tracy-profiling`: Enable Tracy Client for profiling.

5. **Entity & Grid Control:**
   - `--ent-disp-setting filename`, `--entity-defs-dir directory`: Specify entity display settings and load entity definition files.
   - `--entity-grid-cell-size x y z` or `--entity-grid-cell-size integer`: Set grid cell size for debugging and optimizing entity culling.

6. **Miscellaneous:**
   - `--extra-args "string1 ... stringn"`: Send arbitrary strings to the initializer, bypassing new command-line argument restrictions.
   - `--ent-type-map filename`: Load a specified object type mapping file.

- **Cell Size Specification:**
  - Specify cell size using `l` followed by three values: `l width height depth`.
  - Infinite cell size in one direction: `l size`.
  - Examples: `l 2000`, `l 2000 200 10000`, `l -1 -1 -1`.

- **Environment Configuration:**
  - Load environment configuration file: `--envSetting filename`.
  - Set factory default settings root directory: `--factoryRootDir directory`.

- **Text Shaping and Localization:**
  - Force text to use HarfBuzz shaping for right-to-left languages (may affect performance): `--forceTextShaping`.
  - Specify locale (for localization): `(-G | --locale) language`.

- **GUI Configuration:**
  - Specify GUI configuration file: `--gui filename` (simple, relative, or full path).

- **Command-Line Options for vrfGui:**
  - Display command-line usage information: `(-h | --help)`.
  - Change application and main render thread priority to highest available: `--highestPriority`.
  - Start in HLA Evolved mode using HLA command-line arguments: `--hla1516e`.
  - Disable creation of KD trees for intersections: `(-K | --disableKDTrees)`.

- **Logging and Layout Settings:**
  - Specify log file name: `(-l | --logFileName) filename`.
  - Specify GUI layout settings file: `--layoutSettingsFile filename` (default: UILayoutSettings).

- **Texture Limiting Options (for memory debugging):**
  - Restrict earth file texture sizes:
    - Splatting textures: `--limitEarthSplattingTextures "width height"`.
    - Terrain textures: `--limitEarthTerrainTextures "width height"`.
    - Vegetation textures: `--limitEarthVegetationTextures "width height"`.
  - Limit entity textures to specified resolution: `--limitEntityTextures "width height"` (turn off with `--limitEntityTextures "-1 -1"`).
  - Exclude specific textures from reduction limits: `--limitEntityTexturesExclusions "texture"`.
  - Limit terrain textures to specified resolution: `--limitTerrainTextures "width height"`.

- **Usage Notes:**
  - Using texture limiting options together (`--limitEntityTextures` and `--limitTerrainTextures`) helps prevent crashes with high VRAM usage.

- **Crash Prevention:**
  - Use `--limitGpuMemoryPercentage` to manage GPU memory usage and prevent crashes:
    - Set a value between 0 and 100 (typical values: 85-100).
    - Limits texture/buffer creation as a percentage of available video RAM for VR-Forces-side textures.
    - Use in conjunction with `--limitEntityTextures` and `--limitTerrainTextures` when experiencing high VRAM crashes.

- **Command-Line Options for vrfGui:**
  - **Plugin Management:**
    - `--loadPlugin`: Specify one or more plugins to load (DLL, SO, or XML files).

  - **Scenario Creation:**
    - `--loadSimulationObjectGroup`: Create a new scenario on the specified simulation object group.

  - **Display Configuration:**
    - `--mainScreenNum`: Set the display for the main window using its screen number (0 to number of screens -1).

  - **Data Merging (Additive):**
    - Merge files into default definitions:
      - Entity type mapping files (*.metx) with `--mergeEntityTypeMap`.
      - Hierarchy definition files (.hier) with various options: `--mergeHierarchyEntityDef`, `--mergeHierarchySpotReportDef`, `--mergeHierarchyTacticalGraphicsDef`, and `--mergeHierarchyUnitDef`.
      - Leaf files for entity, spot report, tactical graphics, and unit element definitions with respective options.
      - Model definition files (*.ommx) with `--mergeModelDefs`.

- **Merging Type Maps:**
  - Merge type mapping files:
    - `--mergeEntityTypeMap`: *.mtgx
    - `--mergeTacticalGraphicsTypeMap`: *.mtgx
    - `--mergeUnitTypeMap`: *.magx
  - Can merge files in a directory or individually.
  - Merged mappings coexist with existing ones by default; use `--overwriteMappingsOnMerge` to replace them.

- **Notification Level:**
  - Set application message notification level: `(-n | --notifyLevel) [0-4]`, default is 2.

- **Loading Data Definitions:**
  - Options to prevent loading specific data definitions:
    - `--noAppDataEntityDefs`
    - `--noAppDataUnitDefs`
    - Others for entity type maps, tactical graphics, spot report definitions, etc.

- **Time Sync and UUID Scheme:**
  - Enable time-based feature synchronization: `(-O | --hasNTPSync)`
  - Set UUID scheme for non-VR Forces objects: `--nonVrfObjectsUUIDScheme [entity-identifier, global-identifier, marking-text]`, default is entity-identifier.

- **Miscellaneous Options:**
  - Overwrite mappings on merge: `--overwriteMappingsOnMerge`
  - Load plugins: `--plugin filename`
  - Use pseudo full screen mode: `--pseudoFullScreen`
  - Suppress HAT intersection when attached: `(-S | --suppressHatIntersectOnAttach)`
  - Specify scenario file: `--scenarioFile filename`
  - Set shared data directory, root, stem, and settings directory:
    - `--sharedDataDir`, `--sharedDataRoot`, `--sharedDataStem`, `--sharedSettingsDirectory`
  - Set site ID: `(-s | --siteId ID)`
  - Set stencil bits: `--stencilBits [0 or 8]`, default is 0.
  - Load tactical graphics definitions: `--tacticalGraphicsDefsDir filename`

1. **Terrain and Data Loading:**
   - `--terrain_MTF_file`: Specify a terrain (MTF) file to load, accepting relative paths.
   - `--unitDefsDir filename`: Load unit element definition files from the specified directory.
   - `--userDataDir directory`: Set user data directory location. Default is `./userData`.
   - `--userScenarioDirectory directory`: Specify the "home" scenario directory. Default is `./userData/scenarios`.
   - `--userTerrainDirectory directory`: Set user terrain directory. Default is `$(SHARED_DATA_DIR)/Terrain/TerrainConfiguration`.

2. **Communication and Settings:**
   - `--useFileCommChannel channel`: Specify communication file for text-based commands.
   - `--useUserSettingsDirectory`: Store settings in the user login directory instead of application settings.
   - `--sharedSettingsDirectory`: Use in conjunction with `--useUserSettingsDirectory`.
   - `-v, --version`: Display version information.

3. **HLA and DIS Options:**
   - `--hla1516e` (for HLA): Enable HLA 1.5/1.6E-specific options.
   - `--dis` (for DIS): Enable Distributed Interactive Simulation (DIS) specific options, including PDU profiling.

4. **General Options:**
   - `-a, --appNumber number`: Set application number.
   - `-Z, --ignoreZoomForSpeedtreeLod`: Disable zoom for SpeedTree LOD (HLA only).
   - `--disableRequestUpdates`: Disable request updates for state objects.
   - `-i, --sessionId ID`: Specify session ID for the front-end instance.
   - `--ignoreAdvisories`: Enable/disable HLA advisory messages. Default is true.
   - `-N, --federateName federate_name`: Set a unique federate name (HLA Evolved only).
   - `--numberOfremoteNetworkThreads thread_count`: Set number of worker threads for remote object discovery.
   - `-p, --federateType type`: Specify federate type for save-and-restore purposes.
   - `--requestWhenInitialized`: Request attribute updates only when a state object is initialized.
   - `--rprFomRevision revision_number` and `--rprFomVersion version_number`: Set RPR FOM revision and version.
   - `-x, --execName exec_name`: Set execution name. Default is `MAK-RPR-2.0`.
   - `--useGeographicDdm`: Use geographic DDM with MAK RTI (default: false).

1. **Reported Host Address String:**
   - Same as device address.
   - Specifies IP address reported by VR-Forces for file transfers, especially across routers with network address translation.

2. **vrfSim Command-Line Options:**
   - `--ignore_rest`: Ignores subsequent command-line options.
   - `-a | --appNumber number`: Sets application number.
   - `--additionalSystemScriptsDirectory directory`: Specifies system scripts directory.
   - `--appIdRangeMax max`: Rolls application number when entity number limit is reached.
   - `-B | --batchScenarioFileName batch_file`: Runs specified batch file (single back-end use).
   - `-c | --frontEndPID PID`: Sets front-end process ID in combined mode.
   - `--clockMode mode` (Windows): Chooses time stamping method (performance counter or system clock).
   - `--connectionless`: Runs VR-Forces without connection.
   - `--countryCodesMappingFile file_name`: Maps country codes to names and DIS values using specified file.
   - `-d | --settingsFile file_name`: Loads custom configuration file instead of `vrfSimSettings.xml`.
   - `--daemon` (Linux): Starts back-end as daemon process.
   - `--dataDir directory`: Sets data directory for the back-end.
   - `--defaultObjectTimeout timeout`: Sets object timeout interval.
   - `--dis5Timestamps`: Enables DIS 5 time management method to fix DIS 7 timestamp issues.
   - `--diGuyAnimationsFile file_name` and `--diGuyCharacterDataFile file_name`: Specify additional DI-Guy configuration files.
   - `--disableParallelTick`, `--disableParallelPublisherTick`, and `--disableRemoteDiscovery`: Disable parallel tick execution, publisher ticking in parallel, and remote object discovery, respectively.
   - `--doNotLoadVrfPlugins`: Prevents loading of VR-Forces plug-ins from `./plugins` directory.

1. **Channel Management:**
   - `--enableChannel channel`: Enables a specific output channel, overriding any disabling in `channelSettings.mtl`.

2. **Profiling and Performance:**
   - `--enablePduProfiling string`: Enables entity PDU flood check based on time or packet count.
   - `--logFrameRateStatistics`: Captures performance statistics using Tracy Client for back-end.

3. **Simulation Control:**
   - `--exitOnTestResultCommand`: Stops the simulation after a 'Test Result' statement in the plan.
   - `--startInRunMode` (-r): Starts the back-end in run mode; otherwise, it starts in pause mode if no scenario or terrain is specified.

4. **File and Data Management:**
   - `-L`, `--scenarioFileName "pathname"`: Loads a specific scenario file.
   - `--loadPlugin plugin_filename`: Specifies one or more plugins to load (DLL/SO or XML).
   - `--outputLogFile file_name`: Sets the output log file for application output.

5. **Notifications and Logging:**
   - `-n`, `--notifyLevel notification_level` (0-4): Sets the message notification level for console and VR-Forces log file.
   - `-q`, `--doNotUseConsole`: Redirects all vrfSim output to the log file instead of the console.

6. **Identifiers and UUIDs:**
   - `-i`, `--sessionId session_ID`: Specifies a session ID.
   - `-s`, `--siteId ID`: Sets the site ID for the simulation.
   - `--nonVrfObjectsUUIDScheme scheme` (entity-identifier, global-identifier, marking-text): Sets the UUID scheme for non-VR Forces objects.

7. **Thread Management:**
   - `--numCallbackThreads threads`: Sets the number of threads in the callback queue.
   - `--numNetworkCallbackThreads threads`: Sets the number of network threads in the callback queue.

8. **Miscellaneous:**
   - `-h`, `--help`: Displays command-line usage information.
   - `--hostAddressString address`: Specifies the IP address of the host computer (Device Address in the Launcher).
   - `--fullyLoadTerrain`: Loads all pages for paged terrains.
   - `--msdlSIDCMappingFile file_name`: Specifies an alternative file for mapping SIDC codes to DIS enumerations.

1. **Network & Performance:**
   - `--selfReflect`: Reflects all network traffic back to this back-end.
   - `--setMainThreadToHighPriority` (Windows only): Sets VR-Forces main thread to high priority, potentially starving other threads or decreasing overall system performance on hardware with limited processors.
   - `--targetFrameRate rate`: Specifies the frame rate above which vrfSim yields CPU time to other processes.

2. **Data Directories:**
   - `--sharedDataDir`, `--sharedDataRoot`, `--sharedDataStem`: Define locations of shared data directory, root, and stem respectively.
   - `--sharedSettingsDirectory`: Specifies where shared settings are stored; defaults to $(APP_DIR)/settings or user's settings directory if `--useUserSettingsDirectory` is set.

3. **Simulation & Behavior:**
   - `--simulationModelSet sms`: Specifies the simulation model set for front-end and back-end.
   - `--startMinimized`: Minimizes vrfSim console at startup.
   - `--suppressDataAvailableException`: Prevents exception when dataAvailable is not checked in non-blocking terrain calls.

4. **Terrain & Time:**
   - `-T` or `--terrainDatabase` `terrain_database`: Specifies a terrain database to load in the back-end; mutually exclusive with `-L` option.
   - `--useAbsoluteTimeStamps`: Enables use of absolute timestamps, requiring synchronized time clocks.

5. **Output & Profiling:**
   - `--testOutputFilename filename`: Logs scenario autotest outputs to specified file.
   - `--tracyPort integer`: Allows profiling a different back-end port than the default (10101) using Tracy Client.

6. **User Data & Settings:**
   - `--userDataDir directory`: Specifies user data directory for the back-end.
   - `--useUserSettingsDirectory`: Stores settings in user login settings directory instead of application settings directory.

7. **Version & Help:**
   - `-v` or `--version`: Displays version information.

8. **HLA (High-Level Architecture) Specific Options:**
   - `--waitQueue`: Turns off main thread participation in parallel algorithms; HLA only.
   - `--enableMetoc`: Enables METOC weather publishers; applies only to HLA 1516 Evolved.
   - `--ignoreAdvisories`: Enables or disables HLA advisory messages (default: true).
   - `--mimModule HLAE_MIM`, `--fomModules module`, `--netnFomRevision revision_number`, `--netnFomVersion version_number`, `--noRtiCompilerCheck`: Various HLA-specific options.

1. **Federate & RTI Settings:**
   - `--federateType` (-p): Distinguishes federates for save-and-restore.
   - `--rprFomVersion` (version_number): Specifies RPR FOM version (0.5 to 2.0).
   - `--rprFomRevision` (revision_number): RPR FOM revision for RPR FOM 2.0, draft 17.
   - `--localSettingsDesignator` (-S): Passes a string to the RTI during federate connect.

2. **Execution & Network Settings:**
   - `--execName` (-x): Execution name. Default: VR-Link. DIS Only.
   - `--destAddrString` (-A): Destination address for network traffic.
   - `--deviceAddress`: Address of the network card used for UDP traffic.
   - `--disVersion`: DIS version. Default: 7.

3. **Data & Entity Management:**
   - `--appDataDir`: Location of application data. Default: `./appData`.
   - `--appIdRange`: Range of application IDs representing objects generated by VR-Forces.
   - `--attributePduStrategy`: Controls how VR-Forces sends DIS attribute PDUs for GUI control of entities.

4. **Network Traffic & Buffer Settings:**
   - `--mcastTtl`, `--multicastAddresses` (-P): Multicast time-to-live and addresses.
   - `--recvBufferSize`, `--sendBufferSize`: Receive and send buffer sizes.

5. **DIS & Entity Control:**
   - `--suppressSelfReflect`: Represses self reflection of the DIS exercise connection.
   - `--useAsyncIO`: Enables asynchronous I/O.
   - `--useIpv6`: Enables IPv6 protocol usage for DIS exercise connection.

6. **vrfLauncher Command-Line Options:**
   - `-B`/`--backend`, `-F`/`--frontend`, `-C`/`--config`: Start vrfLauncher for back-end, front-end only, or open config tool.
   - `--guiArgs`: Arguments passed only to the front-end.
   - `-h`/`--help`: Displays help information.
   - `-R`/`--makRadio`: Launches the standalone MAK Radio application.

The text discusses command-line options for `vrfLauncher`, used to launch VR-Forces simulations:

1. **Arguments after `--simArgs`**:
   - Passed only to the back-end.
   - Example: `--deviceAddress 127.0.0.2 --appNumber 3002`

2. **Predefined connections**:
   - Use `--usePredefinedConnection "connection_name"` to start with a predefined connection.
   - Enclose names with spaces in quotes (e.g., `"DIS (7) localhost"`).
   - Launch from Launcher at least once to save network address information.

3. **Special commands for arguments after `--`**:
   - `F--`: Passes arguments only to the front-end.
   - `B--`: Passes arguments only to the back-end.
   - `--`: Opposite usage compared to other MAK applications.

4. **Combined mode from command line**:
   - Use `--usePredefinedConnection "connection_name"` for direct combined mode startup.

5. **Protocol-independent options**:
   - `-s <site_id>`: Set site ID for both front-end and back-end.
   - `-a <app_number>`: Set application number for both front-end and back-end.
   - `-G <language_code>`: Override GUI language (e.g., `-G de` for German), requiring a corresponding translation file.

6. **Version information**:
   - Use `-v` or `--version` to display version details.

- **Notification Level Control (5.4.3):**
  - Use `-n` option to set notification level.
    - Levels: `0` (fatal only), `1` (warnings + fatal), `2` (diagnostic info + above), `3` (verbose), `4` (debug).
    - Default is `2`. Linux doesn't have a log file; redirect output to capture informational messages.

- **Loading Plug-ins (5.4.4):**
  - Load from command line using `--loadPlugin` or in config file.
  - Don't include plugin extension (e.g., `.dll`). VR-Forces can display loaded plugins.

- **HLA Federations Command-Line Options (5.5.):**

  - **Specify Federation Execution (-x):**
    - Default: `MAK-RPR2-1-1.fed` and `MAK-RPR-2.0`.
    - Example: `vrfSimHLA1516e -s 1 -a 3001 -x MAK-RPR-2.0 --rprFomVersion 2.0 -F MAK-RPR2-1-1.fed`

  - **Specify FED File (-F):**
    - Applies to front-end and back-end in combined mode.
    - Example: `vrfSimHLA1516e -s 1 -a 3001 -F MAK-RPR2-1-1.fed`

  - **Specify RPR FOM Version:**
    - Default is `2.0`. Supported versions: `0.5, 0.7, 0.8, 1.0, 2.0006, 2.0014, 2.0017`.
    - Example: `vrfSimHLA1516e -s 1 -a 3001 --rprFomVersion 2.0 -F MAK-RPR2-1-1.fed`

  - **Specify FOM Mapper (-f):**
    - Supports alternative FOMs through VR-Link FOM Mapper.
    - Example: `vrfSimHLA1516e -s 1 -a 3001 -x MAK-RPR-2.0 --rprFomVersion 2.0 -F MAK-RPR2-1-1.fed -f myFomMapper`

  - **Specify RPR FOM Revision:**
    - MAK maintains multiple revisions for compatibility.

  - **Additional Notes:**
    - VR-Forces listens to the port specified in the RID file.
    - If using MAK RTI and running multiple, concurrent federation executions, run `rtiexec`.
    - MAK RTI cannot be used in lightweight mode with VR-Forces.

- **HLA Federations:**
  - Specify RPR FOM revision: `--rprFomRevision <revision>` (e.g., `vrfSimHLA1516e --rprFomRevision 2`)
  - Provide initialization data for FOM Mappers: `--fomMapperInitData <data>` (e.g., `vrfSimHLA1516e --fomMapperInitData ABC`)
  - Use appropriate FED file for chosen FOM Mapper
  - Enable time management for back-end

- **DIS Exercises:**
  - Change default port (3000): `-P <port>` (e.g., `vrfSimDIS -P 3500`)
  - Specify communication mode:
    - Point-to-point: `-A <address>`
    - Multicast: `-S <address> [--mcastTtl <ttl>]`
  - Use asynchronous I/O: `--useAsyncIO`
  - Set exercise ID: `-x <id>` (e.g., `vrfSimDIS -x 6`)
  - Specify DIS version: `--disVersion <version>` (e.g., `vrfSimDIS --disVersion 7`)

The provided text discusses methods to optimize performance in MAK Technologies' VR-Forces, a simulation software used for DIS exercises. Here are the key points:

1. **Performance Factors:**
   - Terrain database size
   - Available memory and computer processing power
   - Number of objects and their activity level
   - Tick rate frequency
   - Number of front-ends and back-ends running

2. **Optimization Methods:**

   **Simulation Engine Performance:**
   - Adjust refresh rates
   - Turn off processor-intensive features
   - Specify VR-Forces sleep time
   - Optimize terrain usage
   - Use interest management to filter simulation objects

   **Multiprocessor Usage:**
   - Configure VR-Forces for optimal CPU usage
   - Adjust settings for large scenarios

3. **Monitoring and Configuration Tools:**
   - Tracy Profiler for back-end performance monitoring
   - Monitor script frame rates
   - Display performance statistics using VR-Forces or Tracy Client
   - Clear model instancing cache
   - Miscellaneous performance options like limiting spot reports, asynchronous I/O, and incremental compiling

4. **Additional Performance Settings:**
   - Set tick rate for components
   - Configure graphics quality with alpha to coverage, ambient occlusion, and trajectory smoothing
   - Balance visual quality against network performance
   - Adaptive tick rate and preloading models
   - DI-Guy performance settings and developer debug overlay

5. **Potential Performance Issues:**
   - Nahimic audio software and Fault Tolerant Heap (FTH) on Windows can negatively impact performance

1. **Monitor Performance:**
   - Use Performance Monitor panel and Tracy tool to understand performance characteristics.
   - Edit `./appData/settings/vrfSim/vrfSim.mtl` file to adjust settings.

2. **Adjust Thread Counts:**
   - **numCallbackThreads:** Increase if Object Tick > Network Tick in Performance Monitor; helps with complex entities. Adjust at runtime using the '# Threads' field.
   - **numNetworkCallbackThreads:** Increase if Network Tick > Object Tick; helps with many low-complexity or remote entities. More than 1 thread may cause instability; default is 1 unless RTI is thread-safe.
   - **numberOfNavQueueProcessingThreads:** Increases navigation path query responsiveness but doesn't affect simulation frame rate.

3. **CPU Usage:**
   - Sum of these three thread counts should be about 2 less than total available logical CPUs.
   - Leave at least 2 CPUs free if VR-Forces GUI runs on the same hardware as Simulation Engine.

4. **Multiprocessing & Network Connections:**
   - Run only one simulation engine per computer in VR-Forces 5.0 and later.
   - For large numbers of entities/frequent updates, use HLA connections; ensure RTI supports multithreaded calls to avoid instability.
   - Using MAKRTI 4.6b or newer, VR-Forces automatically sets Processing Model to 2 for multiple network threads.

5. **Load Balancing:**
   - If performance doesn't meet needs after optimization, consider using multiple machines and back-ends (see page 253).

**Additional Key Points:**

- In VR-Forces 4.10 and earlier, running multiple simulation engines on the same computer was recommended for multiprocessing capabilities; however, this is no longer recommended in VR-Forces 5.0 and later.
- The terrain paging thread and the main thread are additional to the three adjustable threads mentioned above.

- **Multiple Network Threads:**
  - MAK RTI 4.6a and earlier: Set `RTI_processingModel` to 2 in `RTI rid.mtl` and `useSingleNetworkThreadWhenRtiThreadSafetyNotGuaranteed` to 0 in `vrfSim.mtl`.
  - Other RTIs: Configure for multithreaded calls, then set `useSingleNetworkThreadWhenRtiThreadSafetyNotGuaranteed` to 0 in `vrfSim.mtl`.

- **Optimizing HLA Object Discovery:**
  - In large scenarios with many published entities, use `--requestWhenInitialized` command line argument when launching `vrfSim` and `vrfGui` to delay Request Attribute Value Update service calls.

- **Front-End Performance Optimization:**
  - **Factors affecting performance:**
    - Processor speed
    - Video card (use latest drivers)
    - Available memory
    - Terrain database size
    - Model complexity and optimization
    - Number of active objects
    - Use of model instancing

  - **Display features impacting performance:**
    - Displaying performance statistics
    - Ground clamping
    - Track histories
    - Height-above-terrain lines
    - Radio communications lines
    - Advanced lighting effects
    - Dynamic ocean effects (disabled by default in Plan View)
    - Sound effects

  - **Solutions for optimization:**
    - Configure anti-aliasing settings and Horizon Based Ambient Occlusion (HBAO)
    - Clear the model instancing cache
    - Filter simulation objects using interest management
    - Set clipping planes
    - Configure SpeedTree trees, ocean LOD elevation, ocean height map
    - Manage wakes, spray effects, and buoyancy for surface entities
    - Optimize skybox cube map settings
    - Improve performance when attaching to ground objects

1. **Monitoring Back-end Performance:**
   - View frame rate statistics for each back-end using the Performance Monitor Panel (View > Performance Monitor Panel).
   - Select a back-end to view detailed information.
   - Refer to "VR-Forces Simulation Engine Architecture" in the VR-Forces Developers Guide for further details.

2. **Using Tracy Profiler:**
   - Enable Tracy profiler in VR-Forces Sim Engine console by entering "tracy enable".
   - Start Tracy Client, load a scenario, and attach to vrfSim to gather statistics.
   - For more information, see "6.4.2 Using the Tracy Client".

3. **Monitoring Script Frame Rates:**
   - Enable script frame rate monitoring in Application Settings (Settings > Application > Script Settings).
   - Open Scripts window (Simulation > Scripts) to view average tick rate for active scripts.

4. **Displaying Performance Statistics:**
   - Enable VR-Forces performance statistics overlay in Display Settings (Settings > Display > Render Settings).
   - Includes scene information and function profiler, mainly for developers.
   - Use Tracy Client for performance evaluation or debugging, ensuring compatibility with the included version.

- **Running Tracy Client and Saving File:**
  - Enable Performance Statistics Overlay.
  - Select 'Tracy' for stats collection.
  - Run Tracy Client (Windows: Start > MAK Technologies > VR-Forces Tools, Linux: `../bin64/Tracy-release`).
  - Connect and save the trace file.

- **Interest Management for Performance Improvement:**
  - Filters simulation objects based on distance from observer.
  - Requirements:
    - HLA (not DIS)
    - MAK RTI 3.4a or later with DDM support
    - Enable DDM in connection settings
    - Use `--useGeographicDdm` command line option for `vrfGui`
  - Configuration:
    - Set DDM region size (distance threshold)
    - Set region update threshold (percentage of distance from center to side)
    - Optionally, filter objects based on observer's altitude in 3D modes
  - Enable Interest Management in Display Settings.

1. **Region Update Threshold:**
   - Set a percentage value in the Region Update Threshold box for update threshold.
   - Optionally, hide simulation objects based on observer's altitude:
     - Check 'Hide Entities When Observer's Altitude is Above'.
     - Specify the observer altitude for hiding objects.
   - Click 'OK'.

2. **Clearing Model Instancing Cache:**
   - Clears shared resources (geometry and textures) to free disk space.
   - Automatically clear after each scene change:
     - Go to Settings > Application > File Caching Settings.
     - Check 'Clear Instances After New Scene'.
   - Manually clear the cache:
     - Go to Settings > Application > File Caching Settings.
     - Click 'Clear Instancing Cache'.

3. **Performance Optimization Options:**
   - Improve performance by limiting display features: turn off track histories, limit object transparency and spot reports, use asynchronous I/O in DIS, and incremental compiling for streamed data.

4. **Spot Reports Control:**
   - Limit or disable spot reports to improve performance.
   - Send spot reports only to the front-end.

5. **Asynchronous I/O for DIS Exercises:**
   - Mitigate network traffic issues by using asynchronous I/O.
   - Use '--useAsyncIO' command-line option or select 'Use Asynchronous I/O' in Simulation Connections Configuration dialog box.

6. **Incremental Compiling with Streamed Data:**
   - Reduce performance spikes by creating the environment variable OSG_ICO.
   - May cause LOD issues with other paged formats.

7. **Tick Rate Adjustment:**
   - Tune performance by varying tick rates of components, state repositories, and network interfaces.
   - Decrease tick rate for slow-moving entities to free up CPU time for faster entities.
   - Minimum tick period specifies the shortest time between ticks; increasing this value reduces ticking frequency.

- **Increasing Component Tick Frequency:**
  - Reduce `minimum tick period` value to increase the frequency of component ticking.
  - Set a `minimum tick period variance` to prevent simultaneous ticking and CPU usage spikes.
  - Calculate the next tick time using: `tnext = t0 + min-tick-period +/- rand(min-tick-period-variance/2)`.
    - Example: With `min-tick-period = .1` and `min-tick-period-variance = .05`, `tnext` will be between `.15` and `.1625` seconds.

- **Setting Tick Rate:**
  - Specify `min-tick-period` and `min-tick-period-variance` in the object parameter database for each simulation object or component.
  - Component-level settings override object-level settings if both are specified.

- **Configuring Graphics Quality:**
  - Adjust anti-aliasing level (0, 2, 4, 8, or 16) based on your graphics card's capabilities to reduce jagged edges in digital graphics.
    - Default: 4. Set to 0 for older cards to improve performance.
  - Configure horizon-based ambient occlusion.

- **Alpha to Coverage:**
  - Enables better rendering of transparent objects with sharp transitions (e.g., grass, trees) and provides a slight performance improvement.
  - Enabled globally by default for models and terrains.
  - Enable the dither shader to reduce hard edges between alpha levels, adding minimal noise as the object or camera moves.

- **Alpha to Coverage (A2C):**
  - **Models:**
    - Enable globally: `Settings > Display > Render Settings > Models Alpha to Coverage`.
      - Affects all models without specific settings.
    - Enable per model: Add `alphaToCoverageEnabled` parameter to the model definition.
  - **Terrains:**
    - Enable globally: `Settings > Display > Render Settings > Terrain Alpha to Coverage`.
      - Affects all patches without specific settings in their MTF file.

- **Dither Shader for Alpha to Coverage:**
  - Modifies alpha with noise pattern to avoid hard edges.
  - Adds minor noise during object/camera movement.
  - Enable/Disable: `Settings > Display > Render Settings > Alpha to Coverage Dither`.

- **Horizon-based Ambient Occlusion (HBAO):**
  - Improves realism by approximating ambient light.
  - Differences are subtle but noticeable in certain areas.
  - Enable/Disable: `Settings > Display > Observer Settings > Ambient Occlusion (HBAO+)`.

- **Ambient Occlusion Parameters:**
  - HBAO Radius: Determines effect distance from occluding objects. Higher values extend the effect further.
  - HBAO Bias: Adjusts effect for thin items.

**Key Points:**
1. Alpha to Coverage can be enabled globally or per model/terrain patch with specific settings.
2. Dither shader helps smooth alpha transitions but adds minor noise during movement.
3. Horizon-based Ambient Occlusion enhances realism by approximating ambient light.
4. HBAO parameters (Radius, Bias) adjust the appearance of ambient occlusion effects.

- **HBAO (High Definition Ambient Occlusion) Settings:**
  - **Exponent:** Controls overall intensity of HBAO effect.
    - Higher values create a more intense effect.
  - **Scale Small AO:** Intensifies effect on close or small objects.
    - Higher values have a more intense effect on small corner areas and close objects.
  - **Scale Large AO:** Intensifies effect at edges within specified radius.
    - Higher values make the area around HBAO radius distance show a more intense effect.
  - **Depth Clamp Mode:** Determines how occlusion is applied to screen edges.
    - 'Border' uses a method that reduces false occlusion along the edge of the screen.
    - 'Edge' uses a method that correctly applies the occlusion effect to objects at the screen's edge.
  - **Configuration:** Access via Settings > Display > Render Settings page.

- **Performance Tuning with Dead-Reckoning Thresholds:**
  - Reducing thresholds improves entity movement accuracy and reduces jumpy movement.
    - However, it increases network performance as more packets are sent for each entity.
  - Changes apply until back-ends are closed and override XML settings (./appData/settings/vrfSim/vrfSimSettings.xml).
  - Runtime changes don't affect:
    - Back-ends that join the scenario after thresholds are sent; they use default VR-Link thresholds or values in the XML file.
    - Objects instantiated with a customized VR-Link DtThresholder.

- **Performance Settings Configuration:**
  - Access via Settings > Application > Performance Settings page.
  - Adjust 'Visual Quality' slider to balance visual quality and network performance.
  - Optionally, override smoothing period using sliders ('Override Smoothing Period' or 'Use Specified Smoothing Value').

- **Entity-Type Specific Threshold Overrides:**
  - Enabled by `dr-allow-gui-overrides` configuration parameter in OPE files.

- **Dead-Reckoning:**
  - VR-Forces calculates an object's position between state updates using its heading and acceleration.

- **Trajectory Smoothing:**
  - To eliminate positional jumps, VR-Forces can smooth trajectories and rotation paths over a specified period.
  - Default smoothing period is 1/10 second. Adjusting this value can improve or worsen visualization depending on the entity's speed.

- **Impact on Visualization:**
  - Improves appearance of fast-moving entities (e.g., fixed-wing aircraft).
  - May worsen visualization for slow-moving entities (e.g., dismounted infantry).

- **Configuration:**
  - Enable/disable smoothing and adjust the smooth period:
    - Application Settings > Performance Options.
    - Display Settings > Entity Display Settings for articulated parts.

- **Target Frame Rate Tuning:**
  - Specify a frame rate above which VR-Forces will sleep to give up CPU time, applicable only in variable frame mode.

- **Coloring Draw Calls:**
  - VR-Forces allows coloring draw calls to identify objects causing performance issues by showing the number of draw calls required for each model.

- **Draw Calls & Geometry Groups:**
  - More colored parts in a vehicle mean more draw calls (25 parts = 25 draw calls).
  - Indirect geometry groups combine draw calls to reduce their total number.
  - Indirect rendering for entities is enabled by default.

- **Visualizing Draw Calls:**
  - Change Component Visualization setting to different debug modes and back to Debug Texture to refresh colorization.
  - Enable Colorize Drawables in Display Settings > Render Settings page.
  - High dynamic range may cause washed-out colors; see "48.9. Using High Dynamic Range Lighting" for more info.

- **VSync (Vertical Synchronization):**
  - Prevents visual tearing but caps frame rate based on display refresh rate (typically 60Hz).
  - Enable triple buffering in your video card's configuration to avoid forced lower frame rates.
  - VR-Forces enables VSync via `--enableVSync` command-line option or by setting graphics card to "Use application setting".

- **Managing 3D Settings & Multiscreen Performance:**
  - Ensure all monitors have the same refresh rate (usually 60Hz) when using remote displays.
  - Adjust Vertical Sync settings in NVIDIA Control Panel:
    - Global Settings: Change Vertical Sync from 'On' to 'Use the 3D application setting' or 'Off'.
    - Program Settings: Check if vrvIG or vrvStealth are listed, and adjust their Vertical Sync settings accordingly.

- **Adaptive Tick Rate:**
  - Adjusts entity update frequency based on distance from the observer.
    - Supports a large number of entities by reducing updates for distant ones.
    - May cause display issues with high-speed objects, such as aircraft.
    - Default inner radius: 1000m (updates every 6 frames), outer radius: 10,000m (updates every 30 frames).
  - Enable/Disable:
    - Settings > Display
    - Entity Display Settings Page

- **Model Preload Configuration:**
  - Select models to preload in 'Model Definitions' list.
  - Move selected models to 'Preload Model Definitions' list using the right-facing arrow.
  - Load preloaded models immediately with 'Load Preload Model Definitions'.
  - Command-line options:
    - Specify a different model preload file: `--modelPreloadFileName filename`
    - Capture non-preloaded models and save to a file: `--discoveredModelPreloadFileName filename`

- **DI-Guy Performance Settings:**
  - Adjust maximum draw distance and maximum motion update distance.
  - Enable/disable multi-threaded update for debugging purposes.
  - Enable instancing, set LOD for instancing, and visualize instanced characters.

- **Using Developer Debug Overlay:**
  - Accessible via 'Settings > Display' > 'Render Settings'.
  - Provides menus and options for testing ocean settings, shadow settings, and other visual features using ImGui API.
  - Enable by selecting the 'Developer Debug Overlay' checkbox.

VR-Forces operates within scenarios, which are comprehensive files containing all necessary specifications for running simulations. Key scenario files include:

- `.scn`: Scenario file.
- Supporting files: `.oob` (objects), `.pln` (plans), `.omp` (object maps), `.ovl` (overlays), `.spt` (scripts), `.sgr` (selection groups), `.xtr` (extras), `.osrx` (saved views), `.gui_settings` (GUI settings).

**Scenario Management:**

1. **Create a Scenario:**
   - Specify multiple simulation model sets.
   - Configure simulation model set settings.
   - Set the scenario's start date and time.
   - Import objects using:
     - Merging scenarios.
     - Importing MSDL, CSV files, airspace control orders, or two-line element sets.
     - Loading object tags.

2. **Save a Scenario:**
   - Save an existing scenario with its current name/format.
   - Save as a new name or different format.

3. **Load a Scenario:**
   - Load recently used scenarios.
   - Load from the command line.
   - Edit scenario properties or description.
   - Navigate scenario directories.
   - Use sample scenarios.
   - Apply load balancing for improved performance.

4. **Run a Scenario:**
   - Adjust simulation speed.
   - Pause, rewind, or close the scenario.
   - Reinitialize if needed.
   - Manage scenario states with checkpoints and snapshots.
   - Automatically pause based on end time settings.

5. **Additional Features:**
   - Use batch mode with batch files for automated processes.
   - Send run/pause messages to simulation participants.
   - Record simulations using the MAK Data Logger.

- **VR-Forces Startup:** The VR-Forces application begins with a Scenario Startup screen, prompting users to create or load a scenario unless this feature is disabled.

- **Creating a New Scenario:**
  - Access the 'New Scenario' option via File > New Scenario or the New Scenario button on the File Toolbar.
  - Select a terrain database (preferably MTF) from the Initial Scenario Information dialog box, which opens by default in `./userData/terrains`.
  - Click 'Open' to proceed to the New Scenario dialog box.
  - Choose the simulation model set (SMS) for your desired scenario type: entity-level or aggregate-level.
  - Optionally, set other basic scenario parameters:
    - **Scenario Name:** Identifies the scenario during sessions. Defaults to the scenario file name if not specified.
    - **Simulation Terrain:** Specifies the back-end terrain; defaults to the selected front-end terrain but can be changed.
    - **Scenario Description:** Provides a description of the scenario, which can be entered as plain text or HTML for formatting.
    - **Attach Components to Remote Entities On:** Determines if components are attached to remote entities and specifies the back-ends managing these components. This parameter can be changed when loading a scenario.

**Key Points:**
1. VR-Forces startup allows creating or loading scenarios.
2. To create a new scenario, select a terrain database and choose an SMS.
3. Customize basic scenario parameters as needed.
4. Multiple front-ends in the same session may affect loaded terrains based on newly created scenarios.

- **Advanced Tab (Figure 58) in New Scenario Dialog Box:**
  - Allows setting advanced scenario parameters, overriding defaults.

- **Advanced Scenario Parameters (Table 11):**
  - **Terrain Display:** Use same or different terrain for front-end and back-end.
  - **Simulation Model Sets:** Specify additional or alternative SMSs. At least one must be specified.
    - *For more details on specifying multiple simulation model sets, see "7.1.1 Specifying Multiple Simulation Model Sets" on page231.*
  - **Component Attachment Table:** Specify if attaching components to remote entities.
    - *For details about configuring components for attachment to remote entities, see "78.1. Attaching Components to Remote Entities" on page1558.*
  - **Time Multiplier:** Set scenario time speed (ignored in HLA time-managed federations). Default: 1.0 (real-time).
  - **Dynamic Terrain & Environment Support:**
    - *Enable global dynamic terrain processor for entire terrain monitoring, or create a dynamic terrain area.*
    - *Enable global weather support, or use settings on the Environment Conditions dialog box, Weather page.*
  - **Scenario End Time:** Set automatic pause time for the scenario.
    - *For more information, see "7.9.1 Setting the Scenario End Time for a New Scenario" on page265.*
  - **Illumination Model:** Use ephemeris model to calculate illumination or full world illumination regardless of time of day.
    - *For more information, see "11.3.3 Choosing the Illumination Model" on page328.*
  - **Random Number Seed:** Specify an integer >= 0.
  - **Frame Mode & Time:**
    - *Select a frame mode from the list (fixed-frame, variable-frame).*
    - *Specify the length of a frame, in seconds. This parameter is not enabled if Frame Mode is variable-frame.*
  - **Load Balancing:** Distribute objects across back-ends using even distribution or rule-based methods.
    - *For more information about rule-based load balancing, see "Rule Based Load Balancing" on page254.*

**Creating a Scenario Steps:**
1. Optionally, select the Advanced tab to set advanced scenario parameters.
2. Click OK to display scenario information and terrain in Plan View (2D) observer mode.
3. Add required simulation objects and tactical graphics.
   - *For information about adding simulation objects and tactical graphics, see "Chapter 14. Creating and Placing Objects" on page369.*
4. Save the scenario.
   - *For details about saving scenarios, see "7.3. Saving a Scenario" on page244.*

- **Multiple Simulation Model Sets (SMS):** Use more than one SMS in a scenario for extended functionality.
- **Strategy:** Utilize default VR-Forces SMS for most objects and create separate custom SMS for unique simulation objects to simplify upgrades.
- **Overlap:** If multiple SMS have overlapping objects, the last loaded SMS takes precedence. Avoid using entity-level and aggregate-level SMS together due to interaction limitations.
- **Loading Multiple SMS:**
  - In the 'New Scenario' dialog box, click 'Browse' next to 'Simulation Model Set'.
  - Click 'Add Model Set', select an SMS file, and confirm with 'OK'.
  - Complete the scenario setup.
- **SMS Configurations:** Create configurations for frequently used combinations of SMS to save time in setting up scenarios that use multiple SMS.
- **Creating SMS Configuration:**
  - Navigate to 'Settings' > 'Application' > 'Simulation Settings' page.
  - Click 'Add' on the 'Simulation Model Set Configuration' line, enter a name, and confirm with 'OK'.
  - Add model sets to the configuration.

- **Adding SMS to a Configuration:**
  - Click 'Browse' at the end of a new line.
  - Select desired SMS in the file chooser dialog box.
  - Click 'Open'. The SMS is added to the list.
  - Optionally, add more SMSs and click 'Close'.

- **Specifying Default SMS Configuration:**
  - Go to Settings > Application.
  - Select Simulation Settings page.
  - Choose the desired default configuration in the list.
  - Click the star button () next to it.

- **Setting Scenario Starting Date and Time:**
  - By default, starts at current system date (10:00 AM local time).
  - Change using:
    - Different date/time but same location as first object.
    - Specific date, time, and time zone.
  - Use Environment Conditions dialog box to set start date/time before creating the first simulation object.

- **Adjust Scenario Start Time:**
  - Access Environment Conditions dialog via Simulation > Environment Conditions.
  - Deselect 'Keep Local Time Constant as Observer Moves (Until First Object Created)'.
  - Set desired start date, time, and time zone.

- **Efficiently Create Scenarios with Reusable Components:**
  - **Simulation Object Groups:** Create reusable groups of objects and graphics, not tied to terrain until added.
  - **Scenario Import:** Import base scenarios or layouts into new scenarios for repeated use, preserving originals.
  - **MSDL Import:** Import MSDL entity laydowns into different scenarios as needed.
  - **CSV Import:** Import point, linear, or areal objects from CSV files.
  - **Order of Battle (OOB):** Export and import OOB between scenarios.
  - **Tactical Graphics:** Export tactical graphics to shapefiles for reuse.

- **Merge Scenarios:**
  - Import developed scenarios into a master scenario with options:
    - Rename imported simulation objects to avoid duplicates.
    - Import scenario events from the merged scenario.
    - Create a selection group for the imported simulation objects.

When importing one scenario into another, you may encounter object name conflicts. Here's how to handle them:

1. **Allow Duplicate Names**: Keep identical names for objects in both scenarios.
2. **Add Prefix to All Object Names**: Append a specified prefix (from 'Deconflicting Name' field) to every object in the imported scenario, not just those with conflicting names.
3. **Change Only Conflicting Names**: Add a prefix only to objects with name conflicts.

Importing a scenario with a different simulation time may lead to unexpected behaviors due to timing issues.

**Included/Excluded on Import:**

- **Included:**
  - Simulation objects (entities, units, tactical graphics) without conflicting UUIDs.
  - Simulation objects with conflicting UUIDs, if 'Discard Duplicate Simulation Objects' is not selected.
  - Scenario events, when 'Import Scenario Events' is selected.
  - Global plans and synchronization matrices.

- **Excluded:**
  - Simulation Management System (SMS).
  - Global environment (weather, date, time of day).
  - Terrain.
  - Dynamic terrain changes made by the global dynamic terrain manager object.
  - Simulation objects with conflicting UUIDs, if 'Discard Duplicate Simulation Objects' is selected.

**Importing a VR-Forces Scenario:**

1. Open an existing scenario.
2. Choose 'File > Import VR-Forces Scenario'.
3. Select the scenario to import.
4. Choose one of the three name conflict resolution methods:
   - Clear 'Generate New Unique Names on Import' for duplicate names.
   - Check 'Generate New Unique Names on Import', enter a prefix in 'Deconflicting Name' field, and leave it blank for only changing conflicting names.

5. Optionally, specify whether to import scenario events, create a selection group, or discard duplicate simulation objects.

**Object Names in Merged Scenarios:**

- Units (like platoons) and platforms (like vehicles) have their names prefixed with the specified deconflicting name, regardless of conflict status.

- **Deconflicting Names in VR-Forces:**
  - Applies user-defined prefix to all unit names, regardless of conflicts.
  - Renames conflicting platform names by:
    - Changing the trailing number (e.g., M1A2 1 to M1A2 4).
    - Providing a unique name if prefixing would exceed length limits.

- **Importing and Exporting MSDL (Military Scenario Definition Language):**
  - VR-Forces supports importing/exporting:
    - Simulation objects and their locations (in geocentric coordinates).
    - Force relationships and hostility relationships. Neutral forces are identified by the word "neutral" in their name.
    - Country codes, with neutral forces requiring a country code.
    - Unit formations.
    - Tactical graphics.
    - Area of Interest (bounding box).

  - To import/export MSDL:
    - **Import:**
      - Load scenario > File > Import Scenario Objects.
      - Select "MSDL Scenario File (*.xml)" and choose the file to import.

    - **Export:**
      - Load scenario > File > Export Scenario Laydown.
      - Set "Save As Type" to "MSDL Scenario File (*.xml)".
      - Choose directory, name the file, and click Save.
      - If necessary, select proper identification codes for each object type in the Export MSDL Scenario dialog box.

VR-Forces enables users to import specific types of objects into scenarios from external files:

1. **CSV Files:**
   - Supports points, lines, and areas.
   - Points can represent tactical graphics (like waypoints) or individual entities.
   - Import process:
     - Choose `File > Import Scenario Objects`.
     - Select CSV file with the filter set to 'CSV Scenario File (*.csv)'.
     - Configure object type, force, altitude (AGL/ASL), and name in the 'Import Object Options' dialog box.
     - For multiple points (waypoints), specify each point's type individually.

2. **Airspace Control Orders (ACO):**
   - Defines airspace for military operations.
   - Import process:
     - Choose `File > Import Scenario Objects`.
     - Select ACO file with the filter set to 'ACO Scenario File (*.aco)'.

3. **Two-Line Element Sets (TLE):**
   - Displays orbital objects like satellites.
   - Import process is similar to CSV and ACO files, using the appropriate filter ('Two Line Element Set (*.tle)').

**Key Points:**
- Different file formats for different object types: CSV, ACO, TLE.
- Import process involves selecting the file type, choosing the file, and configuring object properties in a dialog box.
- VR-Forces does not support exporting simulation objects to CSV or TLE files.

- **Importing Objects into Scenarios:**
  - Import TLE (Two-Line Elements) files to add objects:
    - Go to File > Import Scenario Objects.
    - Select TLE file, choose object type from the available space simulation objects.
    - Click OK to import.
  - Load object tags from a CSV file for temporary palette filtering:
    - Go to File > Load Object Tags.
    - Select CSV file and click Open.

- **Saving a Scenario:**
  - VR-Forces saves scenario data and simulation objects' state to individual files with extensions like .scn, .oob, .pln, etc., either compressed (.scnx) or separate.
  - Save scenarios before running to preserve initial state (simulation time = 0).
  - Each save is a checkpoint; objects resume saved states on scenario reload.
  - Alternate terrains loaded in front-ends aren't saved with the scenario.
  - Some scripted task information may not be saved.

1. **Scenario Path Planning:**
   - Entities generate paths when tasked to move in a scenario.
   - Saving scenarios with planned paths improves performance by avoiding path recalculation during playback.

2. **Saving Scenarios:**
   - Saving started (paused or running) previously saved scenarios creates checkpoints named `scenario_name_at_time.scn` to prevent overwriting the original.
   - Overwrite the original using "Save Scenario As".
   - New scenario names don't include simulation time.

3. **Windows Folder Naming:**
   - Avoid ending folder names with spaces to prevent issues and potential system crashes.

4. **Scenario File Formats:**
   - Scenarios are saved in compressed archives (*.scnx) by default.
   - Save as individual files using "MAK Scenario Format" (*.scn).

5. **Saving Previously Saved Scenarios:**
   - VR-Forces tracks simulation time and manages checkpoints to prevent accidental overwrites.

6. **Load Balanced Scenario Saving:**
   - If required back-ends aren't available, VR-Forces remaps objects for loading and saving scenarios.

- **Saving a Scenario:**
  - **Mappings:** When saving an originally load-balanced scenario:
    - Choose to save original mappings or current session's back-end mappings.
    - Original objects maintain previous mappings; new objects map to their creation back-ends.
  - **Format/Name:** Save to a different name or format (compressed archive to individual files, or vice versa) to avoid confusion between different versions.

- **Loading a Scenario:**
  - **Compatibility:** Loaded scenarios are forward-compatible and can run on supported platforms.
  - **Terrains:** If using multiple front-ends, open terrains are closed, and the new scenario's terrain is opened.
  - **Back-end Remapping:** If required back-ends aren't running:
    - Choose which back-ends to map objects to or map all to one back-end.
  - **Process:** Load a scenario by selecting it from the Load Scenario dialog box.
  - **Options:** Optionally, configure component management on remote entities and load balancing options.

- **Loading Scenarios:**
  - Quickly access previously opened scenarios using "File > Recent Scenarios".
  - Load scenarios from command line:
    - Back-end: `vrfSimDIS -L "../path/to/scenario.scnx"`
    - Front-end: `vrfGui --scenarioFile "../path/to/scenario.scnx"`
  - Loading progress is indicated near the bottom right of the main window.

- **Scenario Properties:**
  - Edit scenario properties via "File > Scenario Properties".
  - Immediate changes:
    - Description
    - Name
    - Time multiplier
    - Create global environment
    - End time
  - Changes requiring reload:
    - Simulation terrain
    - Use different display terrain
    - Simulation model sets
    - Component attachment table
    - Random number seed
    - Frame mode
    - Frame time
  - Format scenario description using HTML tags.

- **Scenario Information Dialog:**
  - Displays automatically when opening a scenario with a description (can be disabled).
  - Enable/disable display via "Application Settings > GUI Settings".

- **Additional Resources:** See page 253 for details on load balancing an existing scenario.

- **Editing Scenario Description:**
  - Access: `File > Scenario Properties`
  - Edit text in the opened "Scenario Properties" dialog box
  - Preview display with "View" button
  - Save changes with "OK"

- **Scenario Directories:**
  - Default directory: `./userData/scenarios`
  - Change default using `--userScenarioDirectory` command-line option
  - Opened scenario's directory becomes next session's default
  - Return to home directory with "Return to Default Scenario Directory" button

- **Sample Scenarios:**
  - VR-Forces includes sample scenarios and tutorials for creation in the First Experience Guide

- **Load Balancing Scenarios (for performance optimization):**
  - Preferred method: Manage multiprocessor usage
  - Alternative: Distribute simulation objects across multiple back-ends/machines
  - Methods:
    - Even distribution: VR-Forces automatically distributes objects
    - Unit-based distribution: Aggregates and subordinates kept together on the same back-end
    - Rule-based distribution: Use existing rule set or create a new one
  - Incompatible with interest management

- **Load Balancing a New Scenario:**
  - Start multiple back-ends on separate machines
  - Create scenario, select object back-end before creation

- **Load Balancing an Existing Scenario:**
  - Start required back-ends
  - Load scenario with "Show Load Balancing Dialog Before Scenario Load" checked
  - Choose load balance method in the opened "Backend Load Distribution" dialog box (even, unit-based, rule-based)
  - Apply changes to see object-backend mappings and loads
  - Click "OK" to load the scenario

1. **Information Dialog Box:**
   - The State Data page displays the current Simulating Backend.
   - Save the scenario to retain new object mappings; decline saving original mappings when prompted.

2. **Rule-Based Load Balancing:**
   - Create rule sets for load balancing, specifying where simulation objects should load based on type or name.
   - To create a rule set:
     - Enter a title.
     - Choose 'Entity Type' or 'Object Name'.
       - For Entity Type: Specify particular simulation objects using the Edit Entity Type dialog box.
       - For Object Name: Enter a specific object's name or use a regular expression.
     - Add any additional rules desired.
     - Click OK to finalize.

3. **Loading a Load-Balanced Scenario:**
   - The scenario saves its object-to-engine mapping in its file upon load balancing.
   - If required simulation engines are missing, VR-Forces prompts for action:
     - Start the missing engine(s).
     - Remap objects to available simulation engines.
   - Options include starting individual/missing engines, starting all engines, or remapping objects to available engines.

4. **Loading Multi-Engine Scenarios:**
   - Optionally start required simulation engines and at least one front-end before loading the scenario.
   - If engines are missing, VR-Forces prompts for action (similar to single-engine scenarios):
     - Start individual/missing engines.
     - Remap objects to available engines.
     - Map all objects to a single available engine.
   - Options include starting individual/missing engines, starting all engines, remapping objects to available engines, or mapping all to a single engine.

- **Map All To**: Quickly assign all missing simulation engines to one available engine.
- **Remapping Objects**: Click 'OK' after remapping objects to an available simulation engine; VR-Forces will remap and load the scenario.
- **Running a Scenario**:
  - Start with `-L` and `-r` back-end options for immediate run.
  - Save new or edited scenarios before running, as VR-Forces doesn't save scenarios to disk. Remember to rewind if you want to save the starting point.
  - Run using `Simulation > Run Scenario` or the 'Run' button on the Simulation Control Toolbar (Figure 74).
- **Changing Simulation Speed**:
  - Use the Simulation Time Scale Toolbar for speed adjustment (1x to 15x by default).
  - Edit `./appData/settings/vrfGui/default_GuiSettings.grsx` to change range and buttons.
    - `<myTimescaleLow>` and `<myTimescaleHigh>` for range.
    - `<myTimescaleButtons>` for button options.
  - Set `myTimescaleButtonMode` to 0 for a slider instead of discrete buttons.
- **Simulation Quality with Increased Time Scale**:
  - VR-Forces automatically adjusts dead-reckoning algorithm, frame mode, and frame time in scenarios with many fast-moving entities to improve simulation quality.
  - Configure these settings in `./appData/settings/vrfSim/fastForwardSettings.mtl`.
    - Each `fast-forward-entry` specifies a time scale speed at which it takes effect.
- **Pausing a Scenario**: Pauses local simulation objects; remote entity activity continues as received over the network.

- **Pausing a Simulation:**
  - Choose `Simulation > Pause Scenario`
  - Click the 'Pause' button on the Simulation Control Toolbar

- **Rewinding a Scenario:**
  - Rewinds to initial state (captured as an initial snapshot)
  - All back-ends set to paused state
  - To rewind: Choose `Simulation > Rewind to Scenario Start` or click 'Rewind Scenario to the Beginning' button on toolbar
  - Scenario starts playing immediately if not paused before rewinding

- **Rolling Back to a Snapshot or Checkpoint:**
  - Access snapshots/checkpoints via:
    - `File > Scenario Snapshots`
    - Checkpoint Settings page (click 'Show Snapshots')
  - Select desired snapshot/checkpoint and click 'Roll Back'
  - Use 'Snapshots' button on toolbar for list of snapshots/checkpoints

- **Closing a Scenario:**
  - Terrain stays loaded, checkpoints/snapshots remain in memory until new scenario is loaded
  - To close: Choose `File > Close Scenario` or click 'Close Scenario' button on File Toolbar

- **Reinitializing a Scenario:**
  - Fixes issues with entities not behaving as expected due to version changes
  - Maintains unique ID of recreated objects, ensuring plans/tasks referencing deleted objects still work

- **Reinitializing a Scenario:**
  - Deletes all objects, recreates them with original IDs for task and plan preservation.
  - Does not fully restore entity states; plans restart, potentially clearing current tasks.
  - Use only at zero simulation time and as a last resort. Save backup before proceeding.

- **Checkpoints:**
  - Saved to disk, allowing scenario restart but briefly interrupting progress.
  - Can be returned to at any time, but older checkpoints are not automatically discarded.

- **Snapshots:**
  - Saved to memory for quick rollback, discarding later snapshots upon rollback.
  - Save frequency and number of snapshots in memory can be configured.
  - Can be saved as checkpoints.

- **Saving Checkpoints:**
  - Automatically created on scenario save or manually via File > Save Scenario.
  - Scripted tasks may have limited information saved. Detonations and missiles resume their former state upon checkpoint run.

- **Saving Snapshots as Checkpoints:**
  - Enable periodic snapshots, then use File > Scenario Snapshots to select and save snapshots as checkpoints.

- **Saving Checkpoints Manually:**
  - Select desired snapshots.
  - Click 'Save Checkpoint'.

- **Scheduling Periodic Checkpoints:**
  - Enable periodic snapshots and specify snapshot period (frequency).
  - Enable periodic checkpointing and set checkpoint frequency (e.g., save every fourth snapshot).
  - Optionally, specify a directory for saving checkpoints.

- **Disabling Periodic Checkpointing:**
  - Clear 'Enable Periodic Checkpointing' checkbox.

- **Deleting Checkpoints:**
  - Choose 'File > Delete Scenario Checkpoints'.
  - Select and delete desired checkpoints.

- **Creating Snapshots Manually:**
  - Choose 'File > Scenario Snapshots' or use the 'Snapshot' button on the toolbar.
  - Click 'Snapshot'.

- **Enabling Periodic Snapshots:**
  - Specify snapshot period (frequency) and maximum number to store in memory.

- **Clearing Snapshot List:**
  - Automatically cleared when loading, rewinding, or rolling back a scenario.
  - Manually clear by choosing an option from the Scenario Snapshots dialog box.

- **Scenario Snapshots:**
  - Access: `File > Scenario Snapshots` or 'Show Snapshots' on Checkpoint Settings page.
  - Clear all snapshots: Click 'Clear All'.

- **Automatic Scenario Pause:**
  - Set scenario end time (in simulation time) to pause automatically.
  - Remaining time displayed in 'Simulation Time Remaining Toolbar'.
  - Resume paused scenario with 'Play' button.

- **Setting Scenario End Time:**
  - New scenarios: Create > Advanced tab > Scenario End Time.
  - Open scenarios: `File > Scenario Properties` > Advanced tab > Scenario End Time.
  - Changing end time while running may pause immediately if new time is sooner than current elapsed time.

- **Batch Mode:**
  - Run one or more scenarios multiple times without direct user interaction.
  - Read-only; can't save, create objects, or change scenarios during batch run.
  - View Objects List Panel, plan windows, and informational dialog boxes.
  - Close and resume control of VR-Forces while in batch mode.

- **Batch File Options:**
  - Run scenario multiple times.
  - Run series of different scenarios, each run multiple times.
  - Run from command line or VR-Forces front-end using one or more back-ends.
  - Generate Logger Control messages for MAK Logger to record each simulation.
  - Specify real-time/simulation time and object parameter database for each batch.

- **Random Number Seed:**
  - Can be specified in the scenario file, batch file (.bsn), or computer-generated (-1).
  - If provided in a batch, it overrides the seed in the scenario file.

- **Batch File Creation and Editing:**
  - Create scenarios first.
  - Use the supplied sample batch file as a template.
  - Edit the batch file (in MAK Technologies Lisp format) to include your scenario details.

- **Batch File Structure:**
  - Starts with parameters affecting the entire batch, followed by a batch list containing one or more batches.
  - Each batch specifies:
    - Number of runs
    - Random number seed (optional)
    - Scenario filename
    - SMS filename (optional)
    - Run duration (simulation time or real time)

- **Batch File Parameters:**
  - `use-logger-control`: Specifies whether to generate Logger Control messages. If true, provide `logger-files-path`.
  - `number-of-runs`: Specifies how many times to run the scenario in this batch entry.
  - `random-number-seed`:
    - Optional; overrides the seed in the scenario file.
    - Use -1 for computer-generated seeds.
  - `scenario-filename`: Specifies the scenario to run, with an absolute or relative path.
  - `sms-filename`: Optional; overrides the SMS specified by the scenario.
  - `simulation-run-duration` & `run-duration`:
    - Specify the simulation's duration in either simulation time or real time.
    - They are mutually exclusive.

- **Example Batch File:**
  ```lisp
  (scenario-batch
    (use-logger-control True)
    (logger-files-path "..\logger_tapes")
    (batch-list
      (batch ... )
      (batch ... )
    )
  )
  ```

**Batch Mode in VR-Forces:**
- **Time Format:** Hours, minutes, days as integers; seconds as real numbers.
- **GUI Batch Mode:**
  - Start VR-Forces and required back-ends.
  - Start MAK Data Logger (matching protocol).
  - Load batch file via File > Load Batch File.
  - Runs scenarios sequentially, skipping unloadable ones.
  - Automatic remapping is always enabled.
- **Command Line Batch Mode:**
  - Use `-B` parameter with back-end in separate mode, e.g., `vrfSimDIS -s 1 -a 3001 -B "../userData/scenarios/sampleScenarioBatch.bsn"`
- **Recording Batch Scenarios:**
  - Generate Logger Control messages and save output to a Logger file.
  - Specify directory for Logger file.
  - Edit `lgrConfig.xml` to permit overwriting existing files for batch runs.

**Sending Run/Pause Messages to Simulation Participants:**
- By default, VR-Forces sends scenario control messages only to its own applications.
- To inform all participants (including non-VR-Forces apps), send standard Start/Resume and Stop/Freeze messages instead.

- **Start/Freeze Messages in Multiple VR-Forces Sessions:**
  - Using Start/Freeze messages in multiple sessions sends them to all sessions.
  - To enable use of these messages:
    - Go to Settings > Application.
    - Select the GUI Settings page.
    - Check 'Send Standard Start/Resume and Stop/Freeze PDUs'.

- **Recording VR-Forces Simulations with MAK Data Logger:**
  - When viewing Logger files in VR-Forces:
    - Load only the required terrain database, not the original scenario.
    - If using HLA 1516, avoid recording and immediately playing back a simulation to prevent conflicts and crashes. Exit applications and start a new federation.
    - View control messages are recorded and can change views when played back, useful for creating demonstrations.

- **Scenario Events in VR-Forces:**
  - Scenario events represent incidents or conditions that participants can respond to, enhancing training experiences without complex simulations.
  - Events can include rich text, audio (WAV), video (AVI), and raster files (JPG, PNG, SVG, BMP). MP4 videos require an appropriate driver.
  - To create a scenario event:
    - Choose 'Add Scenario Event' from the menu.
    - Enter event details.
    - Add content such as text, audio, video, or images.

To create a new scenario event in VR-Forces:

1. **Access the Scenario Event Manager:**
   - Go to Simulation > Scenario Events, or click the Scenario Events button ().
   - The Scenario Event Manager opens.

2. **Create a New Scenario Event:**
   - Click 'New Scenario Event'.
   - Fill out the Create Scenario Event dialog box with relevant parameters:
     - **Event Title:** A short descriptive name for the event.
     - **Label:** Additional information about the event, used as tooltip on Quick Launch Panel.
     - **Extended Labels (optional):** More detailed information about the event.
     - **Overlay:** Assign the event to an overlay. Default is 'Events'.
     - **Location (optional):** Specify where the event icon appears on the map.
     - **Ordinal:** Change the event's number in the sequence.
     - **Event Icon (optional):** Select an appropriate icon for the event.

3. **Configure Event Availability and Trigger:**
   - **Forces:** Make the event available to all or specific forces.
   - **Show on Quick Launch Panel:** Add the event to the panel for easy activation.
   - **Enabled State:** Specify if the event is enabled, disabled, or linked to another event's state.
   - **Start Trigger:** Choose how the event starts (Manual, Date/Time, Linked, Simulation Time, Immediate).
   - **End Trigger:** Define when the event ends (Manual, Date/Time, Duration, Permanent).

4. **Add Event Content:**
   - Include text, audio, video, or graphics (BMP, JPG, SVG, PNG) as content for the event.

5. **Create the Event:**
   - Click 'Create' to add your new event to the list. You can sort events by column headings.

To manage scenario events in VR-Forces:

1. **Adding Content to an Event:**
   - Create a new event.
   - Access the 'Event Contents' dialog box.
   - Select content type: video, picture, audio, or text.
     - For media files: Click 'Choose', select file, then click 'Open'.
     - For text: Type directly or load from a file, format as needed.
   - Optionally, test video/audio using the 'Play' button.
   - Click 'Close'.

2. **Linking Events:**
   - Create an event with a 'Linked' start trigger.
   - Open the 'Edit Links' dialog box.
   - Add links: Choose relationship ('When Activated' or 'When Concluded'), select the event to link, then click 'OK'.
   - Specify time delay for linked events.
   - Click 'OK'.

3. **Adding Intelligence Objects:**
   - Access the Scenario Event Manager.
   - Click 'New Intelligence Object', specify location and basic information.
   - Set trigger settings similar to scenario events.

**Key Points Retained:**
- Methods to add various content types (media, text) to an event.
- Process for linking events with specified relationships and time delays.
- Steps to create intelligence objects that trigger scenario events upon detection.

- **Creating a Scenario Event with Intelligence Object:**
  - Configure detectability instead of a start event.
    - Visual sensor: Select distance in Detectability list.
    - Other sensors:
      - Choose 'User Defined' in Detectability list.
      - Click 'Edit Detectability', select sensors, set unit-less sensor signatures (representing distance in km), click OK, then Create.

- **Starting a Scenario Event:**
  - Manually: Open Scenario Event Manager, click Play button for desired event.
  - From a plan: Choose Commands > Scenario Event, select event, choose operation, click OK.

- **Controlling Scenario Events from a Plan:**
  - Start, stop, enable, or disable events using plans with conditions and triggers.

- **Ending a Scenario Event:**
  - Manually: Open Scenario Event Manager, click Stop button for desired event.
  - Permanent events require editing the event to change End mode to Manual before stopping.

- **Scenario Events:**
  - Control status via Scenario Event Manager, Edit Scenario Event dialog box, or plans.
  - Enable/disable in manager: Click Status column's Enable/Disable button.
  - In edit dialog box: Change Enabled State list option and click Update.
  - Access manager via Scenario Components Toolbar's Scenario Events button.

- **Event List Sorting:**
  - ID numbers are for convenience, not functionality.
  - Sort by clicking desired column heading.

- **Deleting a Scenario Event:**
  - Select event and click Delete in Scenario Event Manager.

- **Show/Hide Scenario Events:**
  - Control visibility via Display Settings > Scenario Event Settings page.
  - Options: Always visible, Visible to force, Never visible.

**Chapter 9: Target Detection & Acquisition**

- **Spot Reports:**
  - Enable/disable, configure viewpoint and certainty level.
  - Apply to tactical graphics, display labels, use in tasks, show track histories.

- **Tactical Data Link (TDL) Messages:**
  - Configure display, show track histories.

- **Force Hostility Relationships:**
  - Change force hostility in a plan.

- **Target Detection:**
  - Spot reports and lasing targets.

- **Engagement Zones.**

- **Electronic Warfare.**

- **Radar Coverage:**
  - Enable/display/configure radar coverage displays.

- **Sonar Usage:**
  - Propulsion noise and sonar features.

- **Launching Countermeasures (Chaff and Flare):** Not detailed in provided text.
- **Modeling Artillery Munitions:** Not detailed in provided text.

**Target Detection and Combat Features:**

1. **Displaying Spot-Reported Simulation Objects:**
   - VR-Forces simulates 'fog of war' by displaying objects based on spot reports (detections) instead of their actual locations.
   - Spot-report icons are static, lose certainty over time (becoming transparent), and don't show dead entities.
   - Enabling spot reports reduces simulation performance but improves realism.
   - In Stealth observer mode, identified entities use 2D icons.

2. **Enabling or Disabling Spot Reports:**
   - Can be enabled/disabled globally or per object using 'Spot Reports' set data request.
   - Global setting applies to objects without explicit spot report settings and persists across scenario rewinds.
   - By default, spot reports are only sent to the front-end for display; enabling back-end reception requires additional setup.

- **Spot Report Settings (Viewpoint tab):**
  - Toggle 'Send Spot Reports' to enable/disable sending spot reports.
  - **Preconfigured Viewpoints:**
    - Friendly, Opposing, Neutral forces available.
    - Selecting a viewpoint shows:
      - Ground truth for the selected force.
      - Spot-report icons for other forces (based on detection by the selected force's simulation objects).
    - Automatically sets Map View group box check boxes to match the selected viewpoint.
  - **Custom Viewpoint:**
    - Allows mixing ground truth and spot-report icons from different forces.
    - Be cautious when configuring, as it's possible to create a scenario where no objects are displayed.
  - **Same-Side Fog of War:**
    - Simulates members of a force being unaware of other members' locations unless detected by a simulation object and reported using a spot report.

To simulate same-side fog of war and configure spot-reporting in VR Force:

1. **Edit `spot-report-generator.sysdef` file:**
   - Create a custom file for specific simulation objects.
   - Enable same-side fog of war by setting `send-spot-reports-on-own-force` to `True`.

2. **Configure other spot report options:**
   - Limit object types to reduce computational expense.
   - Exclude neutral forces from spot reporting by setting `send-spot-reports-on-neutral-forces` to `False`.
   - Modify spot report behavior using `send-only-to-front-end` and `broadcast` parameters.
   - Control stop spotting reports with the `send-stop-spotting-reports` parameter.

3. **Configure Spot Reports Certainty Level:**
   - Icons representing spot-reported entities become more transparent over time, simulating decreasing validity.
   - Set degradation period using the `report-resend-period` parameter in the sysdef file (default: 60 seconds).
   - Configure degradation time in Application Settings > Spot Report Settings > Display tab.

4. **Apply Spot Reports to Tactical Graphics:**
   - Assign a tactical graphic to a force and display it based on spot reports instead of ground truth.

- **Spot Report Display:**
  - Uses same display criteria as simulation objects.
  - Apply to control and tactical graphics via Application Settings:
    - Select 'Spot Report Settings' page.
    - Choose the 'Viewpoint' tab.
    - Check 'Apply to Control and Tactical Graphics'.

- **Labeling Spot Reports:**
  - Displays labels (symbol decorations) for spot-reported entities like regular simulation objects.
  - Enable in Application Settings:
    - Select 'Spot Report Settings' page.
    - Choose the 'Display' tab or use Symbol Decoration Settings page.

- **Using Spot Reports in Tasks:**
  - Listed in Objects List Panel and other object lists, with filter option for spot-report icons.
  - Selectable as parameters in tasks using actual reported object's ground truth location, not spot-report icon location. For example:
    - In the 'Follow Entity' task, VR-Forces follows the actual location of the spot-reported simulation object.

- **Displaying Track Histories for Spot-Reported Objects:**
  - Enable via Application Settings:
    - Select 'Spot Report Settings' page.
    - Choose the 'Display' tab.
    - Check 'Show Track Histories' and 'Show Track History for Selected'.

- **Pinning a Spot Report Track History:**
  - Select the spot-reported object.
  - Choose "Objects" > "Decorations" > "Pin Track History".

- **Spot Report Track History Pins:**
  - Remove pin: Select object > Decorations > Pin Track History.
  - Remove all pins: Decorations > Remove All Pin Track History.

- **Tactical Data Link (TDL) Messages:**
  - Displayed as icons, optionally with:
    - Time since last report
    - Accompanying data (up to 9 lines)
    - Track histories

- **Configuring TDL Message Display:**
  - Settings > Application > Tactical Data Link Settings page.
  - Select protocols, platforms, and forces for message display.
  - Choose data to show next to TDL message icon.

- **Enabling & Configuring TDL Messages:**
  - Globally:
    - Send messages: Check 'Send Tactical Data Link Messages'
    - Display messages: Check 'Process Tactical Data Link Messages'

- **Displaying Track Histories for TDL Messages:**
  - Enable in configuration, but displaying them requires additional setup.

- **Displaying Tactical Data Link (TDL) Message Track Histories:**
  - Enable 'Show Track Histories' and 'Show Track History for Selected' in Application Settings > Tactical Data Link Settings page.
  - Select the desired TDL message to view its track history.

- **Pinning/Unpinning TDL Message Track History:**
  - Pin: Select a TDL message, then choose Objects > Decorations > Pin Track History.
  - Unpin (single): Select the pinned object, then repeat the pin action.
  - Unpin (all): Choose Objects > Decorations > Remove All Pin Track History.

- **Managing Force Hostility Relationships:**
  - VR-Forces categorizes simulation objects into forces (friendly, opposing, neutral) with default hostility settings.
  - Change force hostility dynamically in plans or globally; changes are saved as part of the scenario.
  - Edit the `forceHostilty.mtl` file to modify default relationships.
  - Use the Hostility Matrix dialog box to manually adjust relationships between forces:
    - Select Simulation > Hostility Matrix to open the dialog box.
    - For each force (row), select/deselect columns for desired hostility relationships.

- **Entity Markings:**
  - Automatically display country-specific markings when creating an entity for a force.

- **Changing Force Hostility in a Plan:**
  - Open plan > Choose Commands > Change Hostility.
  - Select force, new relationship (Friendly/Hostile), and target force > Click OK to apply change.

- **Target Detection & Combat Features:**
  - Simulation objects detect others using sensors and assign CID levels based on distance and contact time.
  - CID Levels: Not Detected (0) to Full Knowledge (4).
  - Default behavior: Do not fire at hostile simulation objects until Identified (Level 3). Configurable.

- **Spot Reports Enhancement:**
  - Improves detection and classification of simulation objects.
  - Firing may not occur if CID level is not high enough due to insufficient contact or distance.

- **Spot Reports:**
  - Combine object classification with directly sensed information.
  - Allow objects to engage targets based on higher Classification ID (CID) levels from spot reports:
    - A fixed-wing aircraft can target a ground object after receiving a high CID level spot report, even if it hasn't identified the target itself.

- **Laser Targeting:**
  - Entities with laser-targeting capabilities use standard VR-Forces targeting mechanisms.
  - Laser-guided missiles fire on targets identified by laser beams matching their launcher's code:
    - Codes range from 1111 to 1788 or 111 to 788 (with an implied initial 1).
    - Entities use assigned laser codes for both lasing and missile targeting.

- **Autonomous Lasing:**
  - By default, entities with laser-guided missiles can autonomously lase and engage targets without external intervention:
    - They identify and fire at targets independently, similar to entities using conventional munitions.

- **Synchronizing Laser Codes:**
  - To enable multiple entities to use the same laser code (e.g., one entity to lase targets and another to fire):
    - Assign them the same code using 'Laser Code' or 'Synchronize Laser Code' set data requests.
    - The designator entity should have a hold-fire rule of engagement or no missile resources, while the shooter entity should not be configured to lase targets.

1. **Engagement Zones:**
   - Types:
     - Missile Engagement Zone (MEZ): Associated with ground-based air defense systems, allowing them to engage targets within the defined area.
     - Joint Engagement Zone (JEZ): Allows multiple systems to engage targets, usually both air and ground units.
   - Rules of Engagement (ROE):
     - If ROE is set to 'Fire When in Engagement Zone', a simulation object can fire on a target if it's within the engagement zone.
   - Unknown Objects:
     - By default, unknown objects cannot be fired upon. However, an engagement zone can assume unknown objects are hostile, allowing fire on them.
   - Force Identification:
     - Radars detect position and type but not force. Firing on own-force objects requires identification or active transponder (IFF).
   - Activation:
     - Engagement zones can be activated/deactivated; inactive zones prevent firing even with 'Fire When in Engagement Zone' ROE.

2. **Electronic Warfare:**
   - VR-Forces supports radar jamming by entities with a tactical radar jammer system.
   - Requirements for jamming:
     - Line-of-sight between the jamming and jammed entity.
     - Target must be within the cone of electromagnetic emissions from the jamming entity.
   - Set data requests to enable and set up jamming:
     - "36.2. Add Jamming Target"
     - "36.41. Jammer State"
     - "36.42. Jamming Mode"
     - "36.63. Remove Jamming Target"

3. **Radar Coverage:**
   - VR-Forces can display the area where a simulation object's radar can detect objects.

- **Radar Coverage Visualization:**
  - Color-coded based on testing altitudes.
  - 2D: Bands of color indicating minimum detectable altitude (Figure 104).
  - 3D: Shaded sphere around radar; shaded areas are covered, unshaded are obscured.

- **Detection Uncertainty:** Radar might detect objects at lower altitudes than indicated by colors.

- **Configuration:**
  - Altitudes and colors for display can be specified.
  - Configured on 'Display Settings' dialog box under 'Radar Coverage Settings'.

- **Limitations:**
  - Computationally expensive; usable only on stationary units/entities.
  - Display calculation may take time, filling in gradually.

- **Enabling/Displaying Radar Coverage:**
  - Enabled/disabled globally per observer.
  - Methods: Observer menu (Radar Coverage), toolbar button (Radar Coverage icon), or display settings checkbox (Observer Settings page).
  - Displayed per simulation object with a ground-based radar, such as Patriot Radar AN/MPQ-65.

- **Pinning/Removing Radar Coverage:**
  - Pin: Select object > Decorations > Pin Radar Coverage.
  - Remove:
    - Single object: Select object > Decorations > Pin Radar Coverage.
    - All objects: Objects > Decorations > Remove All Pin Radar Coverage.

1. **Radar Coverage Settings:**
   - Access via: Settings > Display > Radar Coverage Settings page.
   - Customizable settings:
     - Show Label: Display radar coverage area name.
     - Altitude: Calculate altitude above sea level or ground level.
     - Wait Color, Alpha, Key Background Color, Key Font Color: Aesthetic customizations for radar display.
     - Altitudes: Define altitudes to test for intersections and their associated colors.

2. **Sonar Simulation in VR-Forces:**
   - Supports active and passive sonar with three sensor systems: Active Sonar, Passive Sonar, and combined Sonar.
   - **Passive Sonar** characteristics:
     - Can be dipped at different depths from the entity's depth.
     - Inactive above a specified speed.
     - Affected by thermoclines (layers of water with varying temperatures and densities).
     - Ignores line-of-sight, underwater terrain, and islands.
     - Detectability influenced by propulsion noise.

   - **Active Sonar** characteristics:
     - Acquires targets faster than passive sonar.
     - More easily detected by passive sonar systems when enabled.
     - Publishes Underwater Acoustics PDUs and can have multiple modes using emitter beams.
     - Detects targets within range, regardless of beam direction.
     - Ignores propulsion noise and active sonar presence on the target.

3. **Propulsion Noise and Sonar:**
   - Entities generating propulsion noise are easier to detect using passive sonar.
   - Propulsion noise publication depends on power plant status (on/off).
   - Published propulsion noise values: Current Shaft RPM, Ordered Shaft RPM, calculated based on speed and a factor.

**Merged Changes:**
- Removed unnecessary headers and text from the original chunk.
- Separated long sentences into bullet points with additional descriptions for clarity.
- No key points or descriptions were missing in the original summary.

VR-Forces calculates and publishes three propulsion noise values for entities:
1. **Current Shaft RPM**: Current speed multiplied by the speed-to-rpm-factor.
2. **Ordered Shaft RPM**: Ordered speed multiplied by the speed-to-rpm-factor.
3. **Shaft RPM Rate of Change**: Current acceleration multiplied by the acceleration-to-rpm-factor.

These factors are sourced from the entity's movement system parameters. When targeted by passive sonar, entities' calculated RPMs are compared to a nominal RPM (default 100) to generate a sensor signature modifier:
- If an entity publishes an RPM of 80, its signature is scaled by 0.8.
- If its RPM is 150, the signature is scaled by 1.5.

**Countermeasures (Chaff and Flare):**
- Fixed-wing and rotary-wing entities can launch countermeasures against air-to-air and ground-to-air missiles.
- **Automatic Countermeasure Launching**:
  - Based on settings in the `countermeasures.sysdef` file.
  - Can be disabled using the 'Countermeasures Auto Launch' set data request.
- **Manual Countermeasure Launching**: Possible via the 'Launch Countermeasures' task, which does not interfere with the entity's current task.
- **Countermeasure Behavior Configuration**: Parameters in `counter-measures-launcher.sysdef` files can be adjusted for custom behavior.

**Artillery Munitions Modeling**:
- VR-Forces models artillery through tasked entities or indirect fire events in specified areas.
- By default, VR-Forces models the munition when an artillery entity fires. Munitions are unaffected by wind speed or friction but modeling them requires more computational resources.
- In large simulations, consider disablingmunition modeling to conserve resources:
  - Modeling munitions: More resource-intensive.
  - Not modeling munitions: Publishes fire and detonation events only.

- **Disabling Modeling Munitions:**
  - Set `simulate-munition` parameter to `false` in sysdef file for each weapon system.

- **Indirect Fire & Ballistic Missiles (Entity-level scenarios):**
  - **Indirect Fire Events:**
    - Create, configure, and schedule indirect fire; not associated with a specific launcher.
    - Results in one or more salvos in/near a designated area.
    - *Creation:* Draw an ellipse on the map to specify the event area using Munition Target Settings dialog box.
    - *Editing & Deleting:* Supported for entity-level scenarios.
    - *Default Values:* Configurable.

  - **Ballistic Missiles:**
    - Fire, edit target events, and delete missile target events.

1. **Creating an Indirect Fire Event:**
   - Enter a name (default: "Indirect Fire n").
   - Optionally, specify an overlay layer.
   - Configure parameters:
     - Start time: Immediate, Wait for Activation, or At Simulation Time.
     - Number of salvos and rounds per salvo.
     - Scatter time within each salvo.
     - Time between salvos (if more than one).
     - Altitude above terrain for detonation.
     - Munition type.
   - Click 'Create' to add the event to the list.

2. **Editing Indirect Fire Events:**
   - Go to Simulation > Munition Targets.
   - Select the Indirect Fire page, then the desired event.
   - Click 'Edit', change properties, and click 'OK'.

3. **Deleting Indirect Fire Events:**
   - Follow similar steps as editing, but click 'Delete' instead.

4. **Configuring Default Values for Indirect Fire Events:**
   - Go to Settings > Display, then select the Indirect Fire Settings page.
   - Set desired default values for parameters and check 'Add Detonations if Missing'.

- **Detonation Display Control:** Hide unmapped detonation events by clearing a checkbox.

- **Ballistic Missiles in VR-Forces:**
  - Types: Strategic (calculates trajectory based on max altitude and target distance) and Fixed Trajectory (uses CSV files for path).
  - Strategic missiles consider missile speed, earth curvature but not physics-based modeling.
  - Fixed trajectory missiles launch from target's altitude, follow CSV-defined path, detonate at target point.

- **Firing Ballistic Missiles:**
  - Open Munition Target Settings > Missile Target page.
  - Click 'New', then click target location to open Create Missile Target dialog.
  - Set parameters: Name, Launch Time, Incoming Heading, and choose Missile Type.
  - Click 'Create' to list missile event.

- **Editing Missile Target Events:**
  - Open Munition Target Settings > Missile Target page.
  - Select event, click 'Edit', change properties in Edit Missile Target dialog, then click 'Update'.

- **Ballistic Missiles:**
  - Delete missile target events:
    - Via 'Simulation > Munition Targets' dialog box, select the event and click 'Delete'.
    - By deleting the target point from the terrain.
  - Munition detonations:
    - Cause damage to simulation objects and/or terrain.
    - Not supported in aggregate-level scenarios.
    - Create using 'Create > Munition Detonation':
      - Change munition type, result, and location as needed.
      - Click on the terrain for each detonation.

- **Environment Conditions:**
  - Synchronize time-based features between applications:
    - Use `-O | --hasNTPSync` command-line option (requires synchronized system clocks).
  - Set weather conditions:
    - Visibility, wind direction/speed, air pressure/temperature.
    - Precipitation type and intensity, rain accumulation, snow depth/elevation.
  - Set date and time of day:
    - Choose illumination model for lighting effects.
  - Manage environment conditions:
    - Add, edit, or delete conditions as needed.
  - Create local weather zones:
    - Use simulation graphics to define zones with specific environments.
  - Display weather conditions at a location.
  - Configure marine conditions:
    - Enable marine effects and tidal stream wakes.
    - Set ocean quality, wave spectrum, and breaking waves.
  - Set thermocline for underwater temperature gradient.

- **METOC Object Classes:** Certain object classes can be published to represent environment conditions.

- **Back-end Settings:** Date, time of day, and weather conditions impact simulation object sensors and line-of-sight.
  - *Visibility:* Objects beyond the set distance won't be seen. E.g., 4 km visibility means objects at 5 km are invisible.
  - *Time of Day:* Changes lighting conditions in the 3D view.

- **Weather Conditions (Commands menu):** Settable options include cloud cover, visibility, precipitation, wind speed/direction, and ambient air temperature. Simulation objects respond if their model allows it.

- **Wind Speed & Direction:** Affects precipitation fall angle, SpeedTrees, grass, particle systems, but not local weather zones which use area-specific settings.
  - *Direction:* Indicated by an arrow on the dial (e.g., 180� points up for south to north).

- **Atmospheric Conditions:** Up to ten elevation levels can be created with varying wind speeds/directions, visibility, obscurants, and cloud characteristics.

- **Visibility & Z far Attribute:** If visibility is large, ensure the channel's Z far attribute matches or objects beyond won't be visible.

- **Setting Environment Conditions:**
  - Open 'Environment Conditions' dialog.
  - Select the 'Weather' page.
  - Click 'Advanced Weather'.
  - Set atmospheric conditions for one or more elevation levels:
    - Choose an existing environment condition or create a new one.
    - Specify base altitude (starting at 0 feet MSL).

- **Wind Settings:**
  - Use Wind Direction dial (001 to 360 degrees).
  - Adjust Speed slider for wind speed.
  - Changes appear in Atmospheric Conditions table.

- **Atmospheric Conditions Table:**
  - Set visibility distance, primary obscurant, and sky cover per level.
  - Choose cloud type if sky cover is nonzero.
  - Ensure Z far attribute value is higher than visibility value to avoid clipping issues.

- **Air Pressure & Temperature:**
  - Access via Simulation > Environment Conditions > Weather page > Advanced Weather.
  - Set air pressure (millibars) and temperature (�C) at sea level or altitude.

- **Visibility Settings:**
  - Determine atmospheric obscurants' denseness and visibility distance.
  - Choose primary obscurant if visibility is limited.
  - Adjust Z far attribute to match visibility value, preventing clipping issues.
  - Set visibility for different elevations using the Add button in the table.

- **Ground Fog Configuration:**
  - Set height and color of ground-level fog to control sky visibility from ground level.

- **Fog Configuration:**
  - Fog height determines sky visibility: lower heights show more blue sky.
  - Choose fog color using a color picker.
  - Configure higher elevation fog or other obscurants (smoke/dust) in "11.2.3 Setting Visibility".
  - Use "Weather Simulation Objects" for area-confined fog (page 334).
  - Fog settings not available when setting weather conditions via plans.

- **Precipitation Configuration:**
  - Supports rain, snow, hail, sleet, and drizzle.
  - Adjust intensity (0-200 mm/hour) with preset options: Light (1.2 mm/h), Moderate (6.2 mm/h), Heavy (30 mm/h), Extreme (125 mm/h).
  - Precipitation has no simulation effect; snow doesn't accumulate.

- **Rain Accumulation:**
  - Rain accumulation makes terrain shinier and creates puddles with ripples.
  - Use a Rain Texture map to define puddle accumulation areas.
  - Adjust 'Rain Ground Depth' for specular reflection level and puddle appearance.

- **Snow Depth & Elevation:**
  - Specify snow depth on ground and roads, as well as the elevation of the snow line.

- **Snow Display & Control:**
  - Snow appears on building roofs and roads.
  - Control snow distribution using:
    - Snow Texture map: Prevent snow on certain terrain parts.
    - SNO effect texture/mask: Create drifting snow on roads.
  - See "Using Shader-based Effect Maps" in the MAK ONE Applications Reference Manual for more details.

- **Snow Depth & Elevation Settings:**
  - Set snow depth:
    - Ground: 0.000 to 10,000.000 mm.
    - Roads: 0.000 to 10,000.000 mm.
  - Define minimum elevation for snow cover appearance (in meters).
  - Adjust transition range from no snow to full snow coverage.
  - Enable blowing snow in wind by creating a Weather tactical graphic with 'Blowing Snow' condition.

- **Date & Time Settings:**
  - Change scenario date at any time; date advances through midnight, affecting locations based on their time zones (date line at longitude 12 hours from UTC).
  - Choose between standard or military time formats and select display options for date and time.
  - Modify displayed time zone in the Environmental Settings toolbar without changing actual location times or illumination.

  - Time of day progresses as simulation time advances.
  - They are independent; changes in time of day do not affect elapsed simulation time.
  - Initial or mid-simulation adjustments to time of day only alter its starting point, not simulation progress.
- **Illumination Calculation:** VR-Forces employs an ephemeris model to compute illumination based on the date and time of day, influencing visual sensors and scene lighting in Stealth view mode.

**Setting Date & Time:**
1. **Date Setting:**
  - Access Environment Conditions dialog box via menu or toolbar.
  - Select the Date and Time page.
  - Modify month/year using arrows, lists, or direct input.
  - Specify date by clicking on the calendar.
  - Choose date/time format options (Formats Set and Date/Time Display Formats).

2. **Time of Day Setting:**
  - Open Environment Conditions dialog box.
  - Select the Date and Time page.
  - Set time of day using Current Time box or Hour/Minute sliders.
  - Choose time zone from Fixed Time Zone list, Local Time, or computer's set time zone.
  - Specify time format (Military or Standard).
  - Optionally, select a date/time display format for toolbar.

**Choosing Illumination Model:** Illumination impacts visual sensors.

- **Illumination:**
  - Can be constant (Always Daylight) or cycle-based on day/night.
  - Affects back-end calculations but not front-end display.
  - Calculated based on object's location, current Greenwich Mean Time, and time zone offset (doesn't account for daylight saving or local variations).
  - Set via Simulation > Environment Conditions > Date and Time page.

- **Environment Conditions:**
  - Preconfigured settings cover weather (wind, precipitation, visibility, etc.) and marine conditions (sea state, underwater visibility, etc.).
  - Quickly set from clear to stormy conditions or adjust individual parameters.
  - Changes don't affect saved settings unless overwritten.
  - Manage environment conditions via Simulation > Environment Conditions dialog box:
    - View and select preconfigured conditions.
    - Change settings for the current condition.
    - Add new conditions with custom names and settings.
    - Edit existing conditions to overwrite them with current settings.

- **Environment Conditions:**
  - Edit:
    - Open 'Environment Conditions' dialog
    - Select 'Weather' page
    - Optionally, choose an existing condition as starting point
    - Make desired changes
    - Click 'Edit'
    - Select the name of the condition to overwrite in the 'Select an Environment Condition' dialog
    - Click OK
  - Delete:
    - Open 'Environment Conditions' dialog
    - Select 'Weather' page
    - Click 'Delete'
    - Select the name of the condition to delete in the 'Select an Environment Condition' dialog
    - Click OK

- **Local Weather Zones:**
  - Create:
    - Open 'Environment Conditions' dialog
    - Select 'Local Weather Zones' page
    - Click 'New'
    - Place lower left corner of the weather zone on the terrain
    - Edit parameters (size, environmental conditions) in the 'Create Weather' dialog
      - Default size is 100,000 meters per side; can be reduced if needed
    - Click 'Create'
  - Priority:
    - Overlapping zones use higher priority or first discovered zone's conditions
  - Effects:
    - Affect simulation objects within their area
    - Can be moved and resized like other tactical graphics

- **Weather Zone Management:**
  - Edit weather conditions using 'Edit Weather Conditions' or 'Edit Weather' button.
  - Manage overlapping zones with 'Increase Priority' and 'Decrease Priority' buttons.

- **Creating Weather Zones:**
  - Available shapes: Area (free-form), Box, Circle, Ellipse.
  - Effects include precipitation (reducing line of sight) and others (not affecting line of sight).
  - Editing involves specifying weather-specific parameters in the Edit dialog box.

- **Editing Weather Zone's Environment:**
  - Edit preconfigured or individual environmental settings.
  - Accessible via Create Weather dialog box or Local Weather Zones page.
  - Changes apply to all types of weather zones, regardless of creation method.

- **Using Weather Simulation Objects:**
  - Weather zones, wind corridors, and air turbulence affect simulation objects and can be used in plans.
  - VR-Forces publishes weather details for display by VR-Vantage applications.
  - Weather tactical graphics include: Weather Zones (Area, Box, Circle, Ellipse), Wind Corridor, Air Turbulence.

- **Wind Corridors:**
  - Impact aircraft true airspeed with tailwind or headwind.
  - Defined by:
    - Direction (from first to final vertex)
    - Width and height in X and Z planes
    - Altitude (vertical center above sea level or terrain)
    - Wind speed
    - Priority (order of precedence for overlapping corridors)
  - Created via:
    - Open Create Object Palette, optionally filter by Weather
    - Select 'Wind Corridor'
    - Place vertices, double-click final vertex to open dialog box
    - Set parameters in the Create Wind Corridor dialog box

- **Air Turbulence Areas:**
  - Designate areas for potential aircraft turbulence (not simulated).
  - Defined by:
    - Floor and ceiling altitudes
    - Turbulence level: Light, Moderate, Severe, or Extreme
  - Created similarly to wind corridors using Create Object Palette under Weather filter

- **Displaying Weather Conditions:**
  - Last Clicked Environment Panel shows weather at terrain location or entity's altitude.
  - Displays:
    - Cloud cover, precipitation, visibility
    - Wind speed and direction
    - Air temperature and pressure, humidity
    - Soil type
    - Coordinates and elevation
  - Updates every two seconds as entity moves

- **Marine Conditions:**
  - Supports dynamic ocean effects like Douglas Sea State:
    - Wind waves (wind sea)
    - Swell character
    - Directions of each

VR-Forces offers customizable marine effects, including:

1. **Wave Control:**
   - Wave chop: Turbulence on the water surface.
   - Surface transparency: Reduces Z-fighting along shorelines by applying transparency to the water surface based on depth.
   - Underwater visibility: Distance you can see underwater when the observer is submerged.

2. **Sea State & Swell:**
   - Sea state: Determined by wind direction and speed, or set manually using Douglas sea state scale. Compass direction of origin can also be set.
   - Sea swells: Amount of rise and fall of waves independent of wind. Compass direction of origin can also be set.

3. **Advanced Parameters:**
   - Depth offset: Adjusts the ocean depth.
   - Choppiness: Percentage of turbulence on the water surface.
   - Wave fetch: Wind-fetch distance, or the distance wind travels over water in a constant direction.

4. **Tidal Effects:**
   - Tidal current speed and direction: Affects display of tidal wakes on buoys and beacons.
   - Surge depth: Depth at which full storm effects occur; as water gets shallower, it becomes calmer.

5. **Tidal Stream Wakes:**
   - Creates wake effects around buoys and beacons based on tidal movement. Supported as standalone models and automatically attached to streamed buoys and beacons.

6. **Configuration:**
   - Enabling/disabling dynamic ocean effects: Can be done via Display Settings (Observer Settings page) or Environment Conditions dialog boxes.
   - Synchronizing ocean waves: Use `-O` or `--hasNTPSync` command-line option for matching waves between different products or instances.

- **Wake Types & Tidal Stream Wakes:**
  - Named after supported buoy/beacon types (e.g., BuoysPillarWake).
  - Adjust `wakeLength` for optimal visuals.
  - Tidal stream wakes are off by default; enable via Settings > Display > Ocean Settings.
  - Requires specified tidal current (default is 0).

- **Ocean Quality & Wave Spectrum:**
  - Adjust overall ocean visualization quality in Settings > Display > Ocean Settings.
  - Choose from JONSWAP, Pierson-Moskowitz, or Tessendorf wave spectrum models.

- **Breaking Waves:**
  - Simulated using shapefile data (included in MAK Earth terrain).
  - Configure amplitude in Experimental Features dialog box (max: 10.0).

- **Thermoclines:**
  - Layers of water with different temperatures and densities affecting sound transmission.
  - Specify up to five thermoclines' depth and permeability in Simulation > Environment Conditions > Thermoclines page.

**Key Points:**
- Adjust wake length for better visuals.
- Enable/disable tidal stream wakes and set tidal current.
- Choose ocean quality and wave spectrum models.
- Configure breaking waves amplitude (experimental feature).
- Set thermocline depths and permeabilities.

VR-Forces creates several files when a scenario is created and saved:

1. **Scenario File (scenario_name.scn)**:
   - Lists locations of other scenario files, terrain database, and simulation model set file.
   - Sets scenario parameters such as:
     - Terrain Database
     - Order-of-Battle
     - Scenario Scripts
     - Plans
     - Overlays
     - Selection Groups
     - Object Map
     - Scenario Extras
     - Time Multiplier
     - Auto-Reorganize
     - Random Number Seed

2. **Scenario Objects File (scenario_name.oob)**:
   - Stores identification and state information for simulation objects, control objects, and published tactical graphics.

3. **Object Map File (scenario_name.omp)**:
   - Maps objects to the back-ends on which they were created.

4. **Plan File (scenario_name.pln)**:
   - Stores individual plans and global plans.

5. **Scenario Extras File (scenario_name.xtr)**:
   - Lists forces that each force is hostile to and stores spawn pattern templates.

6. **Other files**:
   - Scripts file (.spt)
   - Overlay file (.ovl)
   - Selection groups file (.sgr)
   - Saved views file (.osrx)
   - Scenario-specific GUI settings file (.gui_settings)

By default, scenarios are saved as compressed zip archives with the .scnx extension. Manual editing of scenario files is generally not recommended but can be done if needed.

**Key Points**:
- Multiple files store different aspects of a scenario.
- The main scenario file (scn) sets parameters and lists other related files.
- Other files store specific data like object states, plans, graphics, and settings.
- Scenarios are typically saved as compressed zip archives.

The provided text describes the structure and key parameters of a scenario file in VR Force, focusing on 'myscenario'. Here's a concise summary:

- **Scenario File Format:**
  - Frame mode: "variable-frame" with frame time set to 0.1 seconds.
  - No specified run duration; simulation runs indefinitely.
  - GUI runtime scheme: DtRuntimeEvenDistributionLoadBalancer, remote attachment scheme: DtNoneBalancer.

- **Scenario Details:**
  - Name: "myscenario".
  - Creates global dynamic terrain and environment, sets scenario start time to 1692180000 seconds (unix timestamp), uses day-night model.
  - Default observer view settings with associated GUI settings, observer views, and scenario description in English.
  - Scenario extent: approximately [-2.8e+06, -4.3e+06, 3.7e+06, 938.957] meters.

- **Scenario File Parameters:**
  - Various parameters specify files for terrain databases, order-of-battle, scripts, and other scenario-related data.
  - Time multiplier controls real-time simulation speed (default: 1).
  - Auto-reorganize allows unit reorganization (True/False).
  - Random number seed sets the default random number seed for VR-Forces.

- **Pathing and Timestamps:**
  - Scenario file paths are relative to the application directory.
  - Starting Time of Day is stored in the scenario objects file, not the scenario file itself.

- **Scenario File Parameters:**
  - **Assignment Schemes:** `gui-runtime-scheme`, `remote-attachment-scheme`
    - Internal names for code-based assignment schemes.
    - Determine back-end object creation and remote entity hosting.

  - **Scenario Identification:** `scenario-name`
    - Optional parameter used in some message dialog boxes.

  - **Scenario Data Block (`scenario-data`):**
    - **Global Features:** `Create_Global_Dynamic_Terrain`, `Create_Global_Environment`
      - Enable/disable global dynamic terrain and environmental conditions.
    - **Observer Views & GUI Settings:**
      - `DefaultObserverView`: Initial observer view at startup.
      - `GuiObserverViews`: Saved views file for the scenario.
      - `GuiScenarioSettings`: Scenario-specific GUI settings file (.gui_settings).
      - `HiddenTerrainViews`: Views associated with scenario terrain not displayed in Observer Views Panel.
    - **Scenario Information:**
      - `ScenarioDescription`: Text of the scenario description.
      - `ScenarioExtentInformation`: Extents of the scenario for zoom to extents option.
    - **Timing & Illumination:** `Set_Scenario_Start_Time_At_Local_On_First_Object_Creation`, `UseDayNightModel`
      - Start time for the scenario, in seconds. Use day/night illumination model.

  - **Versioning:** `version`
    - Scenario file versioning information.

- **Pathnames:**
  - Absolute or relative pathnames allowed.
  - New scenarios saved with paths relative to application directory (./bin64).
  - For portability: use relative paths or simple pathnames for terrain and object parameter databases in multi-machine setups.

- **Search Order for Databases:**
  - **Absolute Paths:** Load file in the specified path.
  - **Relative Paths:** Try loading relative to application path (./bin64/vrfSimprotocol).
  - **Default Paths:** Search directories specified by `defaultParameterDatabasePath` or `defaultTerrainDatabasePath` in `vrfSim.mtl`.

1. **Terrain Database:**
   - Look for terrain databases in the directory specified by `defaultTerrainDatabasePath`.
   - If set, use the path from the user-defined environmental variable `VRF_TERRAIN_PATH`.
   - When creating a new scenario:
     - Choose front-end and back-end terrain databases.
     - Changing the terrain database may affect scenario objects and overlay information if the new database doesn't cover the same geographic area or is of a different type (e.g., UTM vs. geocentric).

2. **Plan File:**
   - VR-Forces saves individual and global plans to a `.pln` file, created interactively in the Plan window.
   - Avoid creating or editing plan files manually due to syntax requirements.

3. **Object Map File:**
   - When using multiple back-ends:
     - An object map file records which back-end simulates each object.
     - If a specified back-end is unavailable, VR-Forces asks if you want to remap objects to available back-ends.
   - Editing the object map file by hand can lead to errors; consider using load balancing instead.

4. **Scenario Objects File:**
   - When saving or checkpointing a scenario:
     - VR-Forces saves simulation objects and tactical graphics data, including state information and geographic location, to this file.
   - Changes made to the object parameter database may not affect existing scenarios due to overrides from the scenario objects file.

- **Scenario Files:**
  - **Object Map File:** Stores simulation object parameters unchanged from initial values as `(parameter-name USE-DEFAULT)`, allowing changes in the Object Parameter Database (OPD) to affect loaded scenarios.
  - **Scenario Extras File (.xtr):** Stores hostility relationships and spawn patterns for forces.

- **Temporary Scenario Directories:** VR-Forces creates unique temporary directories to store scenario-related files, using `TMP` environment variable location with prefixes `vrffe` (frontend) or `vrfbe` (backend).

- **Simulation Objects:**
  - **Identification:** Use UUIDs, names, echelon IDs, object IDs, and labels for identification.
  - **Organization:** Echelon IDs organize objects hierarchically.
  - **Communication:** Utilize custom communication models.
  - **Architecture:** Employ a component architecture with sensors, controllers, and actuators.
  - **Behavior & Tasks:** Have defined behaviors and tasks.
  - **Modeling:** Support entity-level and aggregate-level modeling.
  - **Avoidance:** Capable of collision, obstacle, and feature avoidance.
  - **Movement:** Entities move based on their type (e.g., ground vehicles consider slopes).

- **Applicability:**
  - Concepts apply to both entity-level and aggregate-level modeling.

- **Simulation Object Characteristics:**
  - Act independently and respond to their environment.
  - Execute tasks and have defined behaviors.
  - Belong to a force structure and may be part of an organizational unit.
  - Predefined models available for use in simulations.
  - Developers can create additional simulation objects using the VR-Forces toolkit.
  - New simulation object types can be created using the Simulation Object Editor.

- **Identification Methods:**
  - **UUID (Universal Unique ID):** Unique, persistent across exercises, assigned by VR-Forces. Supports scenario importation without name conflicts.
  - **Name:** Persistent, user-set, limited length (11 characters for entities, 31 for units). Not necessarily unique.
  - **Echelon ID:** Unique, persistent, assigned by VR-Forces. Changes if an entity is organized into a unit.
  - **Object ID:** Unique but not persistent across exercises. No user control.
  - **Label:** Non-unique, persistent, user-controlled with no length limit.

- **UUIDs & Names:**
  - UUIDs ensure unique identification of simulation objects even when names are duplicated in different scenarios.
  - Names default to the object's short name followed by an integer but can be edited. Length restrictions apply based on entity or unit type.

- **Echelon IDs:** Identify a simulation object's place within the force hierarchy, reflecting its organizational structure.

- **Identification of Simulation Objects:**
  - Each object has a unique global object designator (object ID) for internal identification and network communication.
  - Labels (text strings) can be used to identify objects without uniqueness or length restrictions. Extended labels provide additional descriptive names.
  - Entity labels in the VR-Forces GUI display informational graphics next to simulation objects.

- **Organization of Simulation Objects:**
  - All objects exist within a hierarchical structure based on force ID and military organization.
  - Each object has an echelon ID, formatted as: `designator [category] [echelon], ..., force_number Force`.
    - `designator`: Differentiates the object from others in its echelon.
    - `category` & `echelon`: Optional descriptors for the object and organizational unit.
    - `force_number`: The force the object belongs to, based on force type enumerations.
  - New objects initially belong to the default force (e.g., `1 M1A2, 1 Force`). When added to a unit, the echelon ID updates accordingly (e.g., `2 M1A2, 2 Plt, 1 Force`).

- **Echelon IDs:**
  - Short names and echelon labels are specified in the VR-Forces object parameter database and associated with object types.
  - Designators are assigned sequentially by VR-Forces when creating new objects (starting with 1).
  - Labels cannot be changed interactively; designators have no direct user control.

- **Entity Designation in Aggregated Groups:**
  - Unit leader: Designator 1
  - Other entities: Successive designator numbers

- **VR-Forces Communication Model (Simple-Radio-Comm-Model):**
  - Instant message delivery to reachable destinations
  - Connection-modes:
    - *Aggregate Mode* (default): Unit-level networks, peers and direct superior reachable
    - *Force Mode*: Force-level networks, same-force objects reachable
    - *All Mode*: Global network, all objects reachable

- **Custom Communication Models:**
  - User-defined models for custom connectivity or delivery algorithms

- **VR-Forces Component Architecture:**
  - Sensors, controllers, actuators communicate via data ports/port groups
  - Unlimited components per simulation object
  - Components defined in object parameter database using component descriptors

- **Sensor Components:**
  - Provide simulated environment data for controller decisions
  - Information sources: Virtual network, terrain databases, simulation object states, etc.

- **Controllers & Actuators:**
  - Controllers provide control inputs to actuators but are not required to.
  - Controllers can use information from sensors for their functions, though it's optional.
  - Actuators:
    - Represent the physical model of simulation objects and change their state.
    - Interact with other objects by sending messages or modifying states (position, velocity, damage).
    - Can use control inputs from controllers or data directly from sensors.

- **Simulation Object Behaviors & Tasks:**
  - A behavior is an action that a simulation object takes independently based on conditions or situations.
  - A task is an action that a simulation object is told to perform.
  - Behaviors can override tasks under specific circumstances (e.g., collision avoidance).
  - VR-Forces provides behavioral models for objects, which users can modify or add to.
  - Independent intelligent behaviors can be disabled using the "AI Enabled" set data request.

- **Modeling Approaches:**
  - VR-Forces supports two modeling approaches:
    - Entity-level: Models interactions among individual entities (ships, tanks, people) based on their weapon systems and ability to withstand munitions.
    - Aggregate-level: Not explicitly defined in the provided text.

- **Entity-Level Simulation:**
  - Combines entities into higher units (e.g., platoons, companies).
  - Models combat by simulating interactions of individual members.
  - Uses simulation model sets like EntityLevel.sms.

- **Aggregate-Level Simulation:**
  - Focuses on high-level movement and interaction of large groups.
  - Models combat based on relative strengths and weaknesses of units.
  - Uses simulation model sets like AggregateLevel.sms (requires HLA Evolved and MAK FOM extensions).
  - Can represent individual entities but uses different data-driven models.

- **Simulation Object Interaction:**
  - Entity-level and aggregate-level modeling cannot interact predictably; combining them is not recommended or supported.

- **Collision, Obstacle, and Feature Avoidance:**
  - **Entity-Level Scenarios:**
    - Objects avoid collisions with other objects, features, and obstacles.
    - Ground, lifeform, and rotary-wing entities alter their route to avoid collisions.
    - Members of a unit use collision avoidance when moving.

  - **Aggregate-Level Scenarios:**
    - Units stop at obstacles, send messages to the console, and await further instructions.
    - Entities avoid obstacles' bounding volumes instead of following obstacle outlines.
    - Ground entities avoid features like buildings and plants.

- **Entity Movement & Obstacle Avoidance:**
  - Entities will keep trying to reach a target point even if it's inside or near an obstruction.
  - They also follow routes with vertices in obstructions, behaving similarly.
  - Place entities outside obstacles; their behavior is unpredictable otherwise.
  - Obstacles don't affect entity behavior, but you can configure which objects entities avoid.

- **Feature Avoidance on Terrain:**
  - Feature avoidance might not work if points are placed on top of existing geometric features.

- **Entity Movement & Soil Type:**
  - Entity movement speed depends on the surface (soil type) they're moving over.
  - Supported soil types map to roughness types for VR-Forces simulation objects.
  - Adjust vehicle performance on different surfaces by editing movement system definition files:
    - `ground-tracked.sysdef`
    - `ground-tracks-amphibious.sysdef`
    - `ground-wheels-off-road.sysdef`
    - `ground-wheels-road.sysdef`
  - Modify `acceleration-factor` (0.0 to 1.0) for surface drag and `stopping-factor` (0.0 to 1.0) for traction.
  - For example, improve a vehicle's acceleration in snow by increasing the `acceleration-factor` in the 'snow' section of the movement system definition file.

**Key Points Added:**
- Entities may not reach their target if it's inside an obstruction but will keep trying until the task is canceled.
- Feature avoidance issues can occur due to points being placed on top of existing terrain geometry.

- **Snow Acceleration Factors:** VR-Forces uses different acceleration factors for deep snow:
  - Default: 0.05
  - Deep snow: 0.08

- **Weather & Soil Parameters:**
  - Modify parameters in `./data/simulationModelSets/EntityLevel/physicalWorldParams.mtl` to control weather's effect on ground vehicle movement over different soils:
    - `deep-snow-depth`: Depth of snow for full mobility degradation (default: 1.0 meters)
    - `saturation-water-depth`: Rain accumulation for full wet effect (default: 0.2 meters)
    - `water-slide-depth`: Depth of accumulated rain making a hard surface slippery (default: 0.02 meters)
    - `water-slide-factor`: Fraction of traction retained on a hard, wet surface (range: 0-1, default: 0.65)
    - `hard-freeze-temperature`: Temperature for shallow water to freeze enough to support a vehicle (default: -5�C)

- **Ground Vehicle Slope Movement:**
  - VR-Forces calculates the maximum slope a ground vehicle can scale.
  - If too steep, the vehicle won't attempt it. Adjust with `slope-avoidance-factor` parameter in appropriate ground movement .sysdef files.

- **Creating & Placing Simulation Objects:**
  - Select object from Object Palette or Create Menu.
  - Filter objects using keywords.
  - Preview object information before creating.
  - Place objects:
    - Using default values (click to create)
    - Specifying properties beforehand (click to locate)
  - Set altitude and heading dynamically, or in the Create/Edit Object dialog box.
  - Lock mouse to the object being created for precise placement.

- **Manipulating Objects:**
  - Move objects by dragging them to a new location.
  - Edit an object's name in the Object List.
  - Copy and paste objects, with optional pasting of specific entity characteristics.
  - Delete simulation objects.
  - Group objects together for easier manipulation.
  - Create random versions of similar entity types.

- **Additional Features:**
  - Create cultural features (e.g., buildings) and embed them in the terrain.
  - Add objects to the Favorites List for quick access.

- **Object Creation Process:**
  - Select the desired object from available options.
  - Specify its location and properties using a dialog box that appears after selecting the object.
  - VR-Forces adds a tab for the selected object, allowing property editing even after creation.

- **Selection Methods:**
  - Create menu: Lists only simulation objects and tactical graphics marked as "Favorites".
  - Object palettes:
    - Create Object Palette: Includes various types of simulation objects, tactical graphics, and simulation effect objects.
    - Props Palette: Creates props that can be saved as part of the terrain.

- **Editable Properties:**
  - Table 20 lists editable properties for each object type. Some properties are specific to certain object types:
    - Entity: Prop, Altitude, Heading, Label, Location, Name, Overlay, Publish Object, Style, Visual Markings.
    - Tactical Graphic: Prop, Heading, Label, Location, Name, Overlay, Style.
    - Cultural Feature: Prop, Altitude, Heading, Label, Location, Name, Overlay, Publish Object, Style.
    - Simulation Effect: Prop, Altitude, Heading, Label, Location, Name, Overlay, Publish Object, Style.

- **Placement Process:**
  - After selecting the object, placement is the same regardless of selection method. For detailed steps on placing objects, refer to "14.3. Placing Objects" on page 380.

- **Simulation Engine Selection:**
  - Choose the simulation engine for object creation using the Selected Simulation Engine Toolbar.
  - Use "Automatic" for VR-Forces to add the object to the least burdened back-end.

- **Object Creation Palette:**
  - Open the palette listing all creatable objects without predefined forces.
  - Filter objects by:
    - Type (entity, tactical graphic, terrain, weather, clutter, simulation object)
    - Text string
    - Tag
    - Country of use
    - Search string

- **Object Selection:**
  - Click the desired force button on the Force line to create an associated object.
  - Optionally, filter entities by selecting a country from the Country list.
  - Enter a search string for further filtering.
  - Select the desired object; its information displays at the palette's bottom and the cursor changes to draw mode.

- **Pinning the Object Palette:**
  - Click the pin button in the title bar to keep the palette open after selecting an object, allowing creation of additional objects without reopening the palette.

- **Create Menu Objects:**
  - Access waypoints, routes, areas, and favorite objects via the Create menu.
  - Select the desired object type (e.g., Entity or Tactical Graphic) from the menu; the cursor changes to draw mode.

- **Object Creation Process:**
  - Refer to "14.2.5 Draw Mode" for details about draw mode.
  - Create the object as described in "14.3. Placing Objects".

- **Filtering Create Object Palette:**
  - Filter objects by:
    - **Type:** Entities (ground vehicles, aircraft, humans, etc.), Tactical Graphics (lines, text, etc.), Simulation Effect Objects (terrain, weather, etc.).
      - Use 'All' to clear type filter or 'Not' for uncategorized simulation objects.
    - **Tags:** Categorical labels like 'Military', 'Civilian'. An object can have multiple tags.
    - **Country of use:** Select a specific country (not applicable to tactical graphics).
    - **Text strings:** Search by entering text in the search box.

- **Tag and Country Assignment:**
  - Simulation objects are assigned tags and countries using the Simulation Object Editor and Common Parameters editor.

- **Tag Hierarchy & Display:**
  - Top row tags are fixed, displaying highest ranking ones.
  - Selected tags appear on 'Filters' line in most to least inclusive order.
  - Clear individual or all filters by clicking left of tag or using 'X' button.

- **Tag Window & Behavior:**
  - Lists applicable tags for unfiltered objects.
  - VR-Forces retains selected tags per top-level tag.
  - Make tags "sticky" (lock icon) to apply across all top-level tags.
  - Use 'Not' tags (no circle icon) to exclude categories.

- **Filtering Process:**
  1. Initiate by clicking a top-level tag or 'All'.
  2. Narrow filtering by selecting additional tags in the Tag window.
  3. Right-click on a tag to make it sticky or use 'Not' for exclusion.
  4. Clear filters by clicking left of tag or using 'X' button.

- **Object Preview & Interaction:**
  - Entities: Display 3D model image, 2D icon, and defined tags.
  - Tactical graphics: Show tags and functionality summary.
  - Simulation effects: Display effect summary and defined tags.
  - Clicking an object's tag instantly filters the objects list.

- **Draw Mode Cursors:**
  - For 2D entities: Cursor changes to a 2D icon representing the chosen entity.
  - For 3D entities: Cursor changes to the 3D model of the chosen entity; may be hard to see when zoomed out.
  - For randomized human characters (e.g., Civilian Male): Cursor shows next randomly selected appearance after each creation.
  - For tactical graphics: Cursor displays waypoint or vertex symbols based on graphic type.

- **Placing Objects:**
  - After selecting an object, a 'Create object' tab appears.
  - Two placement methods:
    1. **Click to Create:** Each click creates an instance (or specifies a vertex for lines/areas). Best for rapid creation with default properties; cursor shows the create object graphic.
    2. **Click to Locate:** Clicks specify coordinates, but don't create objects immediately; useful for explicit location setting, especially altitude.

- **Object Placement Indication:**
  - After clicking, an icon indicates future object location as a placeholder.
  - Progress indicator displays at the bottom right during object addition.

- **Using 'Click to Create' for Default Values:** Suited for quick creation with default properties; can specify some properties but not altitude.

- **Placing Objects:**
  - Objects appear on default overlays based on their type.
  - **Click to Create mode**:
    - Choose an object from palettes.
    - Click terrain for single-point objects or multi-vertex tactical graphics:
      - Double-click last vertex in a route or area.
    - Optionally, set altitude, heading, and pitch dynamically during creation.
    - Exit create mode with right-click or Esc.

- **Troubleshooting:**
  - If new objects/vertices aren't visible, ensure 'Attach Object to Mouse' is enabled.
  - If tactical graphics don't display, check if their display is disabled.

- **Alternative Method: Click to Locate**
  - Terrain click sets object coordinates but doesn't create it.
  - Define all object properties in the Create object dialog box beforehand.
  - VR-Forces retains property settings for each object type.

- **Closing Dialog Box Without Committing:**
  - Click "Create object" tab to close dialog box without creating an object.
  - Prevents automatic opening of dialog box for future creations of the same object type.

- **Creating and Placing Objects:**
  - Select the object to create.
  - Open appropriate dialog box by clicking "Create object" tab.
  - Deselect "Attach Object to Mouse".
  - Specify:
    - Object's name
    - Label (optional)
    - Extended labels (if available)
    - Heading (for simulation objects only)
    - Speed and type (for aircraft only)
  - Choose overlay.
  - Define force applied.
  - Optionally, specify visual markings.
  - Set coordinates: click on terrain or input values; set altitude separately.
  - For routes/areas:
    - Add vertices by clicking terrain or inputting coordinates
    - Insert vertices anywhere in the object
  - For tactical graphics: specify publishing preference.
  - Click "Create" to finalize object creation.

- **Default Placement of New Entities:**
  - Ground, lifeform, rotary-wing, and fixed-wing entities:
    - Placed on the ground at highest terrain intersection or building level
  - Surface and subsurface entities:
    - Created at sea level

- **Terrain Respect and Entity Placement:**
  - Entities respect terrain intersections during movement if configured to do so.
  - If next calculated location is between two levels of terrain, entity places itself at the closest elevation.

- **Placing Entities Inside Buildings:**
  - Adjust near clipping plane to remove wall and floor displays for easier placement in small enclosed spaces.
  - Enabling view constraints restricts moving observer into buildings.

- **Placing Simulation Objects on Others:**
  - Embark first object onto second to maintain position during simulation.
  - Simply creating an object on top of another doesn't ensure it stays there during simulation.

- **Specifying Object Altitude:**
  - Set altitude for air platforms, sub-surface entities, waypoints, routes, and props during creation or editing.
  - Altitude can be set dynamically relative to terrain using keyboard and mouse inputs, or via dialog boxes with options like 'Above Sea Level'.

- **Terrain Altitude Impact:** Entities will be below ground level if terrain is higher than entered altitude.

- **Altitude Adjustment for Routes:**
  - **Adjust All Vertices Simultaneously:**
    - Options: Change by a specific amount, set to a specific height above sea level or terrain.
    - Process:
      - Open route dialog box (create or edit).
      - Click 'Adjust Points'.
      - Select desired adjustment action.
      - Enter altitude value in the Altitude box.
      - Click OK.

- **Object Altitude Setting (not routes):**
  - Access via object creation/edit dialog box.
  - Expand location group box.
  - Choose altitude option under Altitude.
  - Enter an altitude value.

- **Dynamic Heading & Pitch Setting:**
  - **Heading:** Hold Shift + Left Mouse Button, drag mouse during creation or edit mode. Use Ctrl+Shift for 15-degree increments.
  - **Pitch (entity-level scenarios only):** Similar to heading, but available for specific object types.

- **Pitch Adjustment:**
  - Edit pitch directly or use 'Pitch set data request'.
  - Not visible in 2D view; switch to 3D for adjustment.
  - Dynamic pitch setting during creation: `Shift+Alt + Left Mouse Button` drag.
  - Edit existing object's pitch: Double-click, then `Shift+Alt + Left Mouse Button` drag.
  - Optional coarse adjustment: `Ctrl+Shift+Alt + Click and Drag` (15 degrees at a time).

- **Object Creation with Mouse Locking:**
  - Continuous left-click creates multiple objects with default settings by default.
  - Disabling mouse attachment allows specifying location and properties in the 'Create object dialog box' before creation.

- **Dynamic Pitch Specification:**
  - If 'Attach Object to Mouse' is unchecked, specify minimum points (location for simulations, more for graphics) before creating.
  - No dynamic resizing without mouse attachment.

- **Simulation Object Resources:**
  - New objects have full resources as defined in the database.
  - Use 'Resources set data request' to start with less than full resources.

- **Moving Simulation Objects:**
  - Methods:
    - Drag and drop
    - Edit dialog box
    - Location set data request (simulation objects only)
  - Restriction: Only move objects simulated by VR-Forces
  - Dragging:
    - Single object:
      - Point objects: Centered on mouse location
      - Line/area objects: Attached at the point clicked or center of mass
    - Multiple objects: Averaged center of mass
    - Terrain selection prevents Move command
    - Cancel drag: Press Esc before left-clicking
  - Moving multiple objects:
    - Select objects and choose Objects > Move

- **Editing Simulation Object Properties:**
  - Editable properties:
    - Name
    - Label (and extended labels if available)
    - Force
    - Visual Markings (if available)
    - Location
    - Heading
    - Altitude
    - Overlay
  - Process:
    1. Select the object
    2. Choose Objects > Edit
    3. Change properties in the Edit Object dialog box
    4. Click OK
  - Dynamic changes: Possible through movement tasks or set data requests (refer to specific chapters for details)

- **Editing an Object's Name in the Object List:**
  - Edit directly or via dialog box.
  - Editing disabled by default for accidental edits prevention.
  - Enable/Disable editing:
    - Settings > Application Settings > GUI Settings
    - Toggle 'Object Renaming Directly in Objects List' checkbox
  - To edit:
    - Click object name once, then click again (not double-click)
    - Edit the name
    - Click elsewhere to apply changes

- **Copying and Pasting Objects:**
  - Copied data: Name, label, force, appearance, etc. (except current task, state info, load balancing status, embarkation structures).
  - Paste destination: Currently selected back-end.
  - Simple paste:
    - Maintains copied state but may not reflect recent changes
    - Doesn't preserve overlay differentiation for copied objects
    - Pasting plans can have unexpected consequences due to unchanged object references

- **Copying and Pasting Process:**
  - Copy:
    - Select objects > Objects > Copy
  - Paste:
    - Objects > Paste

1. **Pasting Objects:**
   - Copied objects appear on screen, floating as you move the cursor to show their placement upon pasting.
   - Click on the terrain where you want them pasted; they maintain relative positions and original altitudes (if applicable).
   - Optionally, paste additional copies and exit paste mode by right-clicking.

2. **Paste Special Functionality:**
   - Use "Objects > Paste Special" to customize the paste operation.
   - Choose which entity characteristics (like plans, appearance, heading, etc.) to paste with the entity.
   - Select the desired altitude option (above terrain or sea level) for objects with altitude values.

3. **Pasting Altitude:**
   - Default behavior is to replicate original altitude above the terrain for eligible objects like fixed-wing entities and waypoints.
   - "Paste Special" allows choosing to apply the original altitude as being above sea level instead, maintaining consistency regardless of terrain elevation.

4. **Deleting Simulation Objects:**
   - Select an object, then choose "Objects > Delete" or press 'Delete' to remove it from the simulation.
   - Deleting a unit also deletes its subordinates and any intervisibility objects pinned to it.

5. **Simulation Object Groups (SOG):**
   - SOGs are reusable configurations of simulation objects and tactical graphics, created using the Simulation Object Editor.
   - VR-Forces places them in specified relative positions when pasted into a scenario.
   - Example SOGs include a carrier group, Patriot missile battery, barracks with soldiers, and others, demonstrating various object types and embarkation.

- **Barracks with Guards (SOG) Overlays:**
  - Hidden by default.
  - Revealed by:
    - Clicking the overlay icon at the bottom of the window.
    - Selecting the check box on the Objects List Panel, Overlays View.

- **Simulation Object Groups (SOGs):**
  - Can have multiple tags like other simulation objects.
  - Distinguishable in lists due to object name including group size.
  - Creation details: "65.5. Creating a Simulation Object Group" on page 1328.

- **Random Simulation Objects:**
  - Quickly populate scenarios with varied similar entities (e.g., civilian vehicles).
  - Configured in the Simulation Object Editor with a list of specific object types.
  - Predefined: VR-Forces includes one for civilian vehicles.
  - User-added random simulation objects are possible.
  - Creation details: "66.7. Creating Randomized Simulation Objects" on page 1362.

- **Cultural Features:**
  - Human artifacts (buildings, bridges) added to scenarios like entities or tactical graphics.
  - Tagged as 'Cultural Feature' and listed in the Objects List View.
  - Can have set data requests applied (e.g., Location, Heading).
  - Not part of the terrain; saved in the scenario objects file.

- **Embedding Cultural Features in Terrain:**
  - If a cultural feature has object geometry, it can be treated as part of the terrain.
  - Entities can walk on/inside it, with dynamic navigation data regeneration if placed within a navigation area.
  - No license required for generating navigation areas to dynamically regenerate navigation data.

- **Prerequisite:** A terrain with created navigation areas is required.

- **Cultural Feature Requirements:**
  - Configured in Simulation Object Editor to use object geometry and be embedded in the terrain.
  - If placed in a navigation area, that area must be sectorized for navigation data generation.

- **Navigation Data:**
  - Generated dynamically; not saved with terrain or scenario.
  - Generation can take time if many cultural features are present, potentially impacting computer usage temporarily.
  - Not generated for cultural features unless they're added as props and embedded in the terrain.

- **Props (Terrain Objects):**
  - Can be selected independently of the terrain.
  - Not saved in a scenario; must save the terrain to preserve them.
  - Back-end doesn't recognize props until the terrain is saved and the scenario restarted.
  - Created on front-end terrain, but not reflected on back-end if terrains differ.
  - Can be exported to shapefile for addition via earth file.

- **Cultural Features vs Props:**
  - Cultural features are treated like simulation objects, saved as part of the scenario, and listed with simulation objects and tactical graphics.

- **Props Palette:**
  - Props list based on model definitions in Visual Model Editors.
  - Add new props: add new model definitions.

- **Favorites List (Create menu):**
  - Lists only designated favorite objects.
  - Favorite status adds star icon and 'Favorites' filter tag.
  - Saved in `./data/simulationModelSets/<model_set>/gui/favorites.mst`.
  - Add/remove favorites via right-click context menu.

- **Objects Selection (Chapter 15):**
  - Similar selection, movement, and viewing for different object types.
  - Objects List Panel: central repository with views for:
    - Object (hierarchical list by force)
    - Embarkation
    - Overlays
    - Selection Groups
  - Select objects using:
    - Window (visual selection)
    - Objects List Panel
    - Object Console Summary Panel
    - Keyboard shortcuts
  - Use Selection Groups for organized object management.

- **Objects List Panel**:
  - Displays objects with their 2D icons and names.
  - Allows using custom icons.

- **Selectable Objects**:
  - Simulation objects: Entities and units.
  - Cultural features: Objects tagged as 'Cultural Feature'.
  - Tactical graphics:
    - Control objects, points, lines, areas, text, symbols from Create Object Palette or menu.
  - Props: Objects from Props Palette or part of the terrain.

- **Selection Methods**:
  - Single-click: Selects an object and unselects others.
  - Ctrl+click (or Cmd+click on Mac): Adds to selection without unselecting existing ones.
  - Double-click: Selects and makes editable.
  - Alt+drag box: Selects multiple objects within the box.
  - Right-click:
    - Selects an object or changes selection if one is already made.
    - Displays a menu for actions.

- **Selection Indication**:
  - In 2D view, selected objects' borders change color.
  - In 3D views, selected objects display bounding boxes; tactical graphics outlines are highlighted.
  - Objects List Panel highlights selected items.

- **Multiple Object Selection**:
  - Visual items (like radar coverage) only display for the first selected object.
  - Use 'Objects > Decorations' submenu to show visual items for more than one object at a time.

- **Selecting in Objects List Panel**:
  - Choose a view (Overlays, Selection Groups).
  - Locate and filter objects using search or category filters if needed.

- **Selecting Objects:**
  - Click an object's entry to select it, highlighting it in both the Objects List Panel and on the terrain.
  - Shift+click for contiguous objects.
  - Ctrl+click for non-contiguous objects.

- **Filtering Object Lists:** Use the Search box at the top of the list to filter displayed objects.

- **Selecting via Object Console Summary Panel:**
  - Right-click a message from the desired object.
  - Choose "Select Entity" from the shortcut menu.

- **Unselecting Objects:**
  - On terrain:
    - Click away from selected objects to unselect all.
    - Right-click to exit edit mode, keeping the object selected.
    - Click a selected object to unselect others.
    - Ctrl+click a selected object to unselect only that object.
  - In Objects List Panel:
    - Ctrl+click an object to unselect it without affecting other selections.
    - Click an object to select it and unselect all others.

- **Selection Groups:**
  - Named subsets of objects for quick selection; an object can be in multiple groups.
  - Creation methods include:
    - Selection Groups View on the Objects List Panel.
    - Selection Groups menu options.
    - Keyboard shortcuts.
    - Automatically created when adding a simulation object group to a scenario.

- **Creating a Selection Group:**
  - *Menu Command:* Select objects, then choose `Objects > Selection Groups > Add to New Selection Group`. Enter a name and click OK.
  - *Keyboard Shortcut:*
    - If no objects are selected: Press `Ctrl + number` (1-9 or 0) to create an empty selection group named 'Selection Group number'.
    - If objects are selected: Press `Ctrl + number` (1-9 or 0) to create a selection group with the selected objects, named 'Selection Group number'.

- **Selecting a Selection Group:**
  - *Selection Groups View:* Select a group in the 'Group list'.
  - *Right-click Menu:* Choose `Objects > Selection Groups > Select Selection Group > group_name`.
  - *Keyboard Shortcut:* Press the corresponding number key for existing selection groups named 'Selection Group number'.

- **Adding/Removing Objects from a Selection Group:**
  - *Add:*
    - Method 1: Select objects, then choose `Objects > Selection Groups > Add To Selection Group > group_name`.
    - Method 2: Drag and drop selected objects onto the desired selection group in the 'Selection Groups' view.
  - *Remove:*
    - Method 1: Select objects, then choose `Objects > Selection Groups > Remove from Selection Group > group_name`.
    - Method 2: In the 'Selection Groups' view, select the group and object(s), then click the 'Remove Selected from Selection Group' button.

- **Renaming a Selection Group:** Right-click on the selection group in the 'Selection Groups' view, choose 'Rename', enter a new name, and press Enter.

- **Selection Groups:**
  - Select a group using its number (1-9, 0).
  - Rename a group:
    - Double-click on the name.
    - Type in the new name.
    - Press Enter to confirm.
  - Delete a group:
    - Select it in the Selection Group view.
    - Click the 'Delete' button.

- **Displaying Object Information:**
  - Open the information dialog box by:
    - Choosing "Objects > Information" or pressing 'I'.
    - Right-clicking on a message in the Objects Console Summary Panel.
    - Clicking any field in the summary panel.
    - Clicking the 'Show Information' button on the Last Selected Object Panel.
  - The dialog box displays details such as:
    - Object icon and name.
    - Current task.
    - Sensor information, TAS (true airspeed), and altitude.

- **Entity Labels:**
  - Display entity labels for additional information about entities.
  - Manage labels by:
    - Turning them on/off.
    - Pinning symbols to the window.
    - Configuring shadowing and background color.
  - Use extended labels for more detailed information, with options to:
    - Add an extended label.
    - Change its index.
    - Delete it.

- **Object Information & Console Messages:**
  - View object counts.
  - Configure console message notifications by setting the notification level.
  - View all console messages and answer scripted tasks.
  - Save console messages, display warning icons, and clear the console.

- **Entity-Level Scenario Information Dialog Box:**
  - Pages: Tasks, State Data, Appearance, Resources, Sensor Info, Emitters, Acoustics, Embarkation, IFF, Subsystems.
  - Tasks page shows current tasks, subtasks, and reactive tasks. Allows task cancellation or skipping, displays graphical status output for certain tasks.
  - Pages are context-sensitive; irrelevant pages for an entity type are not shown.

- **Aircraft (Rotary-Wing & Fixed-Wing) Airspeed Information:**
  - State Data page displays: Ground Speed, True Airspeed, Indicated Airspeed, Mach.
  - Users can modify airspeed calculations using VR-Forces API by editing respective .ope files.

- **Aggregate-Level Scenario Information Dialog Box:**
  - Sections: Summary, Detailed Info, Object Console.
  - Summary section includes health status bar and gumball icons displaying object health. Simulation object icons may also show gumballs.

- **Gumball States** (Figure 157):
  - Green: Normal
  - Yellow: Warning
  - Red: Critical
  - Gray: Disabled or Not Applicable

- **Object Health Status & Gumball Charts:** Displays object health status using gumball charts (Figure 158).
- **Object Information Dialog Box:**
  - *Simulation Objects:*
    - Tasks: Lists tasks assigned to the object.
    - State Data: Shows current state and coordinates of the object.
    - IFF: Identifies friend or foe status.
    - Subordinates: Lists subordinates under the object's command.
    - Personnel & Equipment: Details types and numbers of personnel, equipment, casualties, and supplies (food, water, fuel, ammunition).
    - Combat Capability: Displays combat power and defensive capability by category.
    - Engagements: Shows current attack and defense status.
    - Sensor Information: Provides details on objects being detected and jamming/electronic warfare status.
    - Emitters & Acoustics: Lists emitters and acoustic information.
    - Embarkation: Displays embarkation-related data.
  - *Environmental Objects (like routes):*
    - State Data: Shows force and coordinates of the object.
    - Attached To: Identifies the simulation object this environmental object is attached to, if any (Figure 159).
- **Multiple Object Information:**
  - View summary information for up to 20 selected objects at a time in the Multiple Object Information window (Figure 160).
  - Zoom to an object's location or open its detailed info dialog box by clicking on its icon or details.
  - Load more objects or remove objects from the window as needed.
- **Entity Labels/Symbol Decorations:** VR-Forces displays abbreviated information about simulation objects using labels or decorations on entities. For 3D models, it shows a locator circle and an optional text label that appears when moused over (Figure 161).

- **Entity Visibility & Labels:**
  - All entities in view have locator circles, regardless of visibility.
  - Entity labels' colors represent force type:
    - Blue for friendly
    - Red for opposing
    - Green for neutral
  - Configure label attributes (font size, background height/width) via EntityInfo model definition in Visual Models Editor.

- **Entity Label Information:**
  - Display various data such as:
    - Acceleration, altitude (above ground/sea level), contact radius, heading, location, name, orientation, speed
    - Aircraft-specific speeds (GS, IAS, TAS, MACH)
    - Weather details (elevation config, cloud state, precipitation intensity, visibility, wind direction/speed)
  - Spot report labels can be displayed if enabled.

- **Label Customization & Control:**
  - Specify symbol decorations' order.
  - Toggle entity labels on/off via:
    - Display Settings dialog box
    - Shortcuts (L key, toolbar button)
  - Enable/disable embarked entity labels separately.

- **Pinning Labels to Window:**
  - Pin labels for persistent visibility in both 2D and 3D views.
  - Pin icon indicates label state:
    - Sideways pin: pinned
    - Upright pin: unpinned

- **Entity Labels:**
  - Default: Not pinned (upright).
  - Toggle pin status: Right-click entity's locator circle or name in Objects List.
  - Multiple decorations: Toggle each entity's label or use Display Settings.

- **Symbol Decorations Control:**
  - Control display based on model set and entity selection.
    - Always or on mouse over.
  - Change text color via Display Settings:
    - Custom colors or force color.
  - Hide at specified altitude (default: 100,000 meters), visible when hovering or selecting.

- **Display Settings Access:**
  - `Settings > Display`, then `Symbol Decoration Settings` page.

- **Adjusting Symbol Decoration Altitude:**
  - Open Display Settings (Settings > Display).
  - Select Symbol Decoration Settings page.
  - Adjust 'LOD Out Altitude' using slider or text box.
  - 2D icons resize based on observer's altitude.

- **Repositioning Labels:**
  - Default label position: below and to the right of object icons.
  - Rotate labels:
    - Context menu: Select entity, choose "Rotate Label".
    - Shortcut: Ctrl+Shift+S (repeat for desired position).
  - Reposition multiple entities simultaneously.

- **Configuring Labels' Background and Shadowing:**
  - Change background opacity and color in Display Settings > Symbol Decoration Settings.
  - Add shadowing to labels for improved visibility on light terrain by enabling 'Shadow Text'.

- **Using Extended Labels:**
  - Extended labels are additional, application-wide labels defined per simulation object.
  - They appear in Information dialog boxes and affect all scenarios.
  - Changes apply globally; use cautiously.

- **Extended Labels in VR-Forces:**
  - Displayed in Plan View mode like other symbol decorations.
  - **Adding an Extended Label:**
    - Go to Application Settings > Simulation Settings.
    - Click 'Add' on the Extended Labels line, rename it, and edit simulation objects to specify its text.
  - **Managing Extended Labels:**
    - Changing a label's index may affect existing scenarios; use caution.
    - Deleting a label removes it from all using scenarios immediately.

- **Customizing 2D Icon Colors (session-specific):**
  - Select the object, choose Objects > Decorations > Set Icon Color, adjust settings, and click OK.

- **Changing Force Colors:**
  - Default: primary colors (red, blue, green).
  - Options: MIL-STD 2525B colors (light blue, light green, pink) or change force color in Simulation Object Editor.

- **Display Settings Dialog Box:**
  - Accessed via `Settings > Display`.
  - Pages: Entity Display Settings (Figure 163, page 422), Unit Display Settings (Figure 211, page 521).
  - Options: Force Coloring Settings.

- **Height Above Terrain (HAT) Lines for Entities (3D Only):**
  - Vertical lines showing entity altitude above terrain.
  - Visible for entities that can be above or below ground (e.g., vehicles).
  - Global on/off toggle and option to show only for selected entities.
  - Can reduce frame rate.
  - Access: `Settings > Display > Entity Display Settings` or toolbar button.

- **Object Information:**
  - **Entity Resources:** View in Information dialog box (`Objects > Information` or `I`) under Detailed Information > Resources. Shows current, starting amounts, and percentage remaining.
  - **Bounding Volumes:** Show area used for intersection calculations (translucent volumes in 3D, rectangles in 2D). Managed separately for units and entities.
    - **Entities:** Observer setting, enabled/disabled via `Settings > Display > Observer Settings` or toolbar button.

- **Bounding Volumes for Selected Entities:**
  - Enable bounding volumes.
  - Go to Settings > Display.
  - Select Entity Display Settings page.
  - Check 'Show Bounding Volumes for Selected Entities'.

- **Object Console Messages:**
  - Displayed based on set notification levels (0-4, default is 2).
  - Levels: 0-Fatal, 1-Warning+Fatal, 2-Diagnostic, 3-Verbose, 4-Debug.
  - Set level in object's Information dialog box or using data request/set parameter.
  - View all messages in Object Console Summary Panel.
  - Unacknowledged messages show an exclamation point until viewed/acknowledged.

- **Scripted Tasks Questions:**
  - Scripts can send questions to object console, indicated by a question mark.
  - Answer questions from Object Console or Object Console Summary Panel.

- **Answering Questions in Console:**
  - Click 'Answer Questions' on Object Console/Summary Panel.
  - Choose from displayed options and click OK.

- **Saving Console Messages:**
  - Select simulation object, open Information dialog box, expand Object Console.
  - Copy all or specific messages to clipboard, then paste into desired text editor.

- **Viewing/Configuring Object Console Messages & Warnings:**
  - View console messages in Object Console panel.
  - Configure notification level for console messages (default is Warn).
  - Enable/disable warning icon in Display Settings > Entity Display Settings.

- **Clearing Object Console:**
  - Click 'Clear' to delete messages from the object console.

- **Viewing Object Counts:**
  - Choose View > Objects Count Panel to display live, destroyed objects and VR-Forces control objects by type.

- **Embarking/Disembarking & Managing Embedded Entities (Next Chapter):**
  - Instantly embark/disembark simulation objects.
  - Use 'Disembark' command for disembarkation.
  - Configure entities to support embedded entities, assign tasks/plans, and restore entities with embedded entities.

- **Embarkation**: Places one simulation object (e.g., infantry, vehicles) onto another (e.g., trucks, carriers), allowing them to travel together. Embarked objects are not visible in 2D view but may be visible in 3D if embarked externally or on entities with interior geometry.
- **Visibility & Interaction**:
  - Embarked entities can shoot if the parent entity has object geometry enabled.
  - Attached control objects (e.g., waypoints) help embarked entities move around the parent.
- **HLA Compatibility**: HLA users must use RPR FOM 2, draft 17 or later for embarkation features. VR-Forces provides preconfigured settings for HLA 1.3 and HLA Evolved using RPR FOM 2.
- **Embarkation Methods**:
  - Instant:
    - Using the "Embark On" command with preconfigured spaces or specific coordinates.
    - Using set data requests, enabling immediate embarkation in plans.
    - In the Embarkation View.
    - Automatic embarkation.
  - Simulated: Using "Embark" and "Disembark" tasks (described in Chapter 30).
- **Restrictions & Considerations**:
  - Instant embarkation allows overrides but requires knowing proper coordinates.
  - Joystick-controlled embarked entities cannot disembark.
  - Set data requests enable immediate embarkation in plans, prioritizing speed over realism.

- **Full Embarkation Spaces:** If parent simulation object's embarkation spaces are full, VR-Forces sends a message and the object isn't embarked.

- **Instant Embarkation Methods:**
  - *Data Request:* Use 'Embarked set data request' to embark instantly from a plan.
  - *Command:*
    - Select simulation object.
    - Choose 'Objects > Embarkation > Embark On'.
    - Optionally, filter parent objects and select one.
    - Choose embarkation point method: 'Reserve Slot' or 'Override Position'.
      - If overriding position, specify coordinates in body coordinates (X, Y, Z).
    - Click 'OK'.

- **Embarkation View:** Drag object onto parent in Embarkation View to embark. Specify X, Y, Z values for location if needed; otherwise, it's embarked at the center of the parent.

- **Automatic Embarkation:**
  - Conditions: Available only in 3D observer modes and for capable objects that can be embarked.
    - Parent object must allow embarkation.
    - No option to override embarkation slots by specifying a particular location.
    - Uses configured slots first, then places objects on the parent's center if slots run out.
  - Steps:
    1. Create entity to embark on (if not already created).
    2. Select entity to embark in Create Object Palette.
    3. Optionally configure auto-embarkation settings.
    4. Move cursor over target entity; green box appears if supported and enabled for automatic embarkation.
    5. Click to place entity.

- **Disembarking:** Use 'Disembark' command, typically during scenario development, similar to the 'Embark On' process.

- **Disembarkation Methods:**
  - Use 'Disembark' task or 'Disembarked set data request' for instant disembarkation.
  - Joystick-controlled entities cannot disembark.

- **Disembarking Individual Objects:**
  - Select object > Embarkation > Disembark.
  - Object is disembarked next to former parent if embarked using default point, or in the same location as former parent if embarked using position override.

- **Disembarking All Objects from a Parent:**
  - Select parent > Embarkation > Disembark All.
  - Objects are disembarked separately near parent if embarked with 'Embark On' or 'Embark task', or in the center of parent if embarked with 'Embarked set data request'.

- **Embedded Entities:**
  - Convenient for managing entities typically embarked on others.
  - Configured in systems added to an entity, each embedded entity must be individually specified.
  - Deployed entities function like any other but can be recovered by their parent.

- **Limitations:**
  - An entity can have only one embedded entity system.
  - Embedded entities require unique names; ranges of similar entities cannot be specified.

- **Embedded Entities:**
  - Format: `(embedded-entities ... )`
  - Example entities:
    - `ee-1`: SH-60 Seahawk Alpha
      - Deployed at time 0.0, recovery distance 35m
      - Relative position/heading linked to variables (`rel-pos-lamps-a`, `rel-heading-lamps-a`)
    - `ee-2`: RHIB Alpha
      - Deployed at time 15, recovery distance 50m
      - Relative position/heading linked to variables (`rel-pos-rhib-a`, `rel-heading-rhib-a`)
  - Variables (e.g., `rel-pos-lamps-a`):
    - Store metadata for relative position/heading with default values provided

- **Entity Management:**
  - Deployed embedded entities:
    - Behave like other scenario entities
    - Can be given tasks or plans independently
  - Entity destruction and restoration:
    - Destroyed embedded entities are removed from the scenario
    - Restoring a parent entity restores its full complement of embedded entities, excluding those deployed at restore time

- **Traffic Generation (Pattern of Life):**
  - VR-Forces offers general-purpose spawn-and-sink traffic features for:
    - Vehicles (ground, air, water)
    - Pedestrians (humans, animals)
  - Spawn points create simulation objects, sink points remove them
  - Spawn patterns manage object generation rates and types
  - Air traffic and background watercraft can be generated using specific methods or clutter areas:
    - Aircraft Clutter Area: Generates air traffic based on historical data or predefined rules
    - Ship Clutter Area: Creates a watercraft pattern of life based on historical data

- **Default Behavior of Spawned Simulation Objects:**
  - Move towards a randomly chosen sink point.
  - Remove from scenario upon reaching the sink point.

- **Custom Behavior with Plans:**
  - Assign plans to simulation objects at specific spawn points.
  - Plans can include tasks and data requests suitable for the object type.

- **Spawn Patterns Configuration:**
  - Configure behavior, spawning frequency, and maximum simultaneous objects.
  - Two pre-built patterns; create and edit as needed.
  - Spawn and sink points added dynamically to Create menu and palette.

- **Creating Spawn Points:**
  - From Create menu, Create Object Palette, or Spawn Pattern Manager.
  - Use Roads option requires proximity to road network.
  - Right-click to exit create mode after placing spawn points.

- **Activating/Deactivating Spawn Points:**
  - Use Activation set data request for control.

- **Sink Points:**
  - Purpose: Simulation objects move to these points after spawning.
  - Creation:
    - From Create menu: `Create > Clutter > [Sink Point Type]`, then click terrain.
    - From Spawn Pattern Manager: Select pattern, click "Create Sink Points", then click terrain.
  - Behavior:
    - If more than 10m from a road and using 'Use Roads' criterion, objects move to the nearest road point before being removed.

- **Spawn Patterns:**
  - Configuration options for spawned object creation and behavior:
    - Name & description
    - Timing: Continuous or bursts
    - Object type(s): Multiple types allowed for heterogeneous traffic
    - Movement plan: Default or custom
  - If using default plan, configure movement:
    - Maximum and minimum speed (randomly assigned between these values)
    - 'Use Roads': Enables/disables road-following behavior for vehicles

- **Default Spawn Pattern:** Lists sink points used in the pattern.

- **Example Scenario (SubwayPatternOfLife):** Demonstrates various spawning methods:
  - Continuous spawning throughout the scenario's life.
  - Burst spawning to represent specific events like train disembarkations or rush hour traffic.
  - Use of a custom plan for unique spawning requirements.

**Spawn Event Scheduling:**
- Options to control when simulation objects are spawned:
  - **Continuously:** Entities spawn as soon as the scenario starts and throughout its life.
  - **Time of Day:** Entities spawn between specified start and end times of day.
  - **Simulation Time:** Entities spawn between specific starting and ending simulation times.

- Spawn interval and variance determine the frequency and randomness of object creation:
  - **Interval:** Sets how frequently objects are spawned (e.g., every 10 seconds).
  - **Variance:** Introduces variability to the interval, creating a more naturalistic flow. Variance is a percentage of the spawn interval (e.g., �10% of 10 seconds results in spawning between 9 and 11 seconds).

- Spawn intervals are not fixed to an absolute time scale; a new interval starts with each spawn event.

**Burst Spawning (additional variation):**
- Parameters to control burst patterns:
  - **Burst Period:** Duration of the burst activity (e.g., 10 minutes).
  - **Burst Length:** Percentage of the period during which objects are spawned.
  - **Offset Start Time:** Delay before starting a burst within the burst period.

- Within bursts, objects spawn at the rate determined by the set interval and variance values.

- **Burst Periods:**
  - Start two minutes after the burst period begins.
  - Duration is 40% of the burst period's length (e.g., four minutes in a ten-minute period).
  - Spawn event frequency within bursts controlled by spawn interval and variance values.

- **Custom Plans:**
  - Override default behavior of spawned objects moving to sink points and being removed.
  - Enable complex behaviors, such as jets taxiing and taking off from an airport.
  - Include tasks, sets, conditions, and global commands.
  - Objects remain in the scenario until their plan removes them; deletion doesn't require specifying the object.
  - Enable IFF (Identification, Friend or Foe) for aircraft using a custom plan.

- **Spawn Patterns:**
  - VR-Forces includes default civilian vehicle and lifeform patterns, saved with scenarios.
  - Additional defaults can be added to `./appData/settings/vrfSim/defaultSpawnTemplates.mtl`.
  - Civilian vehicles require nearby road networks to spawn successfully.

- **Spawn Pattern Management:**
  - Create new spawn patterns using the Spawn Pattern Manager (Simulation > Spawn Pattern Manager).
  - Enter a name for the pattern in the Create Spawn Pattern dialog box.

- **Pattern Description:** Provide a name for the pattern in the 'Description' field to help identify its purpose.

- **Maximum Simultaneous Objects:**
  - Limit the number of simulation objects that can exist at once from each spawn point using this pattern.
  - Once the maximum is reached, no more objects will be spawned until one is removed from the scenario.
  - Example: If the max is set to 200 and there are 10 spawn points, up to 2000 objects can exist simultaneously. However, no single point will have more than 200 at a time.

- **Performance Consideration:** Be aware that a high maximum number of simultaneous objects combined with a small spawn interval can quickly generate many objects, potentially impacting performance.

- **Object Types:**
  - Select the simulation object types to create using the 'Add' button in the Object Type dialog box.
  - You can add multiple types, including entities, cultural features, and control objects. Ensure the selected types make sense for your scenario.

- **Spawn Location:** Choose an overlay from the 'Create on Overlay' list where spawned objects will be created.

- **Spawn Timing:**
  - Options: Spawn Continuously throughout the simulation, Based on Time of Day (specify starting and ending times), or Based on Simulation Time (specify starting and ending times).
  - Optional Burst Period Configuration:
    - Burst Period: The time period for each burst.
    - Burst Length: The length of time, as a percentage of the burst period, during which simulation objects are spawned.
    - Offset Start Time: An offset from the start of the burst period to begin spawning simulation objects.

- **Spawn Interval:** Set the time between each spawn event. A variance percentage can be applied to this interval for randomness.

- **Behavior Option:**
  - Choose a behavior for spawned objects in the 'Spawn Behavior' group box.
  - Custom Plan: Write a plan using the Edit Custom Plan dialog box, ending with a 'Delete Self' command if objects aren't meant to stay permanently in the scenario.

- **Spawn and Sink Traffic Generation:**
  - Use Default Plan:
    - Optionally set minimum and maximum speeds for spawned objects, introducing speed variance.
    - Enable 'Use Roads' for ground vehicles only; spawn/sink points must be within 10 meters of roads.
    - Manually add sink points if objects should move to waypoints.

- **Spawn Pattern Management:**
  - **Copying a Spawn Pattern:**
    - Open Spawn Pattern Manager, select pattern, click 'Copy Pattern', edit and create new pattern.
  - **Editing a Spawn Pattern:**
    - Open Spawn Pattern Manager, select pattern, click 'Edit Pattern', modify values in dialog box, then click 'Update'.
    - Changes do not affect already spawned objects.
  - **Deleting a Spawn Pattern:**
    - Deletes all spawn points of that type from the scenario.

- **Sink Points:**
  - Not deleted but removed from creation menus (Create menu, Create Object Palette).
  - Existing spawned objects continue executing their plans even if the scenario is running.
  - To delete a spawn pattern:
    - Choose Simulation > Spawn Pattern Manager.
    - Select the spawn pattern to delete.
    - Click Delete Pattern and confirm.

- **Clutter Areas (AIS/ADS-B data):**
  - Create realistic background water/air traffic ("clutter objects") using MAK's preprocessed AIS or ADS-B data.
  - Data not user-provided; 48 hours' worth included, longer scenarios may cause issues.
  - Display in Clutter Objects overlay by default, intended as background entities with lower performance impact.
  - Move according to data timestamps and are added/removed based on area boundaries.
  - Cannot assign tasks; promote from clutter for tasking (Promote From Clutter).
  - Customization possible via MAK ONE Applications Reference Manual.

- **Aircraft Clutter Area:**
  - Populated with fixed-wing aircraft using ADS-B data, creating background air traffic.
  - Names, models, and movements based on data; only airborne aircraft displayed.
  - No takeoffs/landings simulated; added/removed based on data timestamps.
  - IFF data displayed and published to network.
  - Creation process: Open Create Object Palette.

**Clutter Areas (Aircraft & Ship):**
- Optionally use Clutter filter to narrow down objects.
- Select 'Aircraft Clutter Area' or 'Ship Clutter Area'.
- Define area on terrain; VR-Forces populates it with respective objects.
- Ship clutter uses AIS data for ship names, models, and movement.

**Crowds & Multiple Simulation Objects:**
- VR-Forces rapidly creates multiple simulation objects within a defined area.
- Methods to generate multiple objects:
  - Crowd unit: Create from palette or aggregate humans; assign tasks.
  - Herd units: Place cow, goat, or sheep unit; entities graze and wander around the central point.
  - Pedestrian/Herd areas: Populate with random civilians/sheep executing a 'wander' task.
  - Multiple simulation objects: Specify quantity, type, tasks, and data requests.

**Crowd & Herd Units:**
- Create crowd/herd by placing a unit (e.g., preconfigured civilian crowds).
- Entities have random appearances based on the entity file; appearances can't be controlled during creation but can be set in the Simulation Object Editor.

- **Crowd Units:**
  - Created from individual human entities or aggregated into units (small, medium, large).
  - Specific animations may apply to certain civilian characters.
  - Placed on terrain paths or specific locations within a configurable radius and density.
  - Default parameters (Table 23) can be changed in the Simulation Object Editor.
  - Supported only in entity-level scenarios and navigation areas.

- **Crowd Creation:**
  - Access Create Object Palette > Entity filter, clear tag filters, optionally select Human/Civilian/Crowd tag, then choose unit.
  - Click on terrain to place the unit.

- **Herd Units:**
  - Preconfigured units: cows (36), goats (36), sheep (36); animals wander within ~20m radius.
  - Can also create herds by aggregating individual animals, but they won't wander automatically.

- **Crowd and Herd Areas:**
  - Draw areas to create crowds/herds; entities' appearances are random based on the entity file.
  - Cannot control entities' appearances during area creation, but can set available appearances in Simulation Object Editor.

- **Pedestrian Area Crowds:**
  - Creates a random number of male and female civilian entities as a ground unit with wander task.
  - Number and mix of entities cannot be specified; all entities deleted if area is deleted.

- **Creating Pedestrian Areas & Animal Herds:**
  - Open the Create Object Palette.
  - Optionally, apply a Clutter filter to manage displayed objects.
  - Select the desired area type:
    - Pedestrian Area for creating pedestrian zones.
    - Specific animal areas (cows, goats, sheep) for generating herds.
  - Draw an area on the terrain. Upon completion, VR-Forces populates it with entities (pedestrians or animals).

- **Adding Entities to Existing Areas:**
  - After creating a pedestrian or herd area, additional entities can be added using the "Create More Entities" feature.

- **Crowd Tasks & Behavior:**
  - Crowds can perform various tasks and behaviors, such as:
    - Circling around a location.
    - Crowding along a line or around a location/object/waypoints.
    - Gathering in front of an entity.
    - Wandering, fleeing from entities, protesting, rioting, or dispersing.
  - When crowds gather, VR-Forces calculates a target destination for each member, with potential overlaps if multiple crowds are involved.

- **Creating Multiple Simulation Objects:**
  - Add multiple simulation objects to a scenario simultaneously and assign them a common task.
  - Objects are added within a specified area, following these constraints:
    - If the area overlaps navigation data, objects are placed only in the navigable portion.
    - If the area is too small for the specified number of objects, some might not be created.
  - Created objects are automatically grouped under 'group_number', with the group number incrementing for each new group.

- **Placement Limitations:**
  - Simulation objects are placed only where Area 1 overlaps with navigation data.
  - Only as many objects fit within that overlapping subset will be created.

- **No Automatic Notification for Failed Creations:**
  - VR-Forces does not notify users if it cannot create the specified number of objects due to reasons mentioned in the guide.
  - Users must manually check how many simulation objects were actually created.

- **Accessibility Check (optional):**
  - Before creating each object, VR-Forces can perform an accessibility check to ensure the object can reach a specified waypoint from its candidate location.
  - If navigation data is unavailable or the location is unreachable, VR-Forces will try other locations within the area.
  - If all attempts fail, VR-Forces stops creating objects and assumes there's no more space for them.

- **Creation Process:**
  - Open "Create Multiple Simulation Objects" dialog box.
  - Optionally rename the selection group.
  - Choose an existing or create a new area for object creation.
  - Define the simulation objects to create by adding them in the 'Define Entities To Create' section.
  - Optionally, edit or remove any of the entity sets listed.
  - Optionally, enable accessibility check and select a waypoint.
  - Click "Create" to generate entities in the specified area.

- **Adding an Area:**
  - Open the Create Area tab by clicking 'Add' in the Select Area group box.
  - Follow standard VR-Forces procedure for creating areas.

- **Creating Multiple Simulation Objects:**
  - In the Create Multiple Entities dialog box, click 'Add' to open the Add Group of Entities dialog box.
  - Specify:
    - Number of objects to create
    - Object type (select from Entity Type dialog box)
    - Starting set data request (optional)
    - Starting task (optional)
    - Placement options (optional)
    - Speed and variance range (optional)
  - Click 'OK' to add the object set; repeat for additional sets.

- **Pedestrian-Oriented Tactical Graphics:**
  - VR-Forces offers specific graphics for pedestrians in navigation areas:
    - Pedestrian paths: Automatically chosen routes for humans
    - Civilian visit points: Waypoints that attract civilians
    - Crosswalks: Preferred pedestrian routes with safety checks (experimental)
    - Pedestrian areas: Generate pedestrians automatically when created

- **Civilian Visit Points:**
  - Attract nearby civilian entities (crowds or individuals).
  - Entities stop and face the point within a configurable distance.
  - Wait for a few seconds before resuming tasks.
  - Behavior controlled by 'Visit Interest Points' reactive task.

- **Order of Battle (OOB):**
  - Hierarchical structure of simulation objects in a scenario.
  - Supports creating, editing, and managing objects and units.
  - Objects have unique IDs; instantiating an OOB member creates only one instance.
  - Key features:
    - Create/manage OOB: add/remove members, change names/types, organize into units.
    - Instantiate OOB members in a scenario using the Order of Battle Palette.
    - Import/export OOBs for reuse across scenarios to quickly create new scenarios with the same structure.
  - Access to object creation can be restricted based on OOB configuration, allowing users to only add simulation objects from the OOB.

- **Order of Battle (OOB) Panel:**
  - Displays and manages the Order of Battle.
  - Lists members by force with icons indicating status:
    - Gray icon: Not instantiated in the scenario.
    - Colored icon: Instantiated in the scenario.

- **Accessing OOB Panel:**
  - View > Order of Battle Panel.

- **Creating an OOB:**
  - Add members using simulation objects from the Create Object Palette.
  - Methods:
    1. Add objects directly to OOB without creating them in the scenario (one at a time for multiples).
    2. Create objects in the scenario, then add them to the OOB.

- **Adding Objects Directly to OOB:**
  1. Open the Order of Battle Panel.
  2. Click the 'Add' button.
  3. Select the force to which you want to add the object.
  4. Optionally, filter the list of simulation objects.
  5. Select the desired object from the list.
  6. Optionally, specify a name and label for the object.
  7. In the Order of Battle Panel, select the parent (force, unit, or entity) under which you want to add the object:
    - Adding to a force makes it a top-level subordinate.
    - Adding to a unit makes it a subordinate of that unit.
    - Adding to an entity makes it a sibling of the entity. If the entity is part of a unit, the new member becomes part of that unit as well.
  8. Click 'Add' in the dialog box.

- **Dragging Objects to OOB Panel:**
  - Follows the same rules as manual addition.
  - The object becomes part of the force it's dragged to, regardless of the selected force on the 'Set Force' line.

- **Adding Existing Objects to the Order of Battle (OOB):**
  - Add objects individually or all at once while preserving force hierarchy and adding entire units if a member is added.
  - Method: Select objects > Simulation > Order of Battle > Add to Order of Battle.

- **Creating Units in the Order of Battle Panel:**
  - Aggregate selected objects into units, following the same process as creating a unit by combining existing simulation objects.
  - Method: Select objects > Objects > Unit > Aggregate As.

- **Instantiating Members of an Order of Battle in a Scenario:**
  - Add non-instantiated (gray icon) OOB members to a scenario, with each added object being unique and specific.
  - Method: Select object in OOB Panel > Click 'Add Object' button > Place on terrain.

- **Order of Battle Palette:**
  - A simplified palette for training exercises, allowing users to add objects without editing or managing the OOB.
  - Enabled via View menu.

- **Window Layout & GUI Configuration:**
  - Hide/remove palettes (Create Object, Order of Battle) using window layout feature or editing the GUI configuration file.

- **Order of Battle (OOB) Management:**
  - **Removing Objects:**
    - Remove objects from OOB without affecting instantiated scenario objects.
    - Deleted scenario members remain in OOB, turning gray.
    - Removing a unit deletes all its subordinates.
    - Method: Select object > Click Delete button or press Delete key.

  - **Editing Objects:**
    - Edit OOB members' name, type, and force using standard edit dialogs for created objects or specific dialogs for non-created ones.
    - Method: Select object > Click Edit Object button > Make changes > Update/OK.

  - **Reorganizing Order:**
    - Rearrange OOB members by dragging them to new locations.
    - Move members between units, force level, and other units but can't change sibling order.
    - Method: Drag object in Order of Battle Panel to new location.

  - **Exporting & Importing OOB:**
    - Export: Choose Simulation > Order of Battle > Export Order of Battle > Name file > Save.
    - Import: Implied by the export process.

When importing an Order of Battle (OOB) in VR Forces:

- Merge with existing OOB or selectively import members.
- To import:
  - Choose 'Simulation' > 'Order of Battle' > 'Import Order of Battle'.
  - Select desired OOB and click 'Open'.
  - Click 'Import All' for all members, or drag select members to the Order of Battle Panel.

**Entity-Level Unit Modeling:**

- **Unit Organization**: Units organized by unique echelon IDs assigned automatically.
- **Reorganizing Units**:
  - Enabled/disabled manual reorganization upon member destruction.
  - Reassigns echelon IDs to surviving members.
  - Manual reorganization uses 'Reorganize' command without individual designator reassignment.

- **Unit Movement**: Calculates paths for unit leader and members based on formation after movement command.
- **Formation Closure**: Closes up holes in formations when a member is removed.

- **Formation Management:**
  - Units assign unique formation positions to members, each with an internal ID.
  - If members are removed, destroyed, or independently tasked, the unit reassigns formation IDs to active members who fill vacancies.
  - Changing formation position does not affect a member's echelon designator.
  - Formation closing is an automatic, inherent feature of units in VR-Forces that cannot be turned off.

- **Formation vs Reorganization:**
  - Closing formation affects only the relative positioning of members within a unit's formation.
  - Reorganization changes the echelon designators and assigned tasks of unit members.

- **Unit Tasking & Movement:**
  - Units follow plans and can be given independent tasks, communicating with subordinates via radio messages to carry out their roles in tasks (e.g., getting into formation and moving to waypoints).
  - The aggregate warfare model for simulation objects created using AggregateLevel.sms covers:
    - Unit combat: Simulation objects inflict damage on each other until one is destroyed or breaks off combat.
    - Footprints: Represent the area a unit occupies.
    - Posture: Denotes a unit's readiness state (e.g., alert, standby).
    - Movement: Units move based on their plans and tasks assigned.
    - Limited munition attack: Units can have limited ammunition for attacks.
    - Contamination areas: Areas affected by weapons of mass destruction or other contaminants.
    - Sensors: Units can detect and be detected by sensors.
  - Additionally covered:
    - Combat engineering objects (concealed obstacles) creation and management.
    - Logistics: Receiving and providing supplies.
    - Electronic warfare: Jamming communications, radar, sensing electronic emissions.
    - Air combat: Loadouts, missions, fuel use, aerial refueling, air bases.

- **Model Requirements & Limitations:**
  - The aggregate warfare model requires the use of AggregateLevel.sms or a similar SMS and is compatible only with HLA Evolved and MAK FOM extensions.
  - It uses abstract values for combat power, vulnerability, and health to represent relative strengths of different units. A unit's health at 0 indicates its destruction.

- **Aggregate vs Entity Level Scenarios:**
  - *Footprint*: Area occupied by units.
  - *Posture*: Unit's mode of interaction with the environment.
  - *Logistics*: Management of personnel and material resources.
  - *Combat Engineering Objects*: Tactical graphics influencing simulation object movement and health.
  - *Reports*: Data tracked in a simulation, like personnel levels and pacing, sent over the network for command systems and human participants' use.

- **Unit Combat in Aggregate Warfare Model:**
  - *Combat Power*:
    - Function of weapon count, munition size, fire rate, accuracy, and subordinate object effectiveness.
    - Expressed as strength value in domains: Anti-air, Anti-tank, High explosive, Anti-personnel, Anti-ship.
    - Describes attrition rate per second imposed on the target by the attacking unit.

  - *Health*:
    - Function of equipment, personnel amount, and destruction difficulty.
    - Initial health set by SMS designer, independent of other parameters or resource variables.
    - Not computed based on unit's equipment; values not comparable across domains.

  - *Vulnerability*:
    - Susceptibility to weapon categories, describing ease of hitting and killing unit equipment with given weapons.
    - Expressed as a modifier (multiplier) of combat power (attrition rate).

  - *Modifiers*:
    - Posture, MOPP level, sector, morale affect both combat power and vulnerability.

  - *Attrition*:
    - Applied across all domains to simulation object's health based on final attrition rate.
    - Simulation object is killed when health declines to zero.

- **Unit Footprints:**
  - Represent the area occupied by vehicles, personnel, and equipment.
  - Shape: Circular with a configurable radius.
  - Sectors: Four sectors (front, rear, left flank, right flank) with varying vulnerability based on which sector is attacked.

- **Unit Posture:**
  - Describes the unit's positioning, readiness, and state within its footprint.
  - Supported postures:
    - Deliberate-Defense: Planned, prepared; lower mobility/vulnerability, moderate attack power.
    - Hasty-Defense: Reactionary; moderate mobility/vulnerability, lower attack power.
    - Deliberate-Attack: Planned, prepared; moderate mobility/vulnerability, higher attack power.
    - Hasty-Attack: Reactionary; high mobility/vulnerability, lower attack power.
    - Reconnaissance: Mobile; locates and reports on enemy, avoids detection/engagement.
    - Travel: High mobility, vulnerable to attack, low attack power.
    - Rout: Health <50%, under attack; cannot change posture until health >50%.
  - Posture affects:
    - Footprint size
    - Sensing capabilities (e.g., detection range and speed)
    - Sensor signature (detectability by other units)
    - Movement speed
    - Sector sizes
    - Combat power (availability of weapon systems)
    - Vulnerability to attacks
  - Transitions between postures:
    - Take time (up to several hours) to model planning and preparation.
    - Hasty Attack is the only posture with no transition delay.

- **Key Points:**
  - Footprint: Circular area representing unit's physical presence; vulnerable sectors include rear and flanks.
  - Posture: Determines unit's state, affecting various aspects; transitions between postures take time.

- **Unit Postures:**
  - Transitioning between postures is time-consuming.
  - Units can start in a posture or transition to it during simulation.
  - Defense postures assume stationary defense; aircraft and ships generally don't distinguish postures, except for not being battle-ready in Travel posture.

- **Unit Movement:**
  - Speed depends on:
    - Ordered speed
    - Terrain (slope, type)
    - Roads (speed up)
    - Restricted areas (slow down)
    - Rivers/water bodies (stop movement, unless bridges are present)
    - Overlapping footprints
    - MOPP (Mission-Oriented Protective Posture)
    - Posture
  - Maximum speed modifiers only affect movement if ordered speed is less than the net modified maximum speed.
  - Overlapping unit footprints slow down units based on their 'Max Speed Modifier When Overlapping Another Unit' parameter.
  - Aggregate-level scenarios don't support collision avoidance among simulation objects.
  - Terrain features' effects on movement are configured in a unit's movement system.
  - Combat engineering objects can affect entity movement by causing units to move more slowly or damaging them.

- **Combat:**
  - Most aggregate-level combat is automated and continues until a combatant is killed or runs out of ammunition.
  - Limited munition attacks use a specified amount of munitions, then end:
    - Artillery: A specified number of rounds from a battery, delivered over a short time.
    - Large munitions (missiles, bombs): Generally instantaneous attack.
  - Not all missile attacks are modeled as limited munition attacks; some use hit/defense factors to determine hit probability.

- **Contamination Areas:**
  - The aggregate warfare model supports nuclear, biological, and chemical contamination areas (NBC areas) that can damage or impede units.

1. **Contamination Areas:**
   - Created as tactical graphics or by nuclear, biological, or chemical (NBC) weapon systems.
   - Parameters:
     - Agent type: Determines the configuration used for damage calculations.
     - Terrain, Topography, Vegetation types: Informational only; not used by VR-Forces.
   - By default, placed on the Contamination Areas overlay.

2. **Units & NBC Areas:**
   - Units attacked by NBC weapons or entering NBC areas:
     - Suffer attrition and stop current task.
     - Increase Mission-Oriented Protective Posture (MOPP) level until attrition stops.
     - Resume task, but contamination persists.
   - If moving and detects an NBC hazard area in path:
     - Stops moving and increases MOPP level to pass through without suffering attrition.

3. **Increasing MOPP Level:**
   - Affects unit speed, combat effectiveness, sensor sensitivity, posture transition time, and vulnerability.
   - Some contamination types cause little or no damage; others like gamma rays cause attrition even at the highest MOPP level.

4. **Unit Sensors (Aggregate-Level):**
   - Use a different detection mechanism than entity-level simulation objects.
   - Perform three checks: one from the center of the outer ring and two from the edges of the circumference of the footprint.

5. **Combat Engineering Objects (CEOs):**
   - Affect unit movement, can damage or protect units, displayed as tactical graphics.
   - Created via Create Object Palette or by units responding to tasks.
   - Units counter CEOs by breaching, bridging, defusing, or destroying them.
   - Effects on units: Decrease mobility based on object type and completion percentage. Mobility modifiers are configured by mobility type.

- **Modifiers** affect only a unit's maximum speed:
  - Only active if modified max speed < current speed.

- **Obstacle Encounters**:
  - Units stop moving and send console messages (with Q&A interaction) awaiting user instruction.
  - Concealed obstacles don't halt units; they have a random chance of being detected by sensors.

- **Engineering Objects** affect units with various modifiers:
  - **Mobility**: Treated as terrain features, enabling/disabling path planning options (on/off).
  - **Vulnerability**: Reduces damage taken based on weapon type and object completion percentage.
  - **Visibility**: Increases/decreases visibility to opposing units based on object completion percentage.
  - **Attrition**:
    - Over time: Causes continuous damage, scaled by object completion percentage.
    - Immediate: Causes one-time damage, usually destroying the object.

- Modifiers are configured for each Construction Engineering Object (CEO) in the Simulation Object Editor.

- **Concealed Obstacles**:
  - Default concealment: Minefields, booby traps, unexploded ordnance.
  - Sensor detection: Random chance, configurable.
  - Detected minefields become always detectable.
  - Units don't stop for non-friendly, concealed obstacles unless specifically detected.

- **Sensor Detection:** Units may collide with undetected objects without warning.

- **Object Discovery:** Concealed objects are revealed upon causing damage to simulation objects.

- **Combat Engineering Objects (CEOs):**
  - Created via Create Object Palette or tasked to units with relevant systems.
  - Implemented as points, lines, or areas; most areal CEOs have a fixed, configurable size.
  - Placed on the 'CEO' layer for distinction from tactical graphics, which don't impact unit movement/combat.

- **Engineering Units & CEO Creation:**
  - Units consume construction material (rate set in object's model) to build CEOs.
  - Progress tracked via unit supplies or object completion percentage.
  - Units create CEOs by moving within range, starting construction, and ending task upon completion or material depletion.
  - Interrupted units notify objects about halted construction; stopped objects retain current completion level.
  - Damaged units may reduce construction rate. Multiple units can collaborate on a single object.

**Key Points Added:**
- None

- **Tasking Additional Units:**
  - Task a second unit to assist the first by improving the object under construction.
  - Set the completion percentage of a combat engineering object using the 'Percent Complete' data request.

- **Logistics:**
  - Simulation objects consume resources over time, including fuel, ammunition, and food.
  - Logistics involves resupplying units with various resources:
    - Health
    - Food
    - Water
    - Motor gas
    - Aviation fuel
    - Diesel fuel
    - Oil
    - Lubricant
    - Different types of ammunition (Anti-Tank, High-Explosive, Anti-Personnel, Anti-Air, Anti-Ship, Large-Munition)
    - Other supplies (engineering materials, etc.)
  - The Supplies page on the Information dialog box indicates when a simulation object is receiving or providing supplies.
  - Supply lines can be displayed to show supply units supplying others.

- **Receiving Supplies:**
  - Units can receive supplies by:
    - Taking them from a friendly supply unit within range and with available supplies.
    - Auto-resupplying continuously at a configurable rate.
    - Auto-resupplying periodically at specified intervals.
    - Refueling (air units from tanker units).
  - Resupply may be restricted if the simulation object is moving, attacking, or defending.
  - Airplanes can only receive fuel while airborne.

- **Providing Supplies:**
  - Simulation objects with a resupply system can provide supplies to others.
  - A supply unit can provide any supported supply to multiple other units and never runs out of its own source.
  - Supply units run a background process to notify friendly units within range that they can provide supplies, checking for conditions preventing resupply, and stopping if the recipient moves out of range.

- **Electronic Warfare:**
  - The aggregate warfare model supports three types of electronic warfare:
    - Communications jamming
    - Radar jamming
    - Sensing electronic emissions
  - Each unit has EW-Comms-Dependence and EW-Defense-Strength properties.

1. **Communication Jamming:**
   - *Dependence*: Measures the impact of jamming on a unit's communications.
   - *Defense Factor*: Indicates how well a unit's technology and practices protect against jamming.
   - Units track incoming jamming attacks and calculate a net EW-Comms-Degradation-Percentage.
   - Jamming reduces combat power, increases vulnerability, and can double posture change time.
   - Aggregate-comms-jammer system:
     - Strength falls off with 1/r� (r is range in kilometers).
     - Can be enabled/disabled using an emitter.
     - Triggers EW attacks when enabled and within allowed postures.

2. **Jamming Radar:**
   - Each unit has a Radar-Jamming-Strength-Receiving property, updated by the Update_EW_Degradation script.
   - Effects of radar jamming include:
     - Reduced sensitivity of radar sensors (cannot detect targets).
     - Reduced hit factor of radar-homing missiles (smaller hit probability).

3. **Weapon Systems Affected by Radar Jamming:**
   - Weapon systems with 'aggregateReleaseBombControllerDescriptor' can be affected, including:
     - Anti-air, anti-ship, land attack missiles.
     - Release bombs and unguided bombs.

4. **Jamming Defense Factor and Guidance Systems:**
   - Weapon systems have a 'jamming-defense-factor' to mitigate radar jamming effects if they are configured as 'can-be-radar-jammed'.
   - Examples of guidance systems:
     - Anti-air: Variable (IR or radar-homing).
     - Anti-ship: Always radar-guided.
     - Land attack: Variable.

- **Electronic Warfare (EW):**
  - Release-bomb and unguided bomb omit parameters with default false to simulate optical guidance.
  - Aggregate-radar-jammer system can be controlled using Emitter set data request, enabling the EW_Attack script.
  - Radar jammer strength decreases with distance (1/r�, where r is range in kilometers).
  - EA-18G entity is equipped with a radar jamming system.

- **Sensing Electronic Emissions:**
  - Simulation objects detect RF electromagnetic emissions using an emission sensor domain and SIGINT sensors.
  - Each object has an emissions signature, which can be modified by specific emitters' status and the 'jam-strength-factor' parameter set in platform files.
  - MI PLT unit is configured with a SIGINT Sensor for detecting these emissions.

- **Air Combat:**
  - Engagements use a limited munitions attack model, firing one munition at a time and calculating hits based on hit-factor vs. defense factor.
  - Aircraft units represent one or more aircraft; damage is calculated against the primary equipment (usually the airframe).
  - Loadout determines unit's effectiveness in attacks by specifying equipment and weapons for the aircraft.
  - Engagement rules consider:
    - Sensor capabilities: sensor range, sensitivity, and target signature determine detection and engagement ranges.
    - Weapon type: weapon types affect maximum engagement range, hit factor, and total damage done.
    - Tactical Data Link: equipped units receive a defense factor bonus.
    - Number of aircraft: defending units get a combat maneuvers bonus to their defense factor; attacking units fire more missiles in shorter intervals with larger numbers.

1. **Aircraft Bonus System:**
   - Based on current number of aircraft in the unit.
     - Reduced if some aircraft are destroyed during combat.
   - Battle management support:
     - Attacking unit receives hit-factor bonus with active spot-report data from other units.
     - Defending unit receives defense-factor bonus with active spot reports on attacking entity.

2. **AWACS Unit:**
   - Configured with long-range radar.
   - Provides spot report tactical data to other aircraft units for beyond-sensor-range engagements.

3. **Aircraft Loadouts:**
   - Defined in the Simulation Object Editor's Combat tab for each aircraft type.
     - Specify quantity of weapons and equipment, including:
       - Weapons: determine attack effectiveness.
       - Fuel tanks: increase aircraft range.
       - Jammer pods: increase defense against radar-guided weapons.
   - One loadout can be marked as default.

4. **Air Missions:**
   - Abstract command objects linking aircraft for flight.
   - Attributes:
     - Name (call sign).
     - List of base aircraft in mission.
     - Aircraft loadout.
     - Target launch time.
     - Time to start preparing for launch (computed from target launch time and preparation estimate).
     - Simulation object type for the air unit created for this flight.
   - Carried out by aircraft units:
     - Single unit: represents multiple aircraft.
     - Multiple units: consist of single units and a mission superior managing them.
   - Created through initial scenario laydown, runtime plans/players/instructors, or launched by air bases.
   - Mission orders issued to the unit (single) or mission superior (multiple).
   - Units deleted upon landing; mission status reported before deletion.

5. **Fuel Use and Aerial Refueling:**
   - Fuel is a supply configured in the Simulation Object Editor's Supplies tab and consumed based on aircraft activity.

- **Fuel Consumption:**
  - Air units consume fuel based on their altitude and speed.
  - In holding patterns, fuel use is calculated at default speeds.
  - VR-Forces interpolates values for altitudes and speeds that fall between configured ones.

- **Tankers:**
  - Fuel available for refueling equals the tanker's own fuel consumption.
  - Refueling transfers aviation fuel supplies from the tanker to the receiving aircraft.

- **Aerial Refueling Systems:**
  - Aircraft with aerial refueling systems can refuel others using boom, drogue, or combination systems.
  - Receiving aircraft must have a compatible refueling system.
  - Systems are assigned on the Additional Systems tab in the SOE (Simulation Object Editor).

- **Refueling Missions:**
  - Air units task to refuel from tankers using the 'Refuel from Tanker' task.
  - Tankers provide fuel upon receiving the 'Refueling Mission' task, servicing aircraft until their fuel level falls below a configurable threshold.
  - Refueling coordination occurs via text radio messages between the tanker and refueling aircraft.
    - The aircraft unit initiates a request, stating its system type and required fuel amount.
    - The tanker accepts or rejects the request based on refueling system compatibility and available fuel.
    - Once connected, supply transfer messages are sent to the refueling aircraft periodically, reducing corresponding aviation fuel resources in the tanker.
  - The transfer rate depends on both the tanker's and aircraft's transfer rates, as well as the number of available lines/drogues.

- **Multiple Refueling Requests:**
  - Tankers coordinate with and refuel multiple requesting aircraft one at a time.

- **Air Bases and Air Missions:**
  - Air bases are special entities that manage air missions using background processes (Manage Air Base) and various tasks and set data requests.
  - They represent aprons, which are ground areas used for aircraft parking and servicing.

- **Aircraft Management:**
  - Aircraft wait on the apron for assignments to missions, repairs, or hangar storage.
  - Aprons, hangars, and Operational Readiness Platforms (ORP) have maximum aircraft capacities.
  - Damaged aircraft are moved to hangars for repair; healthy ones taxi on runways before takeoff.
  - Air bases track grounded aircraft; airborne ones are removed from records upon takeoff.

- **Aircraft Attributes:**
  - Type (equipment name), health percentage, number of munitions loaded, and location on the air base.
  - States: Available (100% health), Assigned (preparing for mission), In Repair (health < 100%), QRA (Quick Reaction Alert).

- **Crews:**
  - Each aircraft requires one air crew; crews can be available or assigned to missions.
  - Ground crew personnel repair, fuel, and arm aircraft, with states: Available, In-Hangar (repairing), On-Apron (fueling/arming).

- **Resources:**
  - Single type of fuel for all aircraft.
  - Munitions aggregated into a single count; quantity deducted upon mission assignment and loadout.
  - Runways have length and heading; length determines if an aircraft can land at the air base.

- **Air Base Setup:**
  - Resources set via "Assign Aircraft", "Facilities", and "Personnel and Supplies" data requests.

- **Mission Preparation:**
  - Air base process handles pending missions by estimating preparation time and setting a start time for launch to meet desired takeoff time.

1. **Preparation Phase:**
   - Ground crew is assigned to the aircraft.
   - **Concurrent Tasks:**
     - Fueling: Depends on fuel volume and includes a setup time.
     - Arming: Constant time, independent of loadout.
     - Aircrew Preparation: Constant time, independent of aircraft type.
   - Ground crew becomes available once all tasks are complete.

2. **Takeoff:**
   - Aircraft taxi onto the runway when ready.
   - Air unit is created; flight count at air base decreases.

3. **Air Base Parameters (Manage Air Base script):**
   - Ground crew size for fueling and arming aircraft.
   - Times: Arming, refueling setup, fuel transfer, aircrew preparation, taxi, takeoff.
   - Fuel transfer rate.

4. **Landing:**
   - Incoming air units request landing based on runway needs.
   - Air base checks availability and runway length before granting permission.
   - Upon landing:
     - Aircraft added to air base list with status (available or in-repair).
     - Fuel, munitions updated; apron count increments.

5. **Repairing Aircraft:**
   - Damaged aircraft moved to hangar for repair if space and ground crew available.
   - Repair rate proportional to assigned ground crew.
   - Once repaired (100% health), ground crew becomes available, and aircraft returns to apron.

6. **AirBase.ope Parameters:**
   - Repair rate (% repair / ground crew / second).
   - Maximum ground crew assignable per aircraft.

- **Quick Reaction Alert (QRA) Status:**
  - Aircraft prepare for takeoff, taxiing to Operational Readiness Platform (ORP).
  - Ordered to intercept targets when required.
  - Returned to unprepared status after some time.
  - Quick reaction capability level can be specified.
  - Assigned and launched using "Prepare QRA" and "Launch QRA Aircraft" tasks.

- **Unit Creation and Management:**
  - Units created by combining existing simulation objects (entities or units) or placing preconfigured units from the Create Object Palette.
  - Newly created units are force-level subordinates, not other units' subordinates.
  - Unit order determines unit leader, echelon IDs, and icon representation.
  - Non-VR-Forces entities can be included in units for display purposes but won't respond to VR-Forces actions like tasks or set data requests.
  - Procedures apply to both entity-level and aggregate-level scenarios.

- **Creating Units (Aggregate As):**
  - Choose a unit type from the list (Convoy for miscellaneous ground vehicles).
  - Optionally, customize the entity type enumeration for the selected unit.
  - Change the order of subordinates using up/down arrows.
  - Confirm creation by clicking OK.

- **Creating Higher Echelon Units in Aggregate-Level Scenarios:**
  - Combine entities and units as in entity-level scenarios.
  - Utilize preconfigured units from EntityLevel.sms or AggregateLevel.sms, editable via Simulation Object Editor.

- **Selecting a Unit:**
  - Select its icon on the terrain or within Objects List Panel views.

- **Adding/Removing Simulation Objects to/from a Unit:**
  - Drag and drop objects onto/off the unit in the Objects List View.
  - The object's name remains unchanged, but its echelon ID is updated.
  - Use Superior set data request for adding/removing objects (refer to "36.79. Superior" on page 874).

- **Removing a Simulation Object from a Unit:**
  - Select the object within the unit.
  - Choose "Objects" > "Remove".

- **Deleting a Unit:**
  - Deletes the entire unit and all its members.
  - Select the unit.
  - Choose "Objects" > "Delete".

- **Selecting Units:**
  - Select the unit icon, not individual members.
  - Can be done via Objects List View if expanded.

- **Expanding and Collapsing Units:**
  - Expanded: Shows all members as individual entities or units. Unit icon hidden.
  - Collapsed: Displays as one icon.
  - Expand/Collapse:
    - Single unit: Select unit > "Objects" > "Unit" > "Expand/Expand All/Collapse".
    - All units: Use "Collapse All".

- **Displaying Ghosted Icons and Unit Bounding Volumes:**
  - Ghosted icons show inactive or deleted units.
  - Bounding volumes outline units, color scheme can be specified.

- **Collapsing Units:**
  - Select any member of a unit.
  - Choose "Objects > Unit > Collapse All".
  - Use "Collapse All" button on Aggregate Display Toolbar for all units.

- **Expanding/Collapsing All Units:**
  - Use "Expand All" or "Collapse All" buttons on Aggregate Display Toolbar.
  - Newly added units maintain their default state after using these buttons.

- **Displaying Ghosted Icons (for hidden simulation objects):**
  - Configure in "Settings > Display" under "Unit Display Settings".
  - Options include:
    - Show ghosted icons for all levels or specific echelon levels.
    - Allow selection of ghosted icons (2D only).
    - Display labels for ghosted objects (2D only).
  - Use Aggregate Display Toolbar's "Show/Hide Ghosted" icon to enable/display ghosted icons.

- **Displaying Unit Icons and Bounding Volumes:**
  - Configure when to display unit icons and translucent bounding volumes showing unit extents.
  - Enable/disable unit display in settings.

- **Unit Display Control:**
  - Disabled: Shows only leaf level unit members' icons/models.
  - Bounding Volumes:
    - Enable/Disable display (for collapsed units).
    - Restrict display to selected units.
  - Unit Icons in 3D Observer Modes: Enable/Disable.

- **Configuration:**
  - Display Settings > Unit Display Settings:
    - Show/Hide Units.
    - Show Bounding Volumes (for collapsed units).
    - Restrict Bounding Volumes to Selected Units.
    - Show Aggregate Icon in 3D Only.

- **Color Scheme for Unit Bounding Volumes:**
  - Choose between Primary Colors or MIL-STD colors.

- **Tasks:**
  - Simulation objects execute various movement and tactical tasks via plans, Task menu, or Command Panel.
  - Independent Tasks (outside of a plan):
    - Interrupt current tasks based on mutual exclusivity rules.
    - Abandon the rest of the plan if assigned to a unit with one.

VR-Forces offers several types of tasks that can be assigned to simulation objects:

1. **C++ Tasks:**
   - Implemented in C++, not editable by end-users.
   - Examples include tasks like consuming or receiving supplies, calculating a unit's footprint.

2. **Scripted Tasks (Lua):**
   - Editable and new ones can be written using Lua scripts.
   - Details on creating scripted tasks are provided in "Chapter 32".
   - Includes two special types:
     - **Reactive Tasks:** Monitor the simulation, run only when certain conditions are met. More info in "25.3".
       - Used for tasks that should only occur under specific circumstances.
     - **Background Processes:** Run continuously to handle ongoing aggregate-level activities. Details in "33.11".
       - Examples include automatically attacking opposing forces or calculating a unit's footprint.

Tasks can be assigned to simulation objects in various ways:
- As part of their plan, a global plan, or independently using task procedures.
- Tasks cannot be assigned to non-VR-Forces simulation objects but can use them as parameters (e.g., follow or target a remote object).

This chapter provides an overview; detailed procedures are found in subsequent chapters.

Key points covered include:
- **Assigning Tasks:**
  - Using the command panel and task procedures.
  - Executing concurrent tasks, identifying eligible simulation objects, and escaping the task assignment process.
  - Specifying task parameters, viewing task status, filtering object selection lists, and skipping (stopping) a task.

- **Special Considerations:**
  - For units: Convoy tasks, independently tasking unit members.
  - For reactive tasks: Enabling/disabling, setting priority, managing and canceling tasks.
  - Using behavior sets to manage scripts.
  - Entity movement on roads/off roads, including road driving behavior and specifying the side of the road to drive on.
  - Fixed-wing and rotary-wing entity tasks and behaviors.
  - Suppressive fire tasks and configuring task execution rules.

The Command Panel in VR Forces is a centralized hub for managing simulation objects' tasks and settings, displaying relevant information, and offering categorized menus for easy navigation. Key points include:

1. **Accessing and Customizing the Command Panel:**
   - Open/close: View > Command Panel
   - Populate: Select an object in any observer mode or Objects List
   - Display options:
     - Stars next to tasks/sets: Make favorites always visible
     - Stars, 1, 2, or 3 at bottom: Display favorites, most common, advanced, or detailed commands
     - Magic wand: Display unrealistic options (e.g., Set Location)

2. **Assigning Tasks:**
   - Click commands to open task dialog boxes
   - Launch/access plans using the plan icon
   - Task procedures:
     - General information: See following subsections
     - Specific tasks: Refer to respective chapters (e.g., Chapters 26-30)
   - Additional tasks available on context-sensitive menus and panels

3. **Task Types:**
   - Basic tasks: Developed using VR Forces Toolkit and C++ API (C++ tasks)
   - Custom tasks: Added by system integrators using the C++ API
   - Scripted tasks: Another type of task, distinct from C++ tasks

1. **Scripted Tasks:**
   - Written in Lua, use lower-level C++ tasks and VR-Forces Lua API.
   - Appear as regular tasks to end-users.
   - Include:
     - Reactive tasks: execute when a condition becomes true.
     - Background processes: run continuously.

2. **Task Execution:**
   - Some tasks can run simultaneously; others are mutually exclusive.
   - Mutually exclusive tasks interrupt and abandon the current task upon assignment.
   - C++ tasks are grouped (Weapon, Movement, Radio, Depth control), with mutual exclusivity within groups.

3. **Scripted Task Configuration:**
   - Can specify conflicting task groups during creation for better organization and control.

4. **Task Confirmation Prompt:**
   - VR-Forces prompts before overriding tasks or plans to prevent accidental interruptions.
   - Prompt can be enabled/disabled in Application Settings > GUI Settings page.

5. **Identifying Compatible Simulation Objects:**
   - Task compatibility varies:
     - Some tasks apply broadly (e.g., Radio, basic movement).
     - Others are specific to certain platforms or entity types.
   - Check task documentation for detailed compatibility information.

- **Task Execution by Simulation Objects:**
  - Tasks can be executed based on available systems, not just entity type.
  - Check 'Simulation Object Editor' or 'VR-Forces Entity Model Catalog' to see supported systems and tasks.

- **Assigning Tasks:**
  - Escape task assignment process using 'Cancel' in task parameters.
  - Specify task parameters via:
    - Fields
    - Dialog boxes
    - Tactical graphics
    - Simulation object selection on terrain
  - Some tasks require selecting multiple objects from different lists. Active list is indicated by:
    - White rectangle around the list
    - Button next to the selection box

- **Viewing Task Status:**
  - Current task and reactive task states are listed in the 'Information' dialog box of a simulation object's summary section.

- **Monitoring Simulation Object Tasks:**
  - View current task:
    - Plan window (Figure 219)
    - Last Selected Object Panel
    - Information dialog's Tasks page
  - Filter object selection lists for easier navigation when assigning tasks:
    - 'Follow Entity' task: All simulation objects, individual ones, units only, friendly or opposing.
    - 'Move To' task: Waypoints, friendly or opposing simulation objects.

- **Stopping a Task:**
  - Use "Skip Task" to halt current task; moves to next task or waits for orders if no more tasks exist.
  - Stop tasks via Information dialog's Task Status page (see "25.3.5 Canceling a Reactive Task").

- **Assigning Tasks to Units:**
  - Select unit and assign task like any individual entity.

- **Convoy Tasks:**
  - 'Convoy Along' and 'Convoy To' tasks: Exclusive to ground vehicle units.
  - Unit organization: Columns based on echelon IDs, maintain consistent distance (configurable).
  - Inappropriate units (e.g., rotary-wing) cannot use convoy tasks.

- **Independently Tasking Unit Members:**
  - Unit members can have individual plans or be assigned independent tasks.
  - After completing an independent task, a unit member automatically becomes tasked by its superior.

- **Override Independent Tasking:** You can override an independently tasked subordinate's behavior by setting its 'tasked-by-superior-upon-task-complete' parameter to False.

- **Skip Task Command:** An independently tasked subordinate remains in that state until it completes a task or receives a 'Set Tasked by Superior' command. It doesn't execute the current task when tasked by its superior; instead, it receives the next task sent out by the unit.

- **Reactive Tasks:**
  - **Activation & Priority:** Reactive tasks monitor simulation events and execute based on scripted conditions. They can be enabled/disabled individually or for a category of objects. Priority determines which reactive task executes first.
  - **Behavior:** When activated, they suspend the current task. Upon completion, the previous task resumes if possible. They support concurrency and can be interrupted by higher-priority tasks. Users can change their priority during runtime.
  - **Parameters & Cancellation:** Reactive tasks have parameters; unset parameters may cause unexpected behavior. Active reactive tasks can be canceled by users. After completion, they enter an enabled state and can be triggered again.
  - **Status Display:** The status of active/reactive/suspended tasks displays on the 'Tasks' page of the Information dialog box.

- **Task Interruption:** If a non-concurrent independent task is assigned while a reactive task is executing, all suspended tasks (including the reactive one) are canceled, and the new task executes. However, it can still be interrupted by another reactive task.

**Additional Points:**

- **Reactive Task Nesting:** Multiple nesting of reactive tasks is permitted based on priority.
- **Task Cancellation upon Non-Reactive Assignment:** If a non-concurrent independent task assignment occurs from the Task menu, Command Panel, or a global plan while a reactive task is executing, all suspended tasks (including the reactive one) are canceled.

VR-Forces includes **reactive tasks**, which are scripts triggered by specific events during simulation. Here's how to manage them:

1. **Enabling Reactive Tasks:**
   - Select the desired simulation object.
   - Go to `Set > Reactive Tasks > Enable`.
   - Choose the task in the 'Enable Reactive Task' dialog box, enter parameters if required, and click OK.

2. **Disabling Reactive Tasks:**
   - Select the simulation object.
   - Go to `Set > Reactive Tasks > Disable`.
   - Choose the task in the 'Disable Reactive Task' dialog box and click OK.

3. **Setting Priority of a Reactive Task:**
   - Select the simulation object.
   - Change priority via `Set > Reactive Tasks` (specific option not mentioned).
   - Priorities are integers, with 1 being the highest.

For detailed information on writing and configuring reactive tasks, refer to "Chapter 33. Writing Scripts" starting on page 755. To manage tasks in bulk, use the 'Manage Reactive Tasks' dialog box (see "25.3.4 Managing Reactive Tasks").

1. **Changing Priority of a Single Reactive Task:**
   - Select the desired simulation object.
   - Navigate to `Set > Reactive Tasks > Priority`.
   - In the dialog box:
     - Choose the reactive task from the list.
     - Select a new priority (lower numbers indicate higher priority).
     - Click 'OK' to apply changes.

2. **Managing Multiple Reactive Tasks:**
   - Select the simulation object.
   - Access the `Manage Reactive Task` dialog box via:
     - `Set > Reactive Tasks > Manage`, or
     - `Objects > Manage Reactive Tasks`.
   - For each task listed in the dialog box:
     - Enable/disable using the options in the 'Enabled' column.
     - Change priority by selecting an option in the 'Priority' column.
     - Set parameters (if applicable) for enabled tasks by clicking 'Parameters'.
   - Click 'OK' to save changes.

3. **Canceling a Reactive Task:**
   - Select the simulation object.
   - Open the `Information` dialog box via:
     - `Objects > Information`, or
     - Pressing 'I'.
   - Go to the 'Tasks' page, where active tasks are listed with a 'Cancel' button/option.
   - Right-click on the active task and choose 'Cancel Reactive Task', or click the 'Cancel' button.

- **Challenge:** Managing infantry scripts based on terrain (rural vs urban) for different reactions to attacks.
- **Workarounds without Behavior Sets:**
  - User awareness: Inform users not to use unsuitable tasks.
  - Pre-scenario setup: Enable/disable correct tasks in the Scripts dialog box before starting a scenario.
  - Per-object management: Enable/disable tasks individually for each simulation object in the Manage Reactive Tasks dialog box.
- **Behavior Sets Solution:**
  - Create separate behavior sets for rural and urban operations.
  - Assign relevant scripts to each behavior set.
  - Before running a scenario, select the desired behavior set for the force, enabling its tasks and disabling others.

**Behavior Set Management:**
- Access 'Edit Behavior Sets' dialog box via Simulation > Behavior Sets.
- **Create:** Click 'Add', enter name, choose scripts using left-facing arrow, optionally assign to a force.
- **Edit:** Expand behavior set, add/remove scripts using arrow buttons. Rename or delete by selecting and clicking respective buttons.

**Assigning Behavior Set to Force:**
- Open 'Edit Behavior Sets' dialog box.
- In 'Assign Behavior Set to Force' window, select the desired force and behavior set.

- **Ground Vehicles' Movement:**
  - Use different tasks for road and off-road movement.
    - Road driving tasks:
      - Move to Waypoint (Plan Along Roads)
      - Move to Location (Plan Along Roads)
    - Generic movement tasks:
      - Move to Location
      - Move to Waypoint
    - Road driving tasks are exclusive to ground vehicles.

- **Movement Behavior:**
  - **Generic Move To task:**
    - Moves directly towards destination.
    - Uses navigation data if available.
    - Avoids obstacles and considers terrain for passability (soil types, steepness).
  - **Plan Along Roads task:**
    - Finds nearest road point.
    - Moves along the road network to the nearest point to final destination.
    - Moves to the final destination.
    - Requires connected road vectors.

- **Road Driving Behavior (Move To (Plan Along Roads) tasks):**
  - Vehicles:
    - Clamp to roads and drive around corners accurately.
    - Ignore near obstacles that don't block the road.
    - Pass blocking vehicles in adjacent lanes.
    - Do not respond to craters.
    - Only respond to road-blocking obstacles.

- **Bridge Destruction:** Road vectors remain, vehicles drive across the terrain that the bridge previously spanned.

- **Driving Side Preference:**
  - Default: Drive on the right side of the road.
  - Can be changed to left before loading a scenario or rewinding it.

- **Scenario Rewind & Settings:**
  - Changing settings after rewinding a scenario or during runtime doesn't immediately affect behavior; changes take effect on the next rewind.
  - To specify driving side (left/right):
    - Go to Application > Entity Behavior Settings.
    - Select/clear the "Drive on the Left Side of the Road" checkbox.

- **Fixed-Wing Entities:**
  - Newly created entities start on the ground. Set altitude at scenario start for in-air beginning:
    - Entities loiter at specified altitude until given a new task.
  - Entity movement differs based on task type:
    - 'Fly' tasks (Altitude, Heading, etc.) move airborne entities only; not used for takeoff/landing.
      - Entities move to new altitude at specified heading and climb/descent rate.
      - After reaching new altitude, entities continue flying at current heading.
    - 'Move'/'Patrol' tasks:
      - Grounded entities taxi.
      - Airborne entities loiter upon arrival at point or route end.
  - Change altitude explicitly or implicitly:
    - Explicit: Altitude set data request, Move to Altitude task, Fly Altitude task.
    - Implicit: Via Move/Patrol tasks with different target altitudes.

- **Task Assignment:**
  - Use 'Fly' tasks for heading/altitude changes while airborne and not executing Move/Patrol tasks.
  - Use 'Move' or 'Patrol' tasks for entity movement to specific locations/routes.

- **Altitude Specification**: VR-Forces uses the entity's current altitude if no non-zero altitude is specified in the task dialog box to prevent crashes.

- **Fixed-Wing Movement**:
  - On Ground:
    - Taxis to the given point or vertex.
  - In Air:
    - Flies to the given point or vertex.
    - Takes off towards the point/vertex if the next waypoint is above ground level.
    - Crashes if tasked to move to a ground point while in air.

- **Route Following**: Fixed-wing entities maintain altitude and ascend when terrain blocks the path, avoiding underground route segments. They look ahead a configured distance for potential obstacles.

- **Takeoff**:
  - Entities take off by moving towards an above-ground waypoint or vertex, orienting directly towards it, and accelerating until they reach minimum lift speed.
  - Takeoff distance can be controlled using the 'max-thrust' parameter.
  - Entities halt if the takeoff slope exceeds the 'max-slope' parameter.
  - Users are responsible for ensuring proper orientation towards the runway.
  - During route following, entities take off as soon as possible when detecting an upcoming above-ground waypoint.

- **Fixed-Wing Entities Landing:**
  - **Automated Tasks:** Use tasks like "Land On Runway" for automated approach and landing setup.
  - **Manual Setup:** Create vertices before the runway to ensure safe deceleration and alignment with it.
  - **Landing Conditions:** Entities attempt to land when within 10 meters of the ground and moving at less than 10% of their minimum lift speed.

- **Rotary-Wing Entities Behaviors:**
  - **Idle State:** Hover in place if not assigned a task or after completing one.
  - **Terrain Interaction (terrain-check parameter):**
    - **False:** Ignore terrain, may appear below ground level; improves performance.
    - **True:** Interact with terrain, land at low speeds (<3 m/s), crash at higher speeds.
  - **Task Location Altitude:** Defaults to entity's current altitude or zero if not specified in the task dialog box.

- **Terrain Avoidance Logic:**
  - Maintains safe distance above ground.
  - Doesn't anticipate terrain changes ahead.
  - Crash risk if terrain rises suddenly (e.g., hills, buildings).
  - Check for intersections using terrain profile.

- **Fuel Consumption Calculation:**
  - Rotary-wing aircraft consider wind resistance and total weight (including embarked objects).

- **Aircraft Movement with Power Plant Off:**
  - Rotors spin up before aircraft moves.
  - Aircraft remains stationary until rotors reach full speed.

- **Suppressive Fire Tasks:**
  - Two tasks: fire at object or location, targeting one meter above terrain.
  - Line of sight not required for suppressive fire execution.
  - Suppression value decays over time with three suppression levels (0-3).
  - Suppressed entities may experience:
    - Reduced sensor sensitivity.
    - Disabled guns.
    - Forced crouching or prone posture.

- **Lifeform Suppression System:**
  - Enables reactive behaviors when an entity is suppressed.

- **Entity Reactions to Suppression:**
  - Level 1: Adopts crouching posture, allowing other movements.
  - Level 2 or 3: Goes prone, interrupting ongoing tasks; restores original posture upon recovery.

- **Suppression System Parameters:**
  - `suppression-insult-level`: Threshold for suppression based on munition damage.
  - `suppression-recovery-time`: Time to recover from suppression levels.
  - `passing-rounds-suppress`: Enables/disables consideration of passing rounds (default: true).
  - `max-detonation-distance-for-passing-rounds`: Maximum distance for detecting detonations.
  - `hostile-fire-only`: Only considers hostile fire as insults (default: true).

- **Damage Model Parameters:**
  - `suppression-detonation-insult`: Maximum insult caused by a munition's detonation.
  - `suppression-detonation-range`: Munition's effective range.

- **Weapon Susceptibility:**
  - Handheld weapons and selectable vehicle guns can be suppressed (set in Simulation Object Editor).

- **Sensor Performance:**
  - Suppression degrades sensor performance, with the degree settable.

- **Sensor Suppression Factor:**
  - Range: 0 to 1.0
  - 0 indicates no suppression, 1.0 means sensitivity is reduced to zero.
  - Adjustable in the Simulation Object Editor.

- **Task Execution Rules:**
  - Each OPE file contains a 'task-execution-rules' parameter specifying a rule configuration file (default: './data/simulationModelSets/<model_set>/vrfSim/taskRules/default-task-rules.tsk').
  - Rules dictate if tasks can run concurrently and which tasks are mutually exclusive.
  - Parameters:
    - `all-tasks-exclusive`: Enables/Disables concurrent task execution. When true, only one task runs at a time.
    - `mutually-exclusive-task-groups`: A list of groups containing tasks that cannot run simultaneously.

- **Scripted Task Concurrency:**
  - Action categories in 'actionCategories.tsk' enforce concurrency for scripted tasks.
  - They combine with tasks from 'default-task-rules.tsk' to form the complete set of mutually exclusive tasks.

- **Movement Tasks:**
  - VR-Forces provides movement tasks for entity-level scenarios, some also used in aggregate-level and human-specific scenarios (Chapter 28).
  - Models with wheels/treads can rotate them relative to their speed and articulate wheels during turns.

The text describes various movement tasks for entities in VR-Forces and how to assign them using the Entity Control Panel.

**Movement Tasks:**
- **Fly Heading and Altitude:** Maintain a specific heading or altitude.
  - Fly Loiter Pattern: Hover in a circular pattern at a specified location.
  - Follow Entity: Track another entity's movements.
  - Hover, Keep Station, Land (Vertical): Various movement tasks for entities.
- **General Movement Tasks:**
  - Move Along Route (with/without actions), to Altitude, Bullseye Offset, Depth, Location, Waypoint; Orbit, Patrol Area, Route, Pattern Hold.
  - Refuel From, Return To Base: Specific tasks related to refueling and returning to base.
  - Rotary Wing Airlift, Land, Retrieve, Unload Cargo: Tasks specific to rotary-wing aircraft carrying cargo.
  - Sail Heading: Maintain a specific heading for surface watercraft or submarines.
  - Search and Rescue (Creeping Line, Expanding Square, Parallel Patterns): Patterns used in search and rescue missions.
  - Sweep Naval Mines: Task to clear naval mines from an area.
  - Takeoff On Route, Runway, or Vertical: Tasks related to taking off from different surfaces or vertically.
  - Turn to Heading, Zig-Zag to Heading: Tasks to change the entity's heading.

**Entity Control Panel:**
- Assign tasks such as Fly Heading and Altitude, Sail Heading, Move to Depth, Set Ordered Speed using this panel.
- Changing altitude or heading issues a new movement task, stopping current tasks.
- Single-click for normal speed changes; double-click for emergency maneuvers (faster than normal).

- **Entity Control Panel:**
  - Displays identical information for all entity types: ground, lifeforms, aircraft, marine.
  - Values are not editable; used for viewing and assigning movement tasks.
  - Open the panel by:
    - Selecting entities > Choosing 'Objects' > 'Entity Control Panel'.
    - Or clicking 'Show Entity Control Panel' on the Last Selected Object panel.
  - **Movement Controls:**
    - Altitude/Depth: Click line, drag arrow, or type value.
    - Heading: Click compass, drag arrow, type value; double-click for max speed; specify turn direction (L/R).
    - North Type: Toggle between True and Magnetic north below heading text box.
    - Speed: Click line, drag arrow, type value; for aircraft, choose measurement (Ground Speed, TAS, IAS, Mach); not exceeding entity's max speed.

- **Airdrop Along Route:**
  - Aircraft moves along a route/variable and disembarks entities at specified intervals.
  - Entities require a parachute deployment task to exit the aircraft.
  - Assign task by:
    - Selecting an aircraft with embarked entities > Choosing 'Task' > 'Movement' > 'Airdrop Along Route'.
  - Specify wait time between drops, drop route (route or plan variable), and optionally use drop slots for multiple entity exits.

- **Animated Movement:**
  - Assigns a scripted behavior to an entity using the 'Animated Movement' task.

- **Animated Movement:**
  - Create movement file: CSV or ASE format.
  - Configure in Simulation Object Editor (page 1367).
  - Assign:
    - Select entity > Task > Movement > Animated Movement.
    - Options: Filter animations by category, adjust time scale.
  - User responsible for animation suitability.

- **Come to Stop:**
  - Stops surface watercraft using normal, emergency stop, or slow drift.
  - Assign:
    - Select entity > Task > Movement > Come to Stop.
    - Choose stop option.

- **Convoy Tasks (Ground vehicles only):**
  - **Convoy Along:**
    - Move unit along a route in convoy formation.
    - Assign: Select unit > Task > Movement > Convoy Along.
    - Specify route.

  - **Convoy To:**
    - Move unit to waypoint in convoy formation.
    - Assign: Select unit > Task > Movement > Convoy To.
    - Specify waypoint, use roads option (may result in indirect approach).

- **Establish Refueling Station:**
  - Entities with Air Refueling Supplier system can create refueling station for other aircraft.

- **Task:** Establish Refueling Station (Tanker Aircraft)
- **Requirements:**
  - Two waypoints: Air Refueling Control Point (ARCP) & Air Refueling Initial Point (ARIP), max 50km apart.
  - Tanker flies holding pattern at ARCP, waiting for refuel requests.
  - Refueling aircraft sends request 4 minutes from ARIP.

- **Tanker Acceptance/Rejection:**
  - Accepts if:
    - Fuel available
    - Compatible fuel type (identified by SISO entity type)
    - Compatible refuel connection (tanker's system: boom, boom wingtip drogue, wingtip drogue, centerline boom drogue attachment, or multi-point; aircraft's system: receiver boom or drogue)
  - Rejects if:
    - Out of fuel
    - Incompatible fuel type/connections
  - Returns to station if rejected.

- **Refueling Process:**
  - Tanker sends rendezvous details (location and approximate time of arrival) to aircraft.
  - Aircraft adjusts altitude and speed for rendezvous at ARCP waypoint.
  - Once near ARCP, tanker sends refueling location to aircraft.
  - Aircraft moves to that location, and both fly in a straight line.
  - Tanker deploys its air-to-air refueling system; aircraft connects and refuels until nearly full.
  - Aircraft separates from the tanker and moves to the next task in its plan.
  - Tanker returns to refueling station holding pattern and checks for other refuel requests.
  - If another aircraft requested refueling during the first aircraft's refueling, it orbits ARIP waypoint until accepted or rejected.

- **Task Assignment:**
  - Select entity > Task > Movement > Establish Refueling Station.
  - Set:
    - ARCP & ARIP waypoints
    - Heading (degrees, relative to true or magnetic north)
    - Speed
    - Altitude
    - Turn direction
    - Length of time waiting for refuel requests at the station
    - Pattern type: Time (specify length of time per leg) or Distance

- **Distance Pattern:**
  - Specify length and width.

- **Fly Altitude (Fixed/rotary-wing entities):**
  - Ascends/descends to specified altitude at given rate, maintaining current heading and speed.
  - Fixed-wing entities on ground ignore task; rotary-wing take off if on ground or descend to ~33m if in air with zero altitude.
  - Set:
    - Altitude above sea level
    - Climb/Descent Rate

- **Fly Heading and Altitude (Fixed/rotary-wing entities):**
  - Ascends/descends to specified altitude at given rate, turns to specified heading at given turn rate, maintaining current speed.
  - Fixed-wing entities on ground ignore task; rotary-wing take off if on ground or descend to ~33m if in air with zero altitude.
  - Set:
    - Heading (relative to true/magnetic north)
    - Altitude above sea level
    - Climb/Descent Rate
    - Turn Rate

- **Fly Heading:**
  - Turns aircraft to specified heading at given rate.
  - Maintains current altitude and speed; respects OPD's turn rate limit.
  - Fixed-wing entities on ground ignore task; rotary-wing entities rise to ~25m while turning.
  - Assignment: Select entity > Task > Movement > Fly Heading, set heading, north reference (true/magnetic), turn rate, click OK.

- **Fly Loiter Pattern:**
  - Aircraft flies in specified loiter pattern around control point (circle, figure eight, racetrack, cloverleaf, or hold).
  - Loiters at set altitude, speed, and duration; respects OPD limits on altitude, airspeed, and lateral acceleration.
  - Complex patterns (racetrack, hold) require bearing and length for main axis and loop centers.
  - Assignment: Select fixed-wing entity > Task > Movement > Fly Loiter Pattern, choose loiter point, radius, turn direction, altitude, speed, duration type (laps/time).

- **Loiter Pattern:**
  - Specify desired pattern: figure 8, cloverleaf, racetrack, or hold.
  - Enter main axis bearing and loop center space.
  - Click 'OK'.

- **Follow Entity:**
  - Select entity, choose 'Movement > Follow Entity'.
  - Specify target entity name and optional offset (behind, right, above).
    - Positive values: behind, right, above.
    - Negative values: in front, left, below.
  - Follower matches speed but adjusts for direction/terrain changes.
  - Fixed-wing followers maintain vertical position relative to leader.

- **Fixed-Wing Entities Following Ground Entities:**
  - Ensure follower is high enough to avoid crashing.
  - Position offset doesn't change with leader's roll or pitch.

- **Hover:**
  - Select entity, choose 'Movement > Hover'.
  - Choose landing location and hover height.
  - Click 'OK'.

- **Keep Station (for watercraft):**
  - Follow at fixed distance and bearing from leader's position.
  - Maintains station regardless of leader's heading change.

- **Keep Station:**
  - Follows leader's heading while maintaining a fixed distance and bearing relative to true or magnetic north.
  - Parameters: Lead entity name, distance, and bearing.
  - Task assignment:
    - Select follower entity.
    - Choose 'Movement' > 'Keep Station'.
    - Enter parameters (name, distance, bearing).
    - Click 'OK'.

- **Land At Airport:**
  - Lands aircraft at a specified airport on an appropriate runway based on weather conditions.
  - Requires terrain database with airport and runway data.
  - Task assignment:
    - Select entity.
    - Choose 'Movement' > 'Land At Airport', or click the corresponding button.
    - Select desired aerodrome.
    - Click 'OK'.

- **Land At Airport Near Location:**
  - Finds an airport near a specified location for landing the aircraft.
  - Requires terrain database with airport and runway data.
  - Task assignment:
    - Select fixed-wing entity.
    - Choose 'Movement' > 'Land at Airport Near Location'.
    - Specify range and location.
    - Select desired aerodrome from populated list.
    - Click 'OK'.

- **Land On Route:**
  - Automates landing of a fixed-wing aircraft along a specified route serving as the runway.
  - Approach route length is based on plane's altitude or distance needed to slow down to landing speed.
  - Task assignment:
    - Select entity.
    - Choose 'Movement' > 'Land On Route'.
    - Specify route for landing.

**Key Points:**
- Distinct tasks for maintaining position and landing aircraft, each with specific parameters and steps.
- Terrain database required for airport-based landing tasks.
- Landing on another entity (e.g., aircraft carrier) requires the Embark task, not a landing task.

- **Land On Route:**
  - Automates landing an aircraft on a specified route.
    - Select route in list/terrain or enter name in 'Route' box.
    - Click 'OK'.

- **Land On Runway:**
  - Automates fixed-wing aircraft landings on runways.
    - Requires runway in terrain; add route if needed (see "26.17. Land On Route").
    - Approach route length is plane's altitude or distance to reach landing speed.
    - Assign task:
      - Select entity.
      - Choose 'Land On Runway' or click its button.
      - Enter ICAO code of aerodrome in 'Airport' box.
      - Select specific runway.
      - Click 'OK'.
    - Design explicit landings using routes (see "25.6.6 How Fixed-Wing Entities Land").

- **Land (Vertical):**
  - Vertical landing for fixed-wing VTOL aircraft.
    - Assign task:
      - Select entity.
      - Choose 'Land (Vertical)'.
      - Select location/coordinates on terrain or enter coordinates.
      - Click 'OK'.

- **Move Along Route:**
  - Object moves along route from nearest vertex to end point.
    - If route is edited during movement, object moves to nearest vertex.

1. **Human Entities and Route Changes:**
   - If moved off-route or the route changes, human entities plan a path to the nearest route vertex instead of moving to the nearest point on the route.
   - They don't generate subordinate routes until they reach the beginning of the main route.

2. **Simulation Objects and Repeated Routes:**
   - To make an object repeatedly follow the same route (e.g., circular), clear the 'Start at Closest Vertex' option.

3. **Air Platform Entities and Route Altitude:**
   - Consider route vertex altitudes and terrain when tasking air platforms to follow routes for safe navigation.

4. **Units and Route Movement:**
   - Units start moving along a route once their leading edge reaches the first point, and they're considered finished when it reaches the last point.
   - They can use other linear tactical graphics like corridors or supply routes in addition to regular routes.

5. **Assigning 'Move Along Route' Task:**
   - Select the object, choose the task, enter the route name, and optionally:
     - Reverse direction for back-and-forth movement.
     - Treat route as road for ground vehicles (within 10 meters of the route).
     - Start at closest vertex to begin from the nearest point on the route.
   - Click 'OK' to confirm.

6. **Move Along Route with Actions:**
   - Entities perform specified actions at designated points along the route before continuing to their destination.
   - By default, they start at the beginning of the route; clear 'Start at Closest Vertex' for repeated routes (e.g., circular).

- **Entity Movement:**
  - After initial movement along a route, the entity proceeds to the closest end vertex for subsequent tasks.

- **Time Management:**
  - Set arrival time at target location (TL) using 'Specify Time on Target'.
  - Entity may wait or circle at hold location (HL) to meet the specified time.
  - Task completion might be impossible if both 'Time on Target' and 'Enforced Ordered Speed' are set.
  - Enable 'Abandon if Time on Target Cannot Be Achieved' for entity to abandon task if it can't reach TL within 10 seconds of the specified time.

- **Speed Control:**
  - Use 'Ordered Speed' with 'Enforced' or 'Suggested' options to control entity's speed.

- **Altitude Consideration (Air Platforms):**
  - Account for route vertices altitude and terrain when assigning tasks.
  - Set ordered altitude or raise vertices for entity to follow route.

- **Task Assignment:**
  - Identify entity, route (or other linear graphic), and any required tactical graphics (e.g., target points).
  - Select entity, choose 'Move Along Route with Actions', enter route name in the dialog box parameters.

- **Additional Linear Graphics:**
  - Use air axes, air corridors, lines, or supply routes for tasks besides routes.

- **Add Actions to Route:**
  - Add actions by right-clicking on route locations, vertices, or Plan View locations.
  - Insert tasks (e.g., 'Release Bomb on Target') or sets (e.g., 'Ordered Altitude').
  - Define action target or enter required information; action appears in the Action list.
  - Optionally, set entity speed with 'Ordered Speed', which can be enforced or suggested.
  - Specify Time on Target for entities to reach a point by a certain time.
  - Enable 'Abandon if Time on Target Cannot Be Achieved' for task abandonment if time constraints can't be met.

- **Route Manipulation:**
  - Reverse route direction with the 'Reverse Route' option.
  - Reverse action order with 'Reverse Actions', or manually reorder actions by right-clicking and selecting 'Move'.
  - Start route at the nearest vertex with the 'Start at Closest Vertex' checkbox.

- **Move Into Formation:**
  - Order a ground unit to move into a specified formation at a location.
  - Select desired formation from the list in the Move Into Formation parameters.

- **Move to Formation:**
  - Specify target location by entering coordinates or clicking on the terrain.
  - Set unit's heading at the target location.
  - Confirm with 'OK'.

- **Move to Altitude:**
  - Moves aircraft to a new altitude at current coordinates.
  - Fixed-wing aircraft spiral, rotary-wing entities rise/descend.
  - Not instantaneous; aircraft circles/hovers at new altitude upon completion.
  - Grounded fixed-wing entities cannot respond to this task.
  - To assign: select entity, choose 'Move to Altitude', enter desired altitude, confirm with 'OK'.

- **Move to Bullseye Offset:**
  - Moves aircraft to a bearing and range relative to a bullseye tactical graphic.
  - To assign: select entity, choose 'Move to Bullseye Offset', select bullseye, enter bearing (true/magnetic north), range, confirm with 'OK'.

- **Move to Depth:**
  - Specifies depth for subsurface entities; continues horizontal movement from before task initiation.
  - Quickly assignable/changeable via Entity Control Panel.
  - To assign: select entity, choose 'Move to Depth', select depth option, specify ascent/descent rate, confirm with 'OK'.

- **Move to Location:**
  - Moves simulation object to a location, considering navigation data and terrain.
  - Not instantaneous; object travels through terrain.
  - For road network movement, use 'Move to Location (Plan Along Roads)'.
  - To assign: select simulation object, choose 'Move to Location'.

- **Move to Location:**
  - Access: Task > Movement > Move to Location or button ()
  - Parameters display, click terrain or enter coordinates (expand location group box)
  - Optionally set altitude, ensuring air platforms don't crash
  - Click OK

- **Multiple Move to Location Tasks in a Plan:**
  - Enable "Each Click Generates A Task"
  - Specify an altitude if needed
  - Click points on the terrain for each location
  - Click OK (tasks added without re-selecting)

- **Move to Location (Plan Along Roads):**
  - For ground vehicles, uses roads if available
  - Entity moves along roads until closest point to destination, then off-road to final location (unless "Stay On Road When Complete" is selected)
  - Access: Task > Movement > Move to Location (Plan Along Roads)
  - Click terrain or enter coordinates, optionally select "Stay On Road When Complete"
  - Click OK

- **Move to Location (Plan Path):**
  - For surface and subsurface entities
  - Plots route based on water depth between start/end points
  - Specify minimum required depth for maneuvering

- **Depth Calculation:**
  - Depth can be based on ship's draft or manually entered.
  - Ship's draft is calculated as `height + offset`, set in the Size group box of the Simulation Object Editor.
  - Terrain must include S-57 data or similar depth information for this task to work. The Test-Massachusetts S-57 (online).mtf terrain, included with VR-Forces, is an example.

- **Move to Location (Plan Path) Task:**
  - Select entity > 'Task' > 'Movement' > 'Move to Location (Plan Path)'.
  - Click on the terrain or enter coordinates for the destination.
  - Specify minimum depth calculation method: ship's draft or specific value.
  - Optionally, select 'Display Route'.
  - Click 'OK'.

- **Move to Waypoint Tasks:**
  - **Move to Waypoint:** Entity moves to a point considering navigation data. Instantaneous movement is achieved by 'Set Location'.
    - Select entity > 'Task' > 'Movement' > 'Move to Waypoint', or click the Move to Waypoint button ().
    - Optionally, filter selection list.
    - Type waypoint name in 'Name' box or select it from the list or on the terrain.
    - If part of a plan, select 'Continue On' for entity to maintain speed.
    - Click 'OK'.
  - **Move to Waypoint (Plan Along Roads):** Entity uses road network if available.
    - Follow same steps as Move to Waypoint task.
    - For more details on road movement, see "25.5. Entity Movement On Roads and Off Roads".
  - Rotary-wing entities cannot reach moving waypoints or land on moving ships.

- **Additional Notes:**
  - For ground entities using roads, refer to "25.5. Entity Movement On Roads and Off Roads".
  - Move to Waypoint (Plan Along Roads) uses road driving behavior until the closest point on the road network to the destination is reached. Then, the entity moves off the road directly to the destination (unless 'Stay On Road When Complete' is selected).

- **Move to Waypoint (Plan Along Roads):**
  - Select entity.
  - Choose 'Movement' > 'Move to Waypoint (Plan Along Roads)'.
  - Select waypoint; optionally check 'Stay On Road When Complete'.
  - Entity stops at closest road point if waypoint isn't on a road.
  - Click OK.

- **Move to Waypoint (Plan Path):**
  - Applies to surface and subsurface entities, plots route based on water depth.
  - Select entity.
  - Choose 'Movement' > 'Move to Waypoint (Plan Path)'.
  - Select waypoint.
  - Specify minimum depth: by ship's draft or enter specific value.
  - Optionally check 'Display Route'.
  - Works with S-57 data or similar depth info.
  - Click OK.

- **Orbit:**
  - Aircraft circles a point without needing a route.
  - Select entity.
  - Choose 'Movement' > 'Orbit'.
  - Set coordinates, altitude, radius, and direction (clockwise/anticlockwise).
  - Click OK.

- **Orbit Object:**
  - Aircraft flies around simulation object or graphic.
  - Select entity.
  - Choose 'Movement' > 'Orbit Object', or click the Orbit Object button.
  - Select object/graphic to orbit.
  - Set orbit radius and direction (clockwise/anticlockwise).
  - Click OK.

- **Patrol Area (for watercraft):**
  - Allows ship to patrol an area like a harbor.
  - Select entity (watercraft).
  - Choose 'Movement' > 'Patrol Area'.
  - Define patrol area (e.g., using waypoints or shape).
  - Set speed and other parameters as needed.
  - Click OK.

- **Patrol Area:**
  - Ship moves in a zig-zag pattern across an area, using the line between two most distant points within the area as its spine.
  - Ship can start outside the area and will move into it to begin patrolling.
  - To assign: Select entity > Task > Movement > Patrol Area > Choose area > OK.

- **Patrol Between:**
  - Entity moves back and forth between two objects (point or simulation).
  - To assign: Select entity > Task > Movement > Patrol Between > Enter names/choose objects for Point 1 & 2 > OK.

- **Patrol Route:**
  - Entity moves along a route, from the nearest vertex to the end point, then back to the beginning, repeating until commanded otherwise.
  - If off-route, entity plans a path to the next route vertex rather than moving directly to it.
  - To assign: Select simulation object > Task > Movement > Patrol Route > Choose route > OK.

- **Pattern Hold (Location):**
  - Fixed-wing or rotary-wing entity executes a racetrack hold pattern at a specified location, spending approximately one minute per leg.
  - Aircraft enters the pattern using direct, parallel, or teardrop entry based on its relative position to the desired pattern.
  - To assign: Select fixed-wing/rotary-wing entity > Task > Movement > Pattern Hold (Location) > Choose location > OK.

- **Holding Fix or Pattern Hold:**
  - Select/enter the holding fix or waypoint.
  - Specify:
    - Heading
    - Speed
    - Altitude for the hold pattern
  - Choose turn direction (left or right).
  - Set pattern type:
    - Time: specify time per leg
    - Distance: specify length and width
  - Click 'OK'.

- **Pattern Hold (Waypoint) Task:**
  - Select a fixed-wing or rotary-wing entity.
  - Choose 'Movement' > 'Pattern Hold (Waypoint)'.
  - In the parameters:
    - Select the waypoint
    - Specify heading, speed, altitude, turn direction, and pattern type (Time/Distance)
  - Click 'OK'. Aircraft enters pattern using direct, parallel, or teardrop entry.

- **Refuel From Task:**
  - Select a fixed-wing entity with Air Refueling Receiver system.
  - Choose 'Movement' > 'Refuel From'.
  - In the parameters:
    - Select the air tanker for refueling
  - Click 'OK'. Aircraft rendezvous with selected air tanker.

- **Return To Base (RTB) Task:**
  - Assign a base aerodrome to the entity using 'Base set data request' or 'Edit dialog box'.
  - Select the entity and choose 'Movement' > 'Return to Base'.
  - Entity plans route back to its base, changes altitude at 10 NM from base, and lands on an active runway.

- **Rotary Wing Airlift Cargo to Location Task:**
  - Select an unmanned rotary-wing aircraft.
  - Choose 'Movement' > 'Rotary Wing Airlift Cargo to Location'.
  - Aircraft:
    - Moves to a list of embarkable objects
    - Embarks the objects onto itself
    - Moves to a specified location
    - Disembarks the objects.

- **Weight Limit:** If total weight (objects + aircraft) exceeds the aircraft's capacity, it can carry objects but won't be able to fly.

- **Movement Dynamics:** Unmanned aircraft uses Quadcopter or Quadcopter Heavy Lift movement dynamics system.

**Rotary Wing Airlift Cargo To Location:**
1. Select an unmanned aircraft.
2. Choose 'Task > Movement > Rotary Wing Airlift Cargo to Location'.
3. Optionally, filter the list of object types.
4. Select objects by:
   - Typing the name in the Name box, or
   - Selecting one or more objects from the Cargo Objects list.
5. Set the cruise altitude at which you want the aircraft to fly.
6. Specify the destination location by:
   - Typing coordinates, or
   - Clicking the Destination Location filter button and then clicking on the terrain.
7. Click 'OK'.

**Rotary Wing Land:**
1. Select a rotary-wing aircraft entity.
2. Choose 'Task > Movement > Rotary Wing Land'.
3. Select the landing waypoint by:
   - Typing the name in the Name box, or
   - Selecting from the list, or
   - Clicking on the terrain.
4. Click 'OK'.

**Rotary Wing Retrieve Cargo:**
1. Select an unmanned aircraft.
2. Choose 'Task > Movement > Rotary Wing Retrieve Cargo'.
3. Optionally, filter the list of object types.
4. Select objects by:
   - Typing the name in the Name box, or
   - Selecting one or more objects from the Cargo Objects list.
5. Set the cruise altitude at which you want the aircraft to fly.
6. Click 'OK' (aircraft hovers at the location of the last item retrieved until given further tasks).

**Rotary Wing Unload Cargo:**
1. Select an unmanned aircraft.
2. Choose 'Task > Movement > Rotary Wing Unload Cargo'.
3. The aircraft unloads its cargo at its current location.

**Sail Heading:**
1. Select a surface or subsurface entity.
2. Choose 'Task > Movement > Sail Heading' or click the corresponding button.
3. Specify a heading in the indicated units.
4. The entity sails towards the specified heading indefinitely.

- **Sail Heading:**
  - Specify north type (true or magnetic) for final heading.
  - Set turn diameter and direction: Toward Heading, Port, or Starboard.
  - Confirm with 'OK'.

- **Search and Rescue Patterns for Aircraft:**
  - Available patterns: Creeping Line, Expanding Square.

- **Fly Creeping Line Pattern:**
  - Begins at Commence Search Point (CSP).
  - Major Axis dictates search direction; legs are perpendicular to it.
  - Define Search Area Length along Major Axis and Width perpendicular to it.
  - Specify search area location: right or left of CSP.
  - Set parameters: Waypoint, Major Axis (true/magnetic north), Search Area Length, Track Spacing, Altitude, Air Speed, Turn Acceleration.
  - Confirm with 'OK'.

- **Fly Expanding Square Pattern:**
  - Initiates at CSP (center of search), moving around it in expanding right turns until the area is covered.
  - Adheres to OPD altitude and airspeed limits.

- **Fly Expanding Square Pattern (FESP):**
  - Assign task: Select aircraft > Task > Movement > Search and Rescue > FESP.
  - Set parameters:
    - Commence Search Point: Choose waypoint.
    - Initial Heading: Enter heading, specify true/magnetic north.
    - Track Spacing: Enter distance between search legs.
    - Search Box Size: Enter length for sides of square search area.
    - Altitude: Specify altitude above sea level.
    - Air Speed: Enter speed to fly pattern.
    - Turn Acceleration: Enter max Gs for turns (determines loop radius).
  - Ensure aircraft can perform 180� turn within track spacing distance.

- **Fly Parallel Pattern:**
  - Assign task: Select aircraft > Task > Movement > Search and Rescue > Fly Parallel Pattern.
  - Set parameters:
    - Commence Search Point: Choose waypoint.
    - Major Axis Heading: Enter axis for search, specify true/magnetic north.
    - Search Area Length: Enter length of search area along major axis.
    - Track Spacing: Enter distance between search legs.
    - Search Box Position: Select right or left of CSP.
    - Search Area Width: Enter width measured from CSP.
    - Altitude: Specify altitude above sea level.
    - Air Speed: Enter speed to fly pattern.
    - Turn Acceleration: Enter max Gs for turns (determines loop radius).
  - Ensure aircraft can perform 180� turn within track spacing distance.

- **Sweep Naval Mines:**
  - Task for surface entities equipped with a Naval Mine Sweep system.
  - Detects and disables naval mines along a specified route within a given sensing range (default: 300 meters).
  - Optional disarm failure probability can be set, representing the chance of finding but not disabling a mine.
  - Assignment:
    - Select entity.
    - Choose Task > Movement > Sweep Naval Mines.
    - Select route to follow.
    - Specify sensing range (default: 300 meters).
    - Optionally, specify disarm failure probability.
    - Click OK.

- **Takeoff On Route:**
  - Tasks a fixed-wing entity to take off along a specified route.
  - Entity moves to a controller-defined point some distance up and away from the end of the route after reaching takeoff speed (30% of minimum lift).
  - Optional immediate movement to runway start can be selected for quicker positioning.
  - Assignment:
    - Select entity.
    - Choose Task > Movement > Takeoff On Route.
    - Select route.
    - Optionally, check 'Teleport to Runway Start'.
    - Click OK.

- **Takeoff On Runway:**
  - Aircraft moves along a specified or closest runway, reaches takeoff speed, and then moves up and away from the end of the runway.
  - Requires terrain with aerodromes having runways; if not available, a route can be used instead.
  - No automatic check for runway suitability for the aircraft.
  - Assignment:
    - Select entity.
    - Choose Task > Movement > Takeoff On Runway or click button.
    - Enter ICAO code of the airport.
    - Select specific runway.

- **Takeoff On Runway:**
  - Applicable to runways associated with the selected aerodrome.
  - Optionally, teleport entity to runway start for quick takeoff positioning.
  - Assign 'Takeoff On Runway' task with 'Use Closest Runway' checked.
  - Explicitly task fixed-wing entities; innate take-off details available separately.

- **Takeoff (Vertical):**
  - Applicable to aircraft configured with the Fixed Wing VTOL movement system.
  - Assign 'Takeoff (Vertical)' task, enter desired height for entity movement.

- **Turn to Heading:**
  - Realistic ground vehicle heading change using pivot or K-turn behavior.
  - Controlled by entity's 'can-pivot' parameter in object parameter database.
  - Assign 'Turn to Heading' task with specified absolute/relative heading and reference point (True North, Host Object, Current Heading, Magnetic North).

- **Zig-Zag to Heading:**
  - Surface watercraft movement towards a heading using zig-zag pattern.
  - Assign 'Zig-Zag to Heading' task, specify heading, time per leg, and angle of direction for each leg.

- **Additional Tasks (briefly mentioned):**
  - Engagement: Arm Mine at Depth, Attack Aircraft with Guns, Cease Fire, Lase Location, Lase Target.
  - Offense: Drop Naval Depth Charge, Drop Naval Depth Charge at Location, Drop Naval Mine, Drop Naval Mines Along Route, Execute Gun Attack, Execute Surface Attack, Fire for Effect Tasks (including Firing Naval Guns), Fire Cruise Missile, Fire Laser Guided Missile, Fire Missile Launcher, Fire Team Suppress Target.
  - Defense: Explode Charge at Depth, Fire At, Fire Ballistic Gun.

- **Missile Launch Tasks:**
  - Launch Anti-Submarine Missile vertically.
  - Launch Ballistic Missiles at specific locations or target objects.
  - Deploy Countermeasures and smoke.

- **Torpedo and Munition Tasks:**
  - Launch torpedoes for anti-ship and anti-submarine purposes.
  - Launch loiter munitions and perform loitering attacks.

- **Explosive Deployment:**
  - Place Improvised Explosive Devices (IEDs).

- **Fire Support Tasks:**
  - Provide indirect fire support.
  - Provide suppressive fire at specific locations or objects.

- **Bomb and Grenade Release/Throw:**
  - Release bombs.
  - Throw grenades at specific locations or targets.

- **Mine Warfare:**
  - Arm naval mines at specified depths with custom parameters, including depth, radius, arming time, trigger entity types, and hostility settings.

- **Aircraft Engagement:**
  - Attack aircraft using guns instead of missiles.

- **Cease Fire:**
  - Pass a cease fire order to artillery systems.

- **Depth Charge Deployment:**
  - Drop naval depth charges at the current location or move to a specified location before dropping.

- **Drop Naval Depth Charge at Location:**
  - Assign task: Select entity, choose 'Task' > 'Engagement' > 'Drop Naval Depth Charge at Location'.
  - Specify:
    - Depth charge type
    - Explosion depth
    - Location (X, Y coordinates and altitude)
      - Altitude can be current entity's or manually specified
  - Confirm task: Click 'OK'.

- **Drop Naval Mine:**
  - Assign task: Select entity with Naval Mine Deployment system, choose 'Task' > 'Engagement' > 'Drop Naval Mine'.
  - Specify:
    - Mine type
    - Drop depth (below sea level)
    - Arming delay (days, hours:minutes:seconds)
    - Detonate proximity (distance from mine)
    - Target types (add entity types that can trigger the mine; surface and subsurface watercraft by default)
      - Option to set off only by hostile entities
  - Confirm task: Click 'OK'.

- **Drop Naval Mines Along Route:**
  - Assign task: Select entity with Naval Mine Deployment system, choose 'Task' > 'Engagement' > 'Drop Naval Mines Along Route'.
  - Specify:
    - Route to follow
    - Mine spacing (distance between each mine)
  - Entity drops mines while traveling along the specified route.

- **Naval Mine Deployment:**
  - Select mine type.
  - Set depth below sea level (positive numbers).
  - Set arming delay: days, hours:minutes:seconds.
  - Set detonation proximity distance.
  - Add trigger entity types:
    - Click 'Add' to open Entity Type dialog.
    - Select options or type enumeration. Default targets are surface and subsurface watercraft.
    - Click 'OK'.
  - Enable 'Hostile Only' for mine activation by hostile entities only.

- **Execute Gun Attack (Strafing Run) Task:**
  - Parameters:
    - Initial Point: Minimum distance varies based on plane parameters; too close results in an error message.
    - Target: Entity or object type. If not found, strafes target point (default) or aborts (if 'Abort Without Target' is checked).
    - Egress Heading & Maneuver: Options include Immediate Climb, Juke Left/Right.
    - Time on Target.
  - Munition's dispersal-angle parameter affects kill effectiveness around the target point.

- **Assignment:**
  - Select entity for strafing run.
  - Choose Task > Engagement > Execute Gun Attack.
  - Specify initial point and target on dialog box.
  - Select egress maneuver.

- **Gun Attack (Entity-Level):**
  - Optionally specify:
    - Egress heading
    - Time on target to control entity's speed approaching drop site
  - Confirm by clicking 'OK'

- **Surface Attack (Fixed-Wing Aircraft):**
  - Assign targets using:
    - Coordinates (MGRS or Lat/Lon)
    - Laser designation code
    - Specific target
  - Optionally set:
    - Initial point
    - Time on target to control entity's speed approaching drop site
    - Egress heading
    - Release speed and altitude
  - Add multiple targets; bombs dropped simultaneously on all targets
  - Not compatible with 'Move Along Route with Actions'
  - Confirm by clicking 'OK'

- **Explode Charge at Depth (Depth Charge):**
  - System scripted task, disabled by default
  - Specify depth for explosion
  - Confirm by clicking 'OK'

- **Fire At (Entity):**
  - Command entity to fire at a specific target:
    - Location
    - Simulation object
  - Ignores rules of engagement and force types; can fire at own forces if ordered
  - Select appropriate weapon system and ammunition for the target
  - Confirm by clicking 'OK'

- **Fire Ballistic Gun:**
  - Command an equipped entity to fire at a specific target (location or object).
  - Specify weapon system and maximum rounds.
  - Entities ignore rules of engagement and force types, firing at own force if instructed.
  - To assign: Select entity > Task > Engagement > Fire Ballistic Gun > Select Location/Object > Choose Target > Select Weapon (if multiple) > Enter Rounds > OK.

- **Fire Cruise Missile:**
  - Entities with cruise missile launcher fire missiles directly or follow routes to targets.
  - Specify target, weapon system (if multiple), route, missile speed, and detonation proximity.
  - To assign: Select entity > Task > Engagement > Fire Cruise Missile > Choose Target > Select Weapon (if multiple) > Choose Route/No Route > Set Missile Speed & Detonation Proximity > OK.

- **Fire for Effect Tasks:**
  - Artillery entities and surface vessels with naval guns fire at entities, locations, or targets.
  - Entities display countdowns before firing and until splash impact.
  - To assign: Select entity > Task > Engagement > Fire for Effect on [Entity | Location | Target] > Choose Parameters > OK.

- **Fire-for-Effect (FFE) Tasks:**
  - Target selection:
    - Entity: List, terrain, or name box.
    - Location: Terrain click or coordinates/altitude entry.
    - Target: List or terrain.
  - Name list filtering available for FFE on Entity and FFE on Target.
  - Weapon selection if entity has multiple weapon systems.
  - Munition choice.
  - Firing mode:
    - Number of rounds.
    - Continuous fire until target destruction or ammunition depletion.
  - Optional detonation height above terrain specification.
  - Confirm with 'OK'.

- **Artillery Entities & Naval Guns:**
  - FFE tasks applicable to artillery entities and surface vessels with naval guns.
  - Moving target dead reckoning for accurate firing.
  - Range rings display maximum and minimum ranges (enable via console).
  - Default preferred trajectory height: 500 meters, adjustable.

- **Naval Gun Firing Modes:**
  - Ordinary parabola-like firing; direct fire if:
    - Target range within specific limits.
    - 'Capable-of-direct-alignment' parameter is True.
    - Line-of-sight to the target.

- **Fire Laser Guided Missile Task:**
  - Entity launches missile without lasing target, awaiting separate laser designator by default.
  - Laser code specification or fire without designator option.
  - Weapon (missile) selection, optional 'Fire Without Designator' check, then confirm with 'OK'.

- **Fire Missile Launcher:**
  - Command: Launch missiles from an entity towards a specific target (location or object).
  - Requirements:
    - Entity must have a missile launcher system.
    - Appropriate weapon system and ammunition for the target.
  - Parameters:
    - Select target location or object.
      - Click on map or enter coordinates and altitude.
      - Choose simulation object.
    - Choose missile launcher system (if multiple available).
    - Set maximum number of rounds to fire.
  - Notes: Entities ignore rules of engagement and force types. Cruise missiles require specific route input.

- **Fire Team Suppress Target:**
  - Command: Fire team provides suppressive fire at a target (point, line, or area) for a specified duration.
  - Parameters:
    - Select simulation object as target.
    - Set rapid fire duration in seconds.
    - Set total fire duration in minutes.

- **Lase and Fire Guided Missile:**
  - Command: Entity equipped with laser-guided missiles lases a target location or object, then fires a missile at it.
  - Parameters:
    - Select target location or object.
      - Click on map or enter coordinates.

- **Lase Location:**
  - Command: Entity aims a laser beam at a specific location to guide a laser-guided weapon.
  - Requirements: Entity must have a Laser Designator system.
  - Notes: Lasing takes line of sight into account and can be performed during movement tasks.

- **Laser Designator Tasks (Lase Location & Lase Target):**
  - Require line of sight; terrain obstacles or lack of visibility can prevent task completion.
  - Have a maximum range; if the lasing entity is too far, the task fails.
  - To assign: Select the lasing entity, choose 'Engagement' > 'Lase Location/Target', specify location/target, and confirm.

- **Lase Target Specifics:**
  - Can be performed while moving.
  - Laser direction affects targetable spots; weapons need line of sight to designated areas.
  - Related sections for further details: "9.4.2 Lasing Targets", "36.43. Laser Code", "36.81. Synchronize Laser Code".

- **Launch Anti-Submarine Missile (Vertical):**
  - Requires an Anti-Submarine Missile (Vertically Launched) weapon system.
  - To assign: Select the surface entity, choose 'Engagement' > 'Launch Anti-Submarine Missile (Vertical)', select target, specify torpedo drop location, and confirm.

- **Launch Ballistic Missile at Location:**
  - Uses a simplified parabola for trajectory, ignoring atmospheric factors and earth's rotation.
  - To launch: Select an entity with a strategic missile weapon system, choose 'Engagement' > 'Launch Ballistic Missile at Location', and specify the target location.

- **Launch Missile:**
  - Set location: Click terrain or expand location group box, enter coordinates and altitude (optional).
  - Select missile type from list.
  - For ballistic missiles, specify detonation altitude.
  - Confirm by clicking 'OK'.

- **Launch Ballistic Missile at Target Object:**
  - Select entity with strategic missile weapon system.
  - Choose 'Engagement > Launch Ballistic Missile at Target Object'.
  - Filter and select target object.
  - Select missile type and detonation altitude.
  - Click 'OK'.

- **Launch Countermeasures (Chaff & Flares):**
  - Select entity, choose 'Engagement > Launch Countermeasures'.
  - Select countermeasure types and number to fire.
  - Set time between each launch in seconds.
  - Click 'OK'.

- **Launch Smoke:**
  - Select entity with M250 smoke grenade launcher system.
  - Choose 'Engagement > Launch Smoke'.
  - Select direction: Towards nearest threat or specific heading (true/magnetic north).
  - Click 'OK'.

- **Launch Torpedo Tasks (Subsurface Entities):**
  - Launch fixed-depth or homing anti-ship torpedoes.
  - Torpedoes travel at initial bearing for a fixed distance before homing in on target.
  - Rise to target depth at a fixed rate.

- **Torpedo Launch Tasks:**
  - **Anti-ship (Fixed Depth):**
    - Select target entity.
    - Set initial bearing, homing start delay, cruise depth, and proximity trigger distance.
    - Torpedo travels at specified depth until it begins homing in on the target and detonates at set distance.

  - **Anti-submarine:**
    - Select target entity (submarine).
    - Set initial bearing and homing start delay.
    - Torpedo homes in on the center of the target and detonates at set proximity trigger distance. No cruise depth setting.

- **Loiter Munition Tasks:**
  - **Launch Loiter Munition (Delayed Targeting):**
    - Launch munition from selected entity.
    - Specify orbit location.
    - Later, use 'Set > Engagement > Target' to set the target for the loitering munition to strike.

  - **Launch Loiter Munition (Immediate Targeting):**
    - Launch munition directly towards the specified simulation object.

  - **Loitering Attack:**
    - Loiter munitions can orbit a location or strike a simulation object based on tasking.

- **Loiter Munition Tasks:**
  - **Delayed Targeting:** Munition orbits a specified location until manually tasked to attack a target.
    - Steps:
      - Select loiter munition entity
      - Choose Task > Engagement > Loitering Attack
      - Select Delayed Targeting and specify orbit location
      - Click OK, munition moves to orbit position
      - When ready, select munition and choose Set > Engagement > Target, then specify the simulation object

  - **Immediate Targeting:** Munition flies directly towards and attacks the specified target.
    - Steps:
      - Select loiter munition entity
      - Choose Task > Engagement > Loitering Attack
      - Select Immediate Targeting and specify target object
      - Click OK, munition flies to and attacks target

- **Place IED Task:**
  - Allows a human entity to place an improvised explosive device (IED) at a specific location with customizable parameters.
    - Steps:
      - Select entity
      - Choose Task > Engagement > Place IED
      - Specify placement location, duration, fuse type, delay/time, post-placement location, and arming location
      - Click OK

- **Provide Indirect Fire Task:**
  - Tasks artillery or naval gun entities to provide indirect fire based on targeting methods.
    - Targeting Methods:
      - Coordinates: MGRS or Lat/Lon (DMS), entered manually or by clicking terrain
      - Polar: Select Forward Observer entity, enter target location in direction and distance from observer
      - Adjust:

- **Indirect Fire (Provide Indirect Fire task):**
  - Select a forward observer and input adjustment details from a known point.
  - Known target points are generated by previous indirect fire tasks with 'Generate Known Target Point' enabled.
  - Assign the task: select entity, choose task, specify target location method, munition type, number of rounds, fuse type, optional index, and confirm.

- **Suppressive Fire at Location:**
  - Entity fires at a specific location, 1 meter above it.
  - Task assignment: select entity, choose task, input location, duration of initial rapid fire, total suppressive fire time, maximum rounds to fire, and select gun to use.

- **Suppressive Fire at Object:**
  - Entity fires at a simulation object (point, line, or area), 1 meter above terrain.
  - If target is in cover, entity moves laterally or stands up.
  - Task assignment: select entity, choose task, select object to fire at, enter rapid fire duration, total suppressive fire duration, select preferred gun, and input maximum rounds.

- **Bomb Release Tasks (Fixed-wing entities):**
  - Targeting options: laser spot, location, or entity.
    - *Laser Spot*: Requires synchronization with lasing entity's laser code.
  - Immediate drop; bomb navigation based on max-range and altitude parameters.
    - If out of range, bomb approaches target as closely as possible.
    - Recommend using "Execute Surface Attack" for better range management.
  - Assignment: Select entity > Engagement > Release Bomb, choose bomb type, detonation proximity, location/target, and confirm.

- **Grenade Throw Tasks (Infantry characters):**
  - Grenade types: M18 (colored smoke), M67 (fragmentation), M7A3 (CS tear gas), M83 (white smoke), M84 (stun/flashbang).
  - Targeting option: location.
    - Assignment: Select entity > Engagement > Throw Grenade at Location, choose grenade type, and specify the location.

- **Navigation to Specific Location:**
  - Click on terrain or expand location group box.
  - Enter specific coordinates and altitude.
  - Click 'OK'.

- **Throw Grenade at Target Task:**
  - Select entity.
  - Choose 'Task' > 'Engagement' > 'Throw Grenade at Target'.
  - Select grenade type.
  - Specify target.
  - Click 'OK'.

- **Human & Crowd Tasks (Selected Examples):**
  - **Circle Around Location:** Form a circle around a location, facing in or out. Applies to individual crowd members. Avoid small radii for large crowds.
    - Select crowd/unit.
    - Choose 'Task' > 'Movement' > 'Circle Around Location'.
    - Specify location, direction, and radius.

  - **Civilian Idle:** Human character stands and cycles through DI-Guy animations.
    - Select human character.
    - Choose 'Task' > 'Movement' > 'Civilian Idle'.

  - **Civilian Pray:** Human character performs praying animation until interrupted.
    - Select human character.
    - Choose 'Task' > 'Movement' > 'Civilian Pray'.

- **Civilian Protest:**
  - Assigns protest animations to a single human character.
  - Use for small groups; larger crowds use 'Protest Along Line' or 'Protest Around Location'.
  - *Assignment:* Task > Movement > Civilian Protest

- **Civilian Talk:**
  - Assigns conversation animations to a human character.
  - *Assignment:* Task > Movement > Civilian Talk

- **Close Door/Window:**
  - Closes open doors/windows within one meter of a human (controlled by switch nodes).
  - Applies to doors/windows controlled by switch nodes, not articulated parts.
  - *Assignment:* Task > Terrain > Close Door/Window

- **Create More Entities:**
  - Adds more entities (humans or animals) to a crowd/herd or area.
  - Humans get 'Move To Location' then 'Wander'; animals get 'Wander With Animations'.
  - *Assignment:*
    1. Select crowd/herd/area.
    2. Task > Create More Entities
    3. Specify number and placement of new entities.

- **Crowd Along Line:**
  - Causes a crowd to gather to the left or right of a specified line at its center point.
  - *Assignment:*
    1. Select crowd.
    2. Task > Movement > Crowd Along Line
    3. Choose line and side (left/right).

- **Crowd Around Location:**
  - Causes a crowd to cluster around a specified location.
  - *Assignment:* Same as 'Crowd Along Line' but select 'Around Location' instead of line and side.

The provided text describes four crowd behavior tasks in VR-Forces:

1. **Crowd Around Location:**
   - Task: Crowd gathers around a specified location.
   - Parameters:
     - Location: Click on the terrain or enter specific coordinates and altitude.
     - Minimum Distance: Specify the minimum distance between a member of the crowd and the location to prevent collisions.
   - Action: Click OK.

2. **Crowd Around Object:**
   - Task: Crowd clusters around a specified simulation object or point.
   - Steps:
     1. Select a crowd.
     2. Choose "Movement" > "Crowd Around Object".
     3. In the Filter list, select "All Entities or Points".
     4. Select the simulation object or point for the crowd to gather around.
     5. Set the minimum distance between a member of the crowd and the object.
   - Note: Some members may stand further back to avoid collisions.

3. **Crowd Around Waypoints:**
   - Task: Crowd gathers at waypoints and performs a specified behavior for a set duration.
   - Steps:
     1. Select a crowd.
     2. Choose "Movement" > "Crowd Around Waypoints".
     3. Select one or more waypoints where the crowd should gather.
     4. Choose a behavior (Talk or Pray) from the Behavior list.
     5. Set the duration in minutes for the crowd to perform the selected behavior.
     6. Set the minimum distance between a member of the crowd and the waypoint.
   - Note: Crowd members move to the closest waypoint if multiple are chosen.

4. **Crowd in Front of Entity:**
   - Task: Crowd gathers in front of an entity based on its heading.
   - Steps:
     1. Select a crowd.
     2. Choose "Movement" > "Crowd in Front of Entity".
     3. Select the entity you want the crowd to gather in front of.

Each task aims to control the movement and behavior of a selected crowd, ensuring members maintain a minimum distance from their target location, object, or waypoint to prevent collisions.

- **DI-Guy Animation Task:**
  - Applies to lifeform entities.
  - Synchronizes VR-Forces entity's location and orientation with 3D model's animation.
  - Duration can be set; preview is optional before assignment.
  - Appearance changes are handled via DI-Guy Appearance set data request.

- **DI-Guy Gesture Task:**
  - Assigns gestures (partial body motions) to human characters.
  - Option to wait until the gesture completes before starting another.
  - Preview is optional before assignment.

- **Disperse Crowd Task:**
  - Causes a crowd to wander freely, potentially outside its pedestrian area.
  - Primarily used to disperse crowds gathered around an entity or location.

- **Find Cover Task (for human entities):**
  - Entity seeks cover from a specified threat within a given range and distance.
  - Threat radius defines line-of-sight calculation area.
  - Entity hides behind terrain features, not other entities.

- **Find Cover:**
  - Select threat entity.
  - Set parameters: Threat Radius, Range, Distance From Threat.
  - Entity hides behind terrain features (not other entities).
  - Entity can move to a firing position with line-of-sight to the threat.

- **Find Firing Position:**
  - Entity finds location to fire at the threat without being visible to it.
  - Requires navigation area and terrain features for cover.
  - Set parameters: Range, Distance From Threat, Threat Radius.

- **Fire Team Bound to Location:**
  - Fire team moves in bounds towards destination while watching a threat.
  - Teams split into groups for overwatch and movement.
  - Entities fire at the threat if they have line-of-sight (if 'Always Fire' is checked).
  - Set parameters: Destination location, Threat location.

- **Fire Team Actions:**
  - Enable firing at threats in overwatch: Select "Always Fire".
  - Occupy fire positions for units:
    - Select unit > Tasks > Movement > Fire Team Occupy Fire Position.
    - Define: Fire position, range, threat entity, threat radius, and distance from threat.
  - Travel to waypoints with specified formations:
    - Select fire team > Tasks > Movement > Fire Team Travel to Waypoint.
    - Input: Waypoint name, formation, and optionally override spacing.

- **Individual/Crowd Actions:**
  - Flee from entities for humans/crowds:
    - Select entity (human/crowd) > Tasks > Movement > Flee From Entities.
    - Choose threat entities, set flight zone radius, and optionally allow fleeing even if the threat is destroyed (for individuals).
  - Move between cover points while avoiding threats:
    - Select entity > Tasks > Movement > Move Between Cover to Location.
    - Set distance from threat and threat radius.

- **Cover and Threat:**
  - Entities hide behind terrain features (walls, doors) but not other entities.
  - Distance from threat: Minimum safe distance between the threat and the entity.
  - VR-Forces calculates cover points based on line-of-sight from a threat radius around the threat entity.

- **Task: Move Between Cover to Location**
  - Select entity > Task > Movement > Move Between Cover to Location
  - Specify location, select threat entity, set threat radius and distance from threat.
  - Adjust default values for threat radius and distance based on environment.

- **Tasks: Open Door/Window**
  - Human within one meter of a closed door/window (controlled by switch nodes) can open it.
  - Assign tasks via Task > Terrain > Open Door/Window.

- **Task: Parachute to Target**
  - Causes paratrooper entity to disembark, deploy parachute, and land at target object/location.
  - Specify muster point for post-landing movement (optional).
  - Assign task via Task > Movement > Parachute to Target.

- **Paratrooper Deployment:**
  - Optionally use 'Muster Point' for post-landing movement.
  - Specify deployment altitude:
    - Default: Above Ground Level (AGL).
    - Can switch to Mean Sea Level (MSL) by unchecking the box.
  - Optionally, set 'Deploy After Elapsed Time'.
  - Click 'OK'.

- **Crowd Tasks:**
  - **Protest Along Line:**
    - Crowd gathers and protests along a specified line.
    - Set line and protest side.
    - Click 'OK'.

  - **Protest Around Location:**
    - Crowd gathers around a specified location and protests.
    - Set location.
    - Click 'OK'.

  - **Riot:**
    - Crowd moves to a specified area (any Area).
    - Performs angry gestures.
    - Optionally starts fires at riot points inside the area by checking 'Start Fires' box.

  - **Rush to Location:**
    - Entity quickly moves to a specified location and assumes position based on threat cover:
      - Default: Prone.
      - Kneeling if 'Destination Is High Cover' is checked.
    - Set location and threat location.
    - Click 'OK'.

  - **Squad Travel to Waypoint:**
    - Squad moves to a waypoint in a specific formation:
      - Lead fire team in wedge, followed by squad leader, then trailing fire team.

- **Formation Spacing:**
  - Defined in Simulation Object Editor.
  - Can be overridden when assigning tasks.
  - "Use Overwatch" checkbox increases distance between lead fire team and others.
  - "Override Formation Spacing" checkbox allows custom spacing for each fire team.

- **Squad Travel to Waypoint Task:**
  - Move squad to a specified waypoint.
  - Optionally, use overwatch (increases following distance) or override formation spacing.
  - If overridden, enter new spacing in meters.

- **Visit Neighbor Task:**
  - Human entity moves to nearby human or ground entity within a specified radius.

- **Wait in Queue Task:**
  - Human entity joins and moves along a queue simulation effect object until released.
  - Released when "Release Next Entity From Queue" task is sent to the queue.

- **Wander Task:**
  - Lifeform entity moves randomly within a specified area for a set time.
  - Constrained by navigation preferences if applicable (e.g., preferred road data, navigation mode).

- **Wander In Area Task:**
  - Causes a crowd to wander within a specified area.
  - Entity must be in a navigation area.
  - To assign:
    - Select the crowd.
    - Choose `Task > Movement > Wander In Area`.
    - Select the area to wander in.
    - Click OK.

- **Wander Task Parameters (common for both Wander and Wander In Area):**
  - Duration: Indefinitely or Timed (if timed, specify duration in days, hours, minutes, seconds).
  - Movement: Free or Restricted To Area (if restricted, enter area name).
  - Destination Restriction: Choose movement option.

- **Unit Behavior Tasks:**
  - VR-Forces supports complex unit behaviors using Lua Behavior Engine.
  - Behaviors depend on terrain and can be adjusted using provided scripts.
  - Key concepts include Vehicle Crew.

- **Vehicle Crew:**
  - Defined as a subordinate of a unit with the 'Vehicle Crew' function.
  - Required for tasks involving vehicles associated with the unit.
  - Example: Overwatch defense task, where maneuver elements (vehicle crew) move and shoot.

- **Unit Behavior Tasks (Embarkation):**
  - **Drop Off Passengers at Location:**
    - Task a vehicle crew to drop off passengers (squad) at a specified location.
    - Steps:
      - Select crew
      - Choose task: Embarkation > Drop Off Passengers at Location
      - Specify location by clicking on terrain or entering coordinates and altitude
      - Select passengers from the Objects List, added to the Passengers list
      - Enter heading for vehicle crew upon arrival
      - Click OK

  - **Pick Up Passengers at Location:**
    - Task a vehicle crew to pick up passengers (squad) at a given location.
    - Steps:
      - Select unit's vehicle crew
      - Choose task: Embarkation > Pick Up Passengers at Location
      - Specify pickup location by clicking on terrain or entering coordinates and altitude
      - Enter heading for vehicle crew upon arrival
      - Click OK

- **Tasks for Mounting and Dismounting Units:**
  - Different tasks based on unit type.
  - **Dismount Headquarters:**
    - Infantry platoon headquarters exits vehicle to rally point.
    - Optionally retain habitual mountees (e.g., platoon sergeant) by checking/unchecking 'Retain Habitual Mountees'
    - Steps:
      - Select unit
      - Choose task: Embarkation > Dismount Headquarters
      - Specify location of rally point by clicking on terrain or entering coordinates and altitude
      - Click OK

  - **Dismount Platoon:**
    - Infantry platoon exits vehicle and gathers in formation around a point.
    - Steps:
      - Select platoon unit
      - Choose task: Embarkation > Dismount Platoon

- **Dismount Platoon:**
  - Set dismount point (waypoint).
  - Define platoon's facing direction (True or Magnetic north).
  - Choose vehicle formation and expected threat level (determines subunits' posture).
  - Optionally, select subunits to dismount; unselected units stay on the vehicle.

- **Dismount Squad:**
  - Select squad, initiate 'Dismount Squad'.
  - Set expected threat level (affects entities' posture).
  - Optionally, dismount vehicle team.
  - Confirm with OK.

- **Dismount Team:**
  - Select team, start 'Dismount Team'.
  - Define rally point coordinates or click on terrain.
  - Confirm with OK.

- **Mount Headquarters & Mount Platoon (similar process):**
  - Select HQ section/platoon, initiate 'Mount Headquarters/Mount Platoon'.
  - Set rally/mount point and direction (True or Magnetic north).
  - Choose vehicle formation and expected threat level (determines subunits' posture).
  - Optionally, select subunits to mount/dismount; unselected units stay at the specified location.
  - Confirm with OK.

- **Mount Squad:**
  - Select squad, initiate 'Mount Squad'.
  - Optionally, form up at a rally point before boarding vehicle.

- **Mount Squad/Team:**
  - **Task:** Mount a squad or team onto a vehicle.
  - **Vehicle:** Specified by 'Assign Transport' (default), can be reassigned during tasking.
  - **Process:**
    - Select unit, choose 'Task > Embarkation > Mount [Squad/Team]'.
    - Optionally, select 'Reassign Transport' and specify a vehicle.
    - Optionally, specify rally point coordinates or click on terrain.
    - Enter direction (True/Magnetic north) and formation.
    - Select threat level to determine dismounted subunits' posture.
    - Click OK to confirm.

- **Movement Tasks for Unit Behaviors:**

  - **Bound In Lanes (Fire Team):**
    - **Task:** Move in parallel lanes towards an enemy area.
    - **Process:**
      - Select fire team, choose 'Task > Movement > Bound In Lanes'.
      - Choose enemy area and specify start point on terrain or enter coordinates/altitude.
      - Click OK.

  - **Bounding Overwatch Successive Continuous (Mechanized Platoon):**
    - **Task:** Move along a route in successive bounds, watching specified threat locations.
    - **Process:**
      - Select platoon, choose 'Task > Movement > Bounding Overwatch Successive Continuous'.
      - Select travel route, enter minimum and maximum bound lengths.
      - Select one or more enemy locations (area tactical graphics).
      - Click OK.

  - **Follow Along Offset Route (Ground Entity):**
    - **Task:** Follow another entity at a specified offset.
    - **Process:**
      - Select following entity, ensure leader is tasked to move with unique offsets.

- **Movement Task: Follow Along Offset Route**
  - Access: Choose > Movement > Follow Along Offset Route.
  - Steps:
    - Select Leader Route.
    - Select Leader.
    - Enter offset parameters.
    - Click OK.

- **Defensive Tasks for Unit Behaviors:**
  - **Assume Coil Formation**
    - Access: Choose > Defense > Assume Coil Formation.
    - Steps:
      - Specify Radius.
      - Click OK.

  - **Provide Mobile Overwatch**
    - Access: Choose > Defense > Provide Mobile Overwatch.
    - Parameters:
      - Select Maneuver Elements (unit members moving).
      - Define Enemy Area.
      - Enter Overwatch Distance.

  - **Provide Stationary Overwatch**
    - Access: Choose > Defense > Provide Stationary Overwatch.
    - Parameters:
      - Specify Overwatch Location.
      - Select Maneuver Elements (unit members moving).
      - Optionally, select Enemy Area.

- **Offensive Task for Unit Behaviors: Assault**
  - Access: Choose > Offense > Assault.
  - Steps:
    - Select Enemy Area.
    - Set Support By Fire Position line.
    - Specify Assault Position location.
    - Select Limit of Advance simulation object.

- **Attack By Fire:**
  - Unit moves to designated line and fires at enemy area.
  - Firing can be continuous or stop after specified time without detecting contacts.
  - Parameters:
    - Line of Fire (hull-down position)
    - Enemy Area
    - Time Out (seconds)
    - Do Fires Indefinitely (optional, for continuous firing)

- **Attack By Fire in Rotation:**
  - Unit moves to and rotates through battle positions, taking turns firing at enemy area.
  - Parameters:
    - Battle Position(s)
    - Target Area

- **Clear:**
  - Unit lines up at starting position and moves along a line, attempting to remove all opposing forces.
  - Parameters:
    - Limit of Advance (stopping line)
    - Starting Point

- **Engage From Vehicle/Soldier Firing Positions:**
  - Entity moves to hide position, pauses, then moves to fire position and fires on enemy location.
  - Parameters:
    - Hull Down Position (or Shoot Position)
    - Hide Position
    - Delayed Start (optional pause)
    - Enemy Area

- **Movement To Contact:**
  - Unit moves towards objective and performs specified action upon making contact with opposing forces.
  - Parameter:
    - Axis of Attack (line)

- **Engage/Ignore Objective:**
  - Select the objective (ellipse or circle).
  - Specify action on contact: Engage or Ignore.
  - Click OK.

- **Seize Objective (Tank Company):**
  - Select company, choose 'Offense > Seize Objective'.
  - Set parameters:
    - Select objective area.
    - Select fire positions (lines for platoon positioning).
    - Select one line of departure.
    - Choose seize direction: Direct, Left, or Right.
  - Optionally:
    - Enable two-platoon assault.
    - Assign artillery support unit.
    - Specify assault route.
  - Click OK.

- **Suppressive Fire:**
  - Select unit, choose 'Offense > Suppressive Fire'.
  - Set parameters:
    - Use filter to select target type (ground entity or point).
    - Select target.
  - Click OK.

**Additional Tasks:**

- **Embarkation:**
  - Disembark: Unit exits vehicle.
  - Embark: Unit enters vehicle.
  - Airdrop: Unit is dropped from an aircraft.
  - Rope Sling Load Pick Up/Drop Off: Unit/equipment is lifted/dropped using a rope and sling load.
  - Fast Rope Insertion: Unit rapidly descends to the ground using a fast rope.
  - Extraction/Insertion using Rope/Ladder: Unit ascends/descends using a rope or ladder.
  - Dismount: Vehicle occupant exits the vehicle.

- **Internal Transfer:**
  - Fuel: Transfer fuel between units.
  - Supplies: Transfer supplies between units.

- **IFF Tasks (Identification Friend or Foe):**
  - Interrogate: Query nearby entities for identification.
  - Sweep Interrogate: Interrogate a wide area for entities.

- **Radio Tasks:**
  - Send Radio Set/Task: Transmit radio set or task to another unit.
  - Send Text Message: Send a text message to another unit.

- **Wait Tasks:**
  - Wait: Unit waits for a specified duration.
  - Wait Duration: Unit waits until a specific time.
  - Wait Elapsed: Unit waits until a certain amount of time has passed since the start of the simulation.

- **Moving Articulated Parts (Vehicle Components):**
  - Open/Close Car/Cargo Door: Open or close vehicle doors.
  - Deploy/Stow Refueling Boom/Drogue: Extend or retract refueling boom/drogue from aircraft.
  - Extend/Retraact Towed Array Decoy: Deploy or retrieve towed array decoy from submarine.
  - Raise/Lower Periscope: Extend or retract periscope on submarine.

- **Embedded Entity Tasks:**
  - Deploy/Recover Entities: Launch/retrieve unmanned vehicles or other embedded entities.
  - Sector Search Operation: Search a specific area for targets using an embedded entity.
  - Deploy Entity by Assigning Task: Launch an embedded entity with a specific task.

- **Sonar Tasks (Submarine):**
  - Deploy Sonobuoy: Release a sonobuoy to listen for underwater sounds.
  - Deploy Sonobuoys Along Route: Release multiple sonobuoys along a route.
  - Sonar Dip: Submerge periscope briefly to gather sonar data.

- **Other Tasks:**
  - Release Next Entity From Queue: Release the next entity in a queue, if any.
  - User Task: Custom task defined by the user.
  - Reactive Tasks: Tasks triggered by specific events or conditions.
  - Background Processes: Ongoing processes that do not require user input.

- **Embarkation & Disembarkation Tasks:**
  - Simulation objects move to/from their parent's ingress/egress points for embarking/disembarking.
  - Use 'Embarked'/'Disembarked' set data requests or menu commands for immediate actions.

- **Disembark Task:**
  - Moves a simulation object to the parent's egress point and disembarks it.
  - If the object is a unit, all embarked subordinates are given disembark tasks.
  - Completion occurs when all subordinates have disembarked.
  - Ensure each object moves from the disembarkation point before the next one disembarks.

- **Fast Rope Insertion Task:**
  - Causes infantry to disembark from a helicopter. See "30.1.8 Fast Rope Insertion" for details.

- **Disembark All Task:**
  - Given to a parent object, it disembarks all embarked objects (except aggregates) sequentially and dispersedly.
  - Avoids collision problems by moving objects to sufficiently dispersed locations.

- **Embark Task:**
  - Moves an object to the parent's ingress point and embarks on it.
  - If the object is a unit, each taskable subordinate is given an embark task.
  - Completion occurs when all subordinates have embarked.
  - The task is only valid if the specified parent object is configured to accept the embarking object.

- **Additional Notes:**
  - Human characters can animate opening/closing car doors and getting in/out of vehicles with interior geometry and articulated doors.
  - HLA users must use RPR FOM 2, draft 17 or later for embarkation features.
  - If embarkation spaces on the parent object are full, VR-Forces sends a message to the back-end console.

- **Task Management for Multiple Objects:**
  - Avoid simultaneous convergence of multiple simulation objects embarking on the same parent to prevent collision issues.

- **Embarking Simulation Object Behavior:**
  - In plan view, the object's icon hides upon reaching the ingress point.
  - In 3D mode, ensure the embarking object stops moving before the parent moves to maintain correct visual positioning.

- **Assigning an Embark Task:**
  1. Select the simulation object.
  2. Initiate the 'Embark' task.
  3. Choose or type the name of the parent simulation object.
  4. Optionally, select a specific slot type and name.
  5. Enable 'Choose Any Slot if Requested Slot Not Available', if desired.
  6. Confirm by clicking 'OK'.

- **Embarking Humans in Cars:**
  - Human characters can interact with car doors and seats using Embark/Disembark tasks.
  - Specify the seat (driver or passenger) by selecting a slot, or let entities choose sequentially.
  - This feature is primarily for aerial surveillance. Ground-level viewing may lack realism due to fixed speeds, limited hand contact, and potential overlap with automatically displayed drivers.
  - Recommendation: Disable 'Show Occupants' for all cars or at least the car being embarked on.

- **Occupant Visibility:**
  - Hide/Show occupants: See "36.37. Hide Occupants" (page 853) and "47.4. Displaying DI-Guys in Vehicles" (page 1054).
  - No support for drivers in the right front seat.

- **Vehicle Entry/Exit Animations:**
  - Calibrated for civilian vehicles; not suitable for large vehicles with high doors, like trucks.

- **Airdrop Tasks:**
  - **Air Drop System** required on aircraft.
  - **Parachute Deployment Task** needed for embarked entities to exit the aircraft.
  - **Drop Slots** specify intervals/exit order; not supported by units, different from embarkation slots.
  - To assign **Airdrop task**:
    - Select aircraft.
    - Choose Task > Embarkation > Airdrop.
    - Set drop interval (seconds).
    - Optionally, use drop slots and define number.
    - Click OK.
  - **Airdrop from Aircraft** task for paratroopers/vehicles:
    - Select embarked entity.
    - Choose Task > Embarkation > Airdrop from Aircraft.
    - Set parachute deployment time or altitude.

- **Notes:**
  - Parachuting entities can snap to terrain if moved during descent.
  - Palette continues descending while entity is parachuting.

- **Air Drop Task:**
  - Use checkbox for above ground level (AGL) altitude.
  - Ensure parachute deployment point allows safe descent to terrain.
  - Specify number of parachutes for vehicle/simulation objects with Air Drop Capable system (does not affect Paratrooper entities).
  - Optionally, set landing point and drop slot order for entity exit sequence.

- **Rope Sling Load Tasks:**
  - **Pick Up:** Helicopter moves to specified location, picks up cargo on rope using Fast Roping system.
  - **Drop Off:** Helicopter moves to specified location and drops off previously picked-up cargo.

- **Fast Rope Insertion Task:**
  - Available for helicopters with Fast Roping system (e.g., MH-60 Black Hawk, CH-47 Chinook).
  - Embarked entities slide down rope at specified insertion point, move to muster point, and assume kneeling posture.

- **Rope Suspension Extraction Task:**
  - Helicopter lowers rope at waypoint for extraction.
  - Entities within 50 meters having 'Extract Using Rope' task can embark on the rope.

- **Task Availability:** Rope Extraction and Insertion tasks are only available to helicopters equipped with the Fast Roping system.

- **Rope Extraction (30.1.10):**
  - Select a compatible helicopter.
  - Choose 'Embarkation' > 'Rope Suspension Extraction'.
  - Set pickup point by specifying location from waypoints or plan variables.
  - Select entities to extract; they are added to the 'Troops To Embark' list.
  - Click 'OK'.
  - Entities on the 'Troops to Embark' list within 50m of deployed rope embark one at a time. The vehicle ascends slightly after each entity attaches.

- **Entity Requirements for Rope Extraction:**
  - Entities must have the 'Extract Using Rope' task.
  - Entities must be within 50 meters of the rope deployment point.

- **Rope Insertion (30.1.11):**
  - Select a compatible helicopter.
  - Choose 'Embarkation' > 'Rope Suspension Insertion'.
  - Set dropoff point by selecting location from waypoints or plan variables.
  - Click 'OK'.
  - Entities on the rope disembark one at a time. The helicopter descends slightly after each entity disembarks.

- **Entity Disembarkation:**
  - Entities embarked using rope extraction can only disembark via the 'Rope Suspension Insertion' task.
  - This is different from the 'Fast Rope Insertion' task, which is used for entities embarked inside a helicopter.

- **Ladder Extraction (Helicopter Task):**
  - *Purpose*: Extract entities (troops) using a rope ladder.
  - *Requirements*:
    - Entities must have 'Extract Using Ladder' task and be within 50m of the ladder.
    - Available only on helicopters with Rope Ladder system (e.g., CH-47 Chinook).
  - *Process*:
    1. Select a compatible helicopter.
    2. Choose 'Ladder Extraction' task.
    3. Set pickup point and select entities to extract.
    4. Optionally, open rear cargo door.
    5. Entities climb ladder and embark when helicopter arrives.

- **Extract Using Ladder (Entity Task):**
  - *Requirement*: Entity must be on 'Troops to Embark' list and within 50m of extraction point.
  - *Process*:
    1. Select entity.
    2. Choose 'Extract Using Ladder' task.
    3. Entity climbs ladder when helicopter arrives.

- **Ladder Insertion (Helicopter Task):**
  - *Purpose*: Insert entities from a helicopter using a rope ladder.
  - *Requirements*:
    - Entities must have 'Insert Using Ladder' task.
    - Available only on helicopters with Rope Ladder system.
  - *Process*:
    1. Select compatible helicopter.
    2. Choose 'Ladder Insertion' task.
    3. Set insertion waypoint.
    4. Optionally, open rear cargo door.
    5. Entities descend ladder and move into formation when helicopter arrives.

- **Rope Ladder System Customization**:
  - Can be edited using Simulation Object Editor to attach it to the rear of the helicopter instead of the front crew door.

- **Ladder Insertion (Helicopter):**
  - Deployed from the rear of the helicopter.
  - Entities descend and move into formation around its base.
  - Task assignment: Select compatible helicopter > Embarkation > Ladder Insertion.
  - Optional settings:
    - Specify dropoff point (waypoints or plan variables).
    - Use cargo door to open vehicle's cargo door.
    - Choose ladder type (Figure 246).
  - Entities must have 'Insert Using Ladder' task assigned.

- **Entity Insertion via Ladder:**
  - Embarked entities with 'Ladder Insertion' task can be inserted using a ladder.
  - Task assignment: Select entity > Embarkation > Insert Using Ladder.

- **Dismount (Entities):**
  - Squads or fire teams embarked on aircraft/vehicles can dismount and assemble in formation.
  - Task assignment: Select squad/fire team > Embarkation > Dismount.

- **Internal Fuel Transfer (Tanker Aircraft):**
  - Tanker aircraft can transfer fuel to onboard supply using 'Internal Transfer of Fuel' task.
  - Task assignment: Select tanker aircraft > Logistics > Internal Transfer of Fuel.
  - Specify parameters:
    - Amount of fuel to transfer or fill up to capacity.
    - Replenishment rate.

- **Supply Transfer (Entities with Air Refueling Receiver System):**
  - Entities can receive fuel supplies from another entity using 'Transfer Supplies' task.
  - Task assignment: Select receiving entity > Logistics > Transfer Supplies.
  - Specify parameters:
    - Fuel type.
    - Fill up to capacity if desired.

- **Fuel Supply:**
  - Uncheck box if full fuel capacity is not desired.
  - Enter supply amount and transfer rate.
  - Select supplier from list, then confirm with 'OK'.

- **IFF (Identification Friend or Foe) Tasks:**
  - VR-Forces supports IFF interrogation using open standards.
  - Lethal Mode 5 interrogations check for Mode 5 enabled transmitters. Non-compliant targets briefly display a 'V'.
  - IFF information appears as warnings in the Object Console.

- **IFF Interrogate Task:**
  - Select entity, choose 'Task > IFF > IFF Interrogate'.
  - Specify target entity and modes to check.
  - Confirm with 'OK'.

- **IFF Sweep Interrogate Task:**
  - Select aircraft entity, choose 'Task > IFF > IFF Sweep Interrogate'.
  - Define sweep area (range and method: full circle, offset from orientation, or angle from boresight).
  - Specify modes to check for.
  - Confirm with 'OK'. Detected modes appear as warnings in the Object Console.

- **Radio Tasks** enable sending messages (set data requests or tasks) via VR-Forces radio network:
  - **Send Radio Set**:
    - Transmits a set data request to a simulation object using a radio message.
    - Options: broadcast to all configured recipients or send to a specific object.
    - Select desired set data request from a list.
    - Some sets require input; follow prompts in chapters 34 and 35 if needed.
  - **Send Radio Task**:
    - Transmits an independent task to a simulation object using a radio message.
    - Options: broadcast or send to a specific object.
    - Select desired task from a list.

- To assign either task:
  - Select the sending simulation object.
  - Choose `Task > Radio > [Send Radio Set/Task]`.
  - Configure recipients (broadcast or specific object).
  - Select the set/data request or task to send.
  - Click OK, and complete any additional prompts if needed.

- **Sending Text Messages:**
  - Use VR-Forces simulated radio messages to send text messages.
  - Receivers must be on the same radio network (same unit or force) for basic sending.
  - For different networks, use the 'Send Text Message' command from the Commands Menu.
  - To assign task:
    - Select sender object.
    - Choose 'Task > Radio > Send Text Message'.
    - Fill in recipient (broadcast or specific object name).
    - Type message text.
    - Click OK.

- **Wait Tasks:**
  - Order simulation objects to wait indefinitely, for a specified time, or until a specific elapsed simulation time.
  - Human objects can also wait in a queue.
  - Wait task doesn't immediately stop moving objects; controllers may still be active.
  - To assign tasks:
    - Select object.
    - Choose 'Task > Wait > [Task Type]'.
    - Fill in parameters (duration or elapsed time).
    - Click OK.

- **Tasks for Moving Articulated Parts:**
  - Some entity models have movable parts (doors, periscopes) that can be moved.

- **Car Door Operations (Vehicles with articulated car doors):**
  - Open Car Door:
    - Select vehicle
    - Task > Car Door > Open Car Door
    - Choose door from list
    - Optionally, set swing rate for opening speed
    - Click OK
  - Close Car Door:
    - Select vehicle with open door
    - Task > Car Door > Close Car Door
    - Choose door from list
    - Optionally, set swing rate for closing speed
    - Click OK

- **Cargo Door Operations (Entities with cargo doors):**
  - Open Cargo Door:
    - Select entity
    - Task > Cargo Door > Open Cargo Door
  - Close Cargo Door:
    - Select entity
    - Task > Cargo Door > Close Cargo Door

- **Refueling Tasks (Aircraft with appropriate refueling systems and articulated parts):**
  - Deploy Refueling Boom:
    - Select aircraft
    - Task > Refueling Parts > Deploy Refueling Boom
  - Stow Refueling Boom:
    - Select aircraft
    - Task > Refueling Parts > Stow Refueling Boom
  - Deploy/Stow Port or Starboard Refueling Drogue:
    - Similar to refueling boom tasks, but specific to port or starboard drogues

- **Refueling Drogue Tasks (KC-135 Stratotanker):**
  - *Deploy:*
    - Extends port or starboard refueling drogue.
    - Assign: Select entity, then choose 'Task' > 'Refueling Parts' > 'Deploy [Port/Starboard] Refueling Drogue'.
  - *Stow:*
    - Retracts deployed refueling drogue.
    - Assign: Select entity, then choose 'Task' > 'Refueling Parts' > 'Stow [Port/Starboard] Refueling Drogue'.

- **Towed Array Decoy Tasks (Aircraft with Towed Array Decoy system):**
  - *Extend:*
    - Deploys towed array decoy.
    - Assign: Select entity, then choose 'Task' > 'Other' > 'Extend Towed Array Decoy'.
  - *Retract:*
    - Retracts deployed towed array decoy.
    - Assign: Select entity, then choose 'Task' > 'Other' > 'Retract Towed Array Decoy'.

- **Periscope Tasks (Subsurface Entities):**
  - *Raise Periscope:*
    - Raises periscope (visible in Stealth observer mode).
    - Assign: Select entity, then choose 'Task' > 'Other' > 'Raise Periscope'.
  - *Lower Periscope:*
    - Lowers raised periscope.
    - Assign: Select entity, then choose 'Task' > 'Other' > 'Lower Periscope'.

- **Embedded Entity Tasks:**
  - Deploy and recover embedded entities from parent entities with a delay of a few seconds.
  - *Deploy:* Select parent entity, then choose 'Task' > 'Embedded Entity' > 'Deploy'.

- **Deploying an Entity:**
  - Select the entity to deploy.
  - Click 'OK'. It deploys next to the parent in its configured relative position.

- **Recovering Deployed Entities:**
  - Select the parent entity.
  - Choose 'Task' > 'Embedded Entity' > 'Recover'.
  - Select the entity to recover and click 'OK'. The deployed entity returns to its parent.

- **Sector Search Operation:**
  - Choose an entity with embedded entities.
  - Choose 'Task' > 'Sector Search Operation'.
  - Options:
    - Allow diversion of a deployed entity if necessary.
    - Force the parent entity to wait until the search is complete and the embedded entity is recovered before it continues with its plan, or allow the parent entity to continue with its plan while the search is underway.
    - Specify search parameters: starting point, length of each leg of the search (leg), altitude for the search aircraft, and speed of the search aircraft.
  - Click 'OK'.

- **Deploying an Entity by Assigning a Task:**
  - Select the parent entity.
  - Choose 'Objects' > 'Plan'.
  - Choose 'Embedded Entities' > 'entity' > 'Task' > 'task', where 'entity' is deployable and 'task' is one of the tasks available for that entity.
  - Fill out task parameters and click 'OK'. The task is added to the plan.

- **Entity Deployment and Task Assignment:**
  - Embedded entities are deployed from a parent entity's task or set menu.
  - Parent entity issues tasks to the deployed entity.
  - To deploy an embedded entity:
    - Select the parent entity.
    - Choose 'Objects > Embedded Entities > Entity > Task/Set'.
    - Fill out the dialog box and click OK.

- **Sonobuoy Deployment Tasks:**
  - Aircraft with a Sonobuoy Deployer system can deploy sonobuoys (passive only).
  - Two tasks available: 'Deploy Sonobuoy' and 'Deploy Sonobuoys Along Route'.
    - Both tasks require selecting sonar type, depth, and confirming with OK.
    - 'Deploy Sonobuoys Along Route' also requires selecting a route and specifying distance between sonobuoys.

- **Sonar Dip Task:**
  - Rotary-wing entities with sonar can dip it into water at a specified depth (passive only).
    - To assign: Select the entity, choose 'Task > Sonar Dip', specify location, duration, sonar type, depth, and confirm with OK.

- **Release Next Entity From Queue Task:**
  - Releases the entity at the front of a queue to proceed with its next planned task.
  - Can be assigned directly or via a plan for managing crowd queueing behaviors.
  - When an entity is released, the next one moves to the head of the queue.
  - To assign: Select the queue graphic > Task > Release Next Entity From Queue.

- **User Tasks:**
  - Custom tasks added using VR-Forces toolkit, requiring task name and up to four parameters.
  - Assigned via: Select object > Task > Other > User Task > Enter task name & parameters > OK.

- **Reactive Tasks (automatically executed):**
  - Listed in Table 28 with descriptions; can be enabled/disabled as needed.
  - Examples include:
    - Automatic Headlights: Turns headlights and taillights on/off based on local lighting conditions.
    - Jamming: Causes an entity to automatically respond to being tracked by radar.
    - Look: Causes humans to randomly look at other humans.
    - Terrain Show: Turns on the 'Show Terrain' task for an object upon creation.
    - Avoid Other Ships: Considers ship type and avoids surfaced submarines.
    - Bingo Fuel Monitor: Monitors fuel on embedded entities and requests recovery when bingo fuel level is reached.
    - Evade Missile: Causes fixed-wing entities to try to evade missiles.
    - Flee From Threats: Entity runs from explosions, gunfire sources, nearby entity deaths, or objects matching configured types.
    - IADS Launcher Control: Automates the launcher of an Integrated Air Defense system.
    - IFF Code Changer: Automatically changes the IFF code every half hour based on the time of day.

1. **Civilian Behavior:**
   - Civilians yield to emergency vehicles with lights on by pulling over.
   - Civilians visit nearby civilian visit points.

2. **Entity Suppression Postures:**
   - Entities adopt a crouching posture under suppression and lie prone at level 2 or 3 suppression, resuming previous posture when no longer suppressed.

3. **Background Processes (EntityLevel.sms):**
   - Deleting created pedestrians when pedestrian areas are deleted.
   - Gradually fading out illumination flares.
   - Managing queues for the 'Wait in Queue' task.

4. **Aggregate-Level Tasks:**
   - **Engagement Tasks:** Air-to-air/ground attacks, fire attacks, missile attacks (anti-air, anti-ship, land-attack), torpedo attacks, air defense, biological/chemical/nuclear attacks, indirect fire, bomb location.
   - **Combat Engineering Tasks:** Breaching obstacles, constructing barriers and defenses, destroying structures, improving defenses.
   - **Air Base Tasks:** Launching flights and QRA aircraft, preparing QRA.
   - **Movement Tasks:** Changing MOPP level/posture, escorting air units, halting movement, landing at air bases, moving along routes (including retrograde), patrolling, turning to headings, waiting for escorts or tasks.
   - **Embarkation Tasks:** Disembarking/embarking units.
   - **Radio Tasks:** Sending radio sets/tasks/text messages.
   - **Other Tasks:** Activating/deactivating jammers, dropping fuel tanks, refueling, sending NBC/obstacle reports, user-defined tasks.

5. **Background Process List:**
   - A list of background processes for aggregate-level scenarios is provided.

- **Air-to-Air Attack:**
  - Select air unit.
  - Choose 'Air-to-Air Attack' task.
  - Select target unit.
  - Optionally, set maximum engagement distance.
  - Click OK to initiate attack.

- **Air-to-Ground Air Base Attack:**
  - Select aircraft unit.
  - Choose 'Air-to-Ground Air Base Attack'.
  - Select air base and specific target part (optional).
  - Choose ingress and egress routes.
  - Unit attacks with all HE ammunition types successively, pausing 30 seconds between each.

- **Air-to-Ground Attack:**
  - Select attacking unit.
  - Choose 'Air-to-Ground Attack'.
  - Set target point, ingress route, and egress route.
  - Unit attacks with all HE ammunition types at the target point, pausing 30 seconds between each.

- **Attack By Fire (for aggregated units):**
  - Select unit and choose 'Attack By Fire'.
  - Set target location and attacking unit's position.
  - Artillery fires indirectly while other units engage nearby enemies.

- **Attack with Anti-Air Missile:**
  - Available to units with anti-air missiles.
  - Select unit and choose task.
  - No additional parameters required; unit attacks airborne targets within range.

- **Missile Attacks (Anti-Air, Anti-Ship, Land-Attack):**
  - Select the simulation object that will attack.
  - Initiate task via 'Task > Engagement' menu or respective button.
  - Choose a target for the attack.
  - Specify the number of missiles to fire.
  - Click 'OK' to confirm.

- **Torpedo Attack:**
  - Select the entity with torpedoes that will attack.
  - Initiate task via 'Task > Engagement' menu or 'Attack with Torpedo' button.
  - Choose a target for the torpedo attack.
  - Specify the number of torpedoes to fire.
  - Click 'OK' to confirm.

- **Automatic Air Defense:**
  - Select a simulation object with anti-air capability.
  - Initiate task via 'Task > Engagement' menu or 'Automatic Air Defense' button.
  - Define the area in which the simulation object should automatically fire anti-air weapons.
  - Click 'OK' to confirm.

- **Biological Attack:**
  - Select the simulation object that will make the attack (must have a biological weapon).
  - Initiate task via 'Task > Engagement' menu and choose 'Biological Attack'.
  - Choose the center location or specify coordinates for the area of attack.
  - Select the type of biological agent from the 'Agent Type' list.
  - Click 'OK' to confirm.

- **Bomb Location:**
  - Select the simulation object that will attack.
  - Initiate task via 'Task > Engagement' menu and choose 'Bomb Location'.
  - Choose the location to bomb or enter coordinates for the bombing target.

- **Bombing:**
  - Set target location by:
    - Clicking on the terrain.
    - Expanding the location group box and clicking the arrow next to the coordinates and altitude.
  - Specify number of bombs to drop.
  - Select bomb type from the Weapon list.
  - Confirm by clicking 'OK'.

- **Chemical Attack:**
  - Select unit for attack.
  - Choose 'Engagement' > 'Chemical Attack'.
  - Click on a location or specify coordinates for the center of the area of attack.
  - Select chemical agent type from the Agent Type list.
  - Confirm by clicking 'OK'.

- **Indirect Fire:**
  - Select unit for indirect fire task.
  - Choose 'Engagement' > 'Indirect Fire'.
  - Select target point on which to center the indirect fire.
  - Select weapon from the Weapon list; its characteristics are displayed.
  - Set number of attacks and sheaf radius, ensuring it's equal to or less than the weapon's max sheaf radius.
  - Confirm by clicking 'OK'.

- **Nuclear Attack:**
  - Select simulation object for nuclear attack.
  - Choose 'Engagement' > 'Nuclear Attack'.
  - Click on a location or specify coordinates for the center of the attack area.
  - Select type of radiation from the Agent Type list.
  - Confirm by clicking 'OK'.

- **Breach Obstacles:**
  - Allows engineering units to breach various obstacles such as fortifications, minefields, or ditches.
  - Task assignment:
    - Select a combat engineering unit.
    - Choose 'Task' > 'Combat Engineering' > 'Breach Obstacles', or click the Breach Obstacles button ().
    - Define a two-point line for the breach.

- **Construct Abatis:**
  - Units can create abatises (point-based obstacles) directly from the Create Object Palette.
  - Task assignment:
    - Select a combat engineering unit.
    - Choose 'Task' > 'Combat Engineering' > 'Construct Abatis', or click the Construct Abatis button ().
    - Define the location of the abatis.

- **Construct Anti-Tank Ditch:**
  - Units can construct linear anti-tank ditches over time.
  - Task assignment:
    - Select a combat engineering unit.
    - Choose 'Task' > 'Combat Engineering' > 'Construct Anti-Tank Ditch', or click the Construct Anti-Tank Ditch button ().
    - Define the vertices of the ditch's line.

- **Construct Barbed Wire:**
  - Units can create barbed wire obstacles (line-based).
  - Task assignment:
    - Select a combat engineering unit.
    - Choose 'Task' > 'Combat Engineering' > 'Construct Barbed Wire', or click the Construct Barbed Wire button ().
    - Define the line for the barbed wire.

- **Barbed Wire, Barricade, Berm Construction:**
  - Select a combat engineering unit.
  - Choose 'Combat Engineering' > 'Construct [Obstacle]' or click its button.
  - In the parameters dialog, click 'Define'.
  - In the Create [Obstacle] dialog, specify vertices of the line.
  - Optionally, enter a name for the obstacle.
  - Click OK in both dialogs to confirm.

- **Booby Trap Construction:**
  - Select a combat engineering unit with explosive resources.
  - Choose 'Combat Engineering' > 'Construct Booby Trap' or click its button.
  - In the parameters dialog, click 'Define'.
  - In the Create Booby Trap dialog, click on the desired location or type coordinates.
  - Optionally, enter a name for the booby trap.
  - Click OK in both dialogs to confirm.

- **Bridge Construction:**
  - Select a combat engineering unit.
  - Choose 'Combat Engineering' > 'Construct Bridge' or click its button.
  - In the parameters dialog, click 'Define'.
  - In the Create Bridge dialog, specify two points for the bridge line.
  - Click OK in both dialogs to confirm.

- **Bridge Construction:**
  - Specify start and end vertices on the terrain.
  - Optionally, provide a name for the bridge.

- **Dry Gap Construction (Combat Engineering):**
  - Select unit; choose 'Construct Dry Gap' task.
  - Define location; click to specify vertices; double-click to finish or use 'Create'.
  - Optionally, name the dry gap.
  - Can be continued with 'Improve Ditch' or destroyed with 'Destroy Ditch'.

- **Fortified Area Construction (Combat Engineering):**
  - Select unit; choose 'Construct Fortified Area' task.
  - Define location; click for southwest corner or type coordinates.
  - Optionally, name the area.
  - Construction occurs over time.

- **Fortified Line Construction (Combat Engineering):**
  - Similar to dry gap, but specifies vertices of a line instead.
  - Optionally, name the fortified line.

- **Minefield Construction (Combat Engineering):**
  - Select unit; choose 'Construct Minefield' task.
  - Create fixed-size rectangle minefield.
  - Optionally, name the minefield.

- **Minefield (Volcano) Construction:**
  - Specify location by clicking on the map or typing coordinates in the dialog box.
  - Optionally, provide a name for the minefield.
  - Confirm creation in the Construct Minefield dialog box.

- **Strong Point Construction:**
  - Select a combat engineering unit and initiate 'Construct Strong Point' task.
  - Define the southwest corner of the strong point by clicking on the map or typing coordinates.
  - Optionally, give the strong point a name.
  - Click OK to confirm creation.

- **Bridge Destruction:**
  - Select an engineering unit and choose 'Destroy Bridge'.
  - Choose the bridge to be destroyed from the list.
  - The unit consumes its Explosives resource while attacking the bridge.
  - The bridge's completeness decreases until it reaches zero and is removed from the scenario.

- **Ditch Destruction:**
  - Similar to Bridge destruction, but targets ditches or dry gaps instead.

- **Explosive Destruction:**
  - Select a combat engineering unit and choose 'Destroy Explosive'.
  - Choose the booby trap or unexploded ordnance to be destroyed from the list.

- **Fortification Destruction:**
  - Similar to Bridge destruction, but targets fortifications.
  - The unit consumes its Explosives resource while attacking the fortification.
  - The fortification's completeness decreases until it reaches zero and is removed from the scenario.

- **Destroy Obstacle:**
  - Destroy obstacles (berms, barricades, barbed wire) without specific destroy tasks.
  - Steps:
    - Select a combat engineering unit.
    - Choose Task > Combat Engineering > Destroy Obstacle or click the Destroy Obstacle button.
    - Select the obstacle to be destroyed.
    - Click OK.

- **Improve Structures/Obstacles:**
  - Four similar tasks allow a combat engineering unit to enhance incomplete structures or obstacles up to its capability:
    - Improve Booby Trap
    - Improve Breach
    - Improve Bridge
    - Improve Ditch
  - Each task follows these steps:
    - Select a combat engineering unit.
    - Choose Task > Combat Engineering > specific improvement task (e.g., 'Improve Bridge').
    - Select the structure/obstacle to improve.
    - Click OK.

- **Improve Fortification:**
  - Improve incomplete fortification areas, lines, or strong points.
  - Steps:
    - Select a combat engineering unit.
    - Choose Task > Combat Engineering > Improve Fortification.
    - Select the fortification to improve.
    - Click OK.

- **Improve Obstacle Task (Combat Engineering):**
  - Improves incomplete obstacles such as berms, barricades, or barbed wire.
  - Unit enhances obstacle to its maximum capability.
  - Can assist other units constructing obstacles.
  - Steps:
    - Select a combat engineering unit.
    - Choose 'Task' > 'Combat Engineering' > 'Improve Obstacle'.
    - Select the obstacle to improve.
    - Click 'OK'.

- **Air Base Tasks:**
  - **Launch Flight:** Configures and launches a flight of aircraft from an air base.
  - Aircraft, munitions, fuel, and crews are provided by the air base if available.
  - Parameters:
    - Call sign (any text).
    - Aircraft type (must be assigned to the air base).
    - Number of aircraft in the flight.
    - Loadout (selected from a list).
    - Mission superior (optional, for multi-unit missions).
    - Mission type (BAI, CAP, CAS, etc.).
    - Launch time (immediate or specified date/time).
    - Wait for launch (global plans only).
  - Steps:
    - Select an air base.
    - Choose 'Task' > 'Launch Flight', or click the 'Launch Flight' button.
    - Specify flight details in the parameters display.
    - Click 'OK'.

- **Launch Aircraft:**
  - Launch aircraft immediately or specify a launch date and time.
  - For global plans only, optionally pause the plan until the flight is launched.

- **Launch QRA Aircraft (Quick Reaction Alert):**
  - Create an air unit and launch specified Quick Reaction Alert (QRA) aircraft.
  - Process: Select an air base, initiate 'Launch QRA Aircraft', set a call sign for the new unit, specify the number of aircraft to include, then confirm.

- **Prepare QRA:**
  - Assign aircraft to quick reaction alert status with specific details.
  - Steps: Choose an air base, start 'Prepare QRA', select aircraft type and quantity, choose loadout, set preparation time (immediately or specific), and response time, then confirm.

- **Movement Tasks for Aggregate-Level Scenarios:**
  - **Change MOPP Level:** Manually adjust a unit's mission oriented protective posture (MOPP) level between 0 to 4.
    - Process: Select the unit, choose 'Change MOPP Level', set the new MOPP level, then confirm.

  - **Change Posture:** Set simulation object's posture to one of six options (Travel, Reconnaissance, Hasty/Deliberate attack/defense).
    - Steps: Choose the simulation object, select 'Change Posture', pick a new posture, then confirm.

- **Change Posture:**
  - Access: Task > Movement > Change Posture or click button.
  - Action: Specify and apply a new posture.

- **Escort Air Unit:**
  - Access: Select air unit, then Task > Movement > Escort Air Unit or click button.
  - Action: Set meeting location and select unit to escort.

- **Halt Movement:**
  - Access: Select object, then Task > Movement > Halt Movement or click button.
  - Action: Object stops moving immediately.

- **Land at Air Base:**
  - Access: Select aircraft unit, then Task > Movement > Land at Air Base or click button.
  - Action: Select air base for landing.

- **Additional Movement Tasks** (for details, see respective sections):
  - Move Along Route
    - Regular route movement with heading change.
  - Move Along Route Retrograde
    - Route movement without changing heading.
  - Move To Location
    - Direct movement to a specific location with heading change.
  - Move To Location Retrograde
    - Direct movement without changing heading.
  - Move To Waypoint
    - Movement along a path to a waypoint with heading change.
  - Move To Waypoint Retrograde
    - Movement along a path to a waypoint without changing heading.
  - Patrol Route
    - Repeated movement along a route.
  - Patrol Between
    - Movement between two points in a loop.

- **Turn To Heading:**
  - Action: Entities instantly turn to a new heading.

To assign specific tasks in VR Force at an aggregate level:

- **Turn to Heading:**
  - Select entity.
  - Choose Task > Movement > Turn to Heading.
  - Specify heading (absolute or relative) and click OK.

- **Wait for Escort (Aircraft Unit):**
  - Select aircraft unit.
  - Choose Task > Movement > Wait for Escort.
  - Choose waypoint and click OK.

- **Wait Tasks:**
  - Unconditional wait, wait for duration, or wait until simulation time. See "30.6. Wait Tasks" for details.

- **Embarkation Tasks (Disembark, Disembark All, Embark):**
  - Refer to respective sections ("30.1.1", "30.1.2", and "30.1.3") for detailed procedures.

- **Radio Tasks:**
  - Send Radio Set: See "30.5.1".
  - Send Radio Task: See "30.5.2".
  - Send Text Message: See "30.5.3".

- **Other Tasks:**
  - Activate Jammer: Select object > Task > Jamming > Activate Jammer.
  - Deactivate Jammer: Select object > Task > Jamming > Deactivate Jammer.
  - Drop Fuel Tanks (Air Unit): Select air unit > Task > Drop Fuel Tanks.
  - FASCAM (Artillery, etc.): Select object > Task > FASCAM. Define location and create minefield.

These summaries provide key points for each task while minimizing information loss. For detailed procedures, refer to the specified pages in the VR-Forces Users Guide.

- **Minefield Creation:**
  - Specify southwest corner: Click on map or type coordinates in dialog box.
  - Optional: Set heading.
  - Confirm: Click 'OK' in FASCAM dialog.

- **Refuel from Tanker (Aircraft Unit):**
  - Aircraft actions: Fly to tanker, refuel, move away following tanker's messages.
  - Information exchange: Aircraft provides unit info and max transfer rate to tanker.
  - Initiation: Select aircraft unit, choose 'Refuel from Tanker', select tanker, click 'OK'.

- **Refueling Mission (Tanker Aircraft):**
  - Tanker actions: Fly route or holding pattern, await refuel requests.
  - Setup: Select capable tanker, choose 'Refueling Mission', set altitude, fuel reserve, route/pattern, click 'OK'.

- **Send NBC Report:**
  - Purpose: Manually report nuclear, biological, or chemical contamination area.
  - Process: Select object, choose 'Send NBC Report', select contamination area, specify engagement result, click 'OK'.

- **Send Obstacle Report:**
  - Purpose: Manually report obstacle area.
  - Process: Select object, choose 'Send Obstacle Report', select obstacle, specify engagement result, click 'OK'.

- **User Task:** Refer to "30.13. User Task" on page 682 for details.

- **Background Processes:**
  - Automatically run; no user action required.
  - Available only for units in AggregateLevel.sms.
  - Tasks:
    - Attack Enemies: Determines when to start and stop attacking enemies.
    - Attrit Air Base: Handles air-to-ground attacks against an air base.
    - Calculate Maximum Speed Modifier: Modifies a unit's movement rate.
    - Make EW Attack: Attacks non-friendly simulation objects within range of a jammer system.
    - Manage Air Base: Launches scheduled flights and updates resources for an air base.
    - Perform Attrition: Modifies a unit's health based on the current attrition rate.
    - Provide Supplies: Checks if conditions allow providing supplies to friendly units in range.
    - Receive Construction: Allows an engineering object to receive construction from other simulation objects.
    - Resize Footprints: Updates the size of a simulation object's physical and sensor footprints.
    - Update Combat Effectiveness: Updates the combat effectiveness state of a simulation object.
    - Update EW Degradation: Processes jamming interactions and computes communication/radar degradation.
    - Use Supplies: Uses supplies based on the current activities of a simulation object.

- **Scripting:**
  - VR-Forces allows creating new tasks and setting data requests via scripts written in Lua.
  - No C++ knowledge or developer license required.
  - Script types:
    - Task
    - Set
    - Reactive Task: Responds to specific events or conditions.
    - Background Process: Automatically runs in the background, similar to built-in processes.
  - Script metadata includes:
    - ID
    - Menu icon
    - Extended name (displayed in menus)
    - Short description
    - Detailed description
    - Parameters required for script execution
    - Menu location
    - Action categories
    - Availability to specific simulation object types
    - Equivalent scripts for toolbar button
    - Programming language (Lua)

- **Script Management:**
  - New scripts can be created, saved, edited, and filtered in the list.
  - Concurrent scripted tasks can be configured to run simultaneously.

- **Script Organization:**
  - Folders: Add, rename, delete; add/remove scripts.
  - Import/Export: Script packages.

- **Script Management:**
  - Copy, delete individual scripts.
  - Create system (global) or scenario-specific scripts.

- **Script Editor:**
  - Default: ZeroBrane Studio; configurable.

- **Script Capabilities (Lua language):**
  - Object manipulation (create/delete), weather setting, object status retrieval, resource monitoring, tasking other objects, terrain testing, etc.
  - Types: Task (independent/plan-based), Reactive Task (condition-activated), Background Process (continuous), Set Data Request (non-interrupting state change).

- **Scripted Tasks:**
  - Add to Task menu like built-in tasks; specify input parameters during creation.

- **VR-Forces Scripting:**
  - Automatically builds dialog boxes for parameter input or uses Qt Designer for custom layouts.
  - Supports three script types: Scripted Sets, Reactive Task Scripts, and Background Process Scripts.

- **Scripted Sets:**
  - Added to the Set menu with user-defined input parameters.
  - Cannot issue tasks to executing entities or others.

- **Reactive Task Scripts:**
  - Monitor simulations and activate when conditions are met.
  - Not added to the Task menu; creation and writing process is similar to other scripts, unless noted otherwise.

- **Background Process Scripts:**
  - Run in the background for specified simulation object types with no user interface or input parameters.

- **Script Components:**
  - Each script has code and metadata (name, menu placement, parameters).
  - Uses Lua scripting language; VR-Forces provides Lua functions mapping built-in tasks and set data requests.

- **Creating a New Script:**
  - Start by specifying the script's name and adding it to the list.
  - Edit metadata and code iteratively until completion.
  - All new scripts are scenario scripts; save as system scripts if needed.
  - Requires an open scenario for creation.

To create a new script in VR-Forces:

1. **Context**: Create your system script within a scenario.
2. **Access Scripts Dialog Box**:
   - Go to Simulation > Scripts.
   - Alternatively, right-click on the desired folder and select New > Script (if using a folder hierarchy).
3. **Create New Script**:
   - Choose Script > New Script or click the New Script button.
   - Select script type: Task, Reactive Task, Set, Background Process, or Behavior Task.
4. **Fill in Metadata**:
   - Provide unique Script ID (VR-Forces generates default).
   - Choose Language: Lua for Lua scripts, C++ for new task controllers.
   - Enter Name and Extended Name for menu display.
   - Add Short Description for Plan windows and optional full Description.
   - Optionally, include Version for different script versions.
5. **Additional Settings**:
   - For tasks, specify Action Categories to manage task concurrency.
6. **Preview/Edit Script**:
   - Click Preview to see created dialog box.
   - Click Edit Script to begin writing code using Lua or C++ (not applicable to reactive tasks and background processes).
7. **Add Script**:
   - Click Add to include script in the Scripts window list.
8. **Save Scenario**: Save scenario to save script task as part of it.
9. **Write Code**: Refer to "Chapter 33. Writing Scripts" (page 755) or "Chapter 34. Writing Advanced Scripts with the Behavior Engine" (page 787) for detailed coding.

- **Script Metadata Fields:**
  - **Input Field:** Description of the field's purpose.
  - **Concurrency:** Allows managing multiple instances of a task simultaneously (see "32.2.12" on page 743).
  - **Tool Tip Text:** Optional tooltip when the script is selected on a menu (not applicable to reactive tasks and background processes).
  - **Menu Icon:** Optional icon next to the name on a menu (details in "32.2.2" on page 725, not for reactive tasks/background processes).
  - **Parameters:** Input parameters required by the task/set (details in "32.2.6" on page 727, not for background processes).
  - **Command Level:** Specifies where the task/set displays in the Command Panel (Primary, Secondary, Tertiary; see "25.1.1" on page 530).
  - **Magic Command:** Option to make tasks/sets a magic command (like 'Invulnerable' or 'Undetectable'; not available in reality).
  - **Display Options:**
    - Show on top-level right-click menu.
    - Show on task menu.
    - Show on set menu.
    - Add to task toolbar.
    - Add to set toolbar.
  - **Menu Location:** Specifies where the script will be listed on the Task/Set menu (details in "32.2.7" on page 736, not for reactive tasks/background processes).
  - **Availability:** Make available based on specific simulation object types.

- **Notes:**
  - Concurrent task execution details are in "25.1.4" on page 533 (does not apply to background processes or sets).
  - Some fields are optional and may not apply to certain tasks/processes, as noted.
  - The summary maintains key points while condensing information from the provided text chunks.

- **Script Availability:**
  - Controlled by 'Make Available' options:
    - Based on Entity Type (default: All)
    - Based on Behavior Sets (select sets for script availability; see "25.4. Using Behavior Sets to Manage Scripts")
    - To Global Plans (script appears on Task or Set menu in global plans if selected)

- **Toolbar Location:**
  - Assign scripts to toolbar buttons (see "32.2.10 Specifying Equivalent Scripts for a Toolbar Button")

- **Reactive Tasks:**
  - Enabled by Default: Automatically enabled for supported simulation object types
  - Priority: Set task priority (see "25.3. Reactive Tasks")
  - Compare Priorities: Lists valid reactive tasks to help set priority

- **Script ID:**
  - Unique identifier for each script, used internally and when referencing scripts in plans
  - Changing ID requires ensuring uniqueness and updating references (except for system scripts, where VR-Forces generates an alias)
  - Recommended to use lowercase letters

- **Menu Icon:**
  - Optional: Add an icon next to menu text on Task or Set menu

1. **Menu Icon Management:**
   - To add a menu icon:
     - Click the 'Add' button next to the 'Menu Icon' label.
     - Browse and select the desired icon, then click 'Open'.
   - To remove a menu icon:
     - Click the 'Remove' button next to the 'Menu Icon' label.

2. **Scripted Tasks & Sets Configuration:**
   - **Extended Name:** Allows differentiation between scripts with the same name but different functionalities.
   - **Short Description:** Provides a concise, meaningful description for tasks or sets in the Plan window. Supports variable data (e.g., `$variable_name`).
   - **Description:** Offers context-sensitive help to users specifying parameter values. Can be displayed on generated dialog boxes.
   - **Parameters:** VR-Forces automatically generates an input dialog box when you specify parameters for a script, allowing easy entry of required values.

**Key Points:**
- Menu icon addition and removal process.
- Extended name usage to distinguish between scripts with the same name but different behaviors.
- Short description for improved readability in the Plan window, supporting variable data.
- Description for context-sensitive help and customization of its display on generated dialog boxes.
- Automatic parameter input dialog box generation when specifying parameters for a script.

The VR Forces User Guide lists various script parameter types, categorized as follows:

1. **Location and Movement:**
   - Altitude: Above Mean Sea Level (MSL), Rate of Change
   - Depth: Below Mean Sea Level (MSL)
   - Distance: Large, Small
   - Heading, Heading Label
   - Location: With/Without Altitude

2. **Entity Selection:**
   - Sonar Mode: Active
   - Weapon Selection: Direct Fire, Indirect Fire
   - Entity Slots/Deployment: Embarkation Slot, Embedded Entity
   - Jamming: Jammer Selector, Jamming Mode
   - Aircraft Loadout (aggregate level only)
   - Munitions and Mines: Munition Resource, Naval Mine Resource

3. **Miscellaneous Entities and Parameters:**
   - Formations: Aggregate Formation
   - Entities: Country, DI-Guy (Animation, Appearance, Gesture)
   - Force Selection
   - DI-Guy Name Tag
   - Graphics: New Tactical Graphic, Object Type/Types
   - Observer Modes: Observer Mode, Saved View
   - Offset Location

4. **User Interface Elements:**
   - Boolean Input: Checkbox
   - Choice Selection: Drop-Down List, Image Drop-Down List, Multiple/Single Option Buttons
   - Color Picker
   - Date/Time Input
   - Filename Input
   - Integer Input, Integer Map

5. **Special Parameters:**
   - Altitude Label (independent of altitude parameter)

- **Positioning Parameters:**
  - Offset: Specifies side, behind, and above positions.
  - Overlay Parent: Allows selecting an overlay.

- **Simulation Object Parameters:**
  - Pitch: Specifies pitch for a simulation object.
  - Radar Mode: Selects radar mode based on entity type; adding this parameter automatically adds Emitter ID.
  - Radar Selector: Selects radar type based on entity type.
  - Range Label, Rate Label, Turn Rate Label: Add respective labels independently.

- **Geometry and Terrain Parameters:**
  - Sphere: Creates a sphere for defining an area on the terrain.

- **Data Type Parameters:**
  - Real: Floating-point decimal number.
  - String: Alphanumeric string.
  - Resource: Lists available resources.

- **Unit and Soldier Parameters:**
  - Subordinates: Selects one or more of a unit's subordinates.
  - Unit Patches, Rank Patch: Specifies patches for DI-Guy soldiers.
  - Visual Meta Data: Selects markings for objects supporting settings marking.

- **Time Parameter:**
  - Time: Specified in days:hours:minutes:seconds format.

- **Adding Script Parameters:**
  - Click 'Add' button to open the Add Parameter dialog box.
  - Enter a parameter name and select its type (e.g., Real, String, etc.).
  - Fill out required details based on selected parameter type.

- **Parameter Access:** In Lua code, access parameters using `taskParameters.parameterName`.
- **Label & Button Group:**
  - Label: Text displayed on the dialog box; if left blank, parameter name is used.
  - Button Group: For Choice (Single Option Button) parameters, specifies the group for option buttons to ensure mutual exclusivity.
- **Tool Tip Text:** Optional text that appears as a tooltip when hovering over the parameter.
- **Indent Level:** Controls formatting of the dialog box; multiplied by the Indent setting in Application Settings to apply some formatting.
- **Required (Simulation Object lists only):** Makes the parameter mandatory before enabling the OK button on the dialog box.
- **Visible Checkbox:** Includes or excludes the parameter on the script dialog box, allowing for parameters available in code but not set by users.
- **Default Value/State:**
  - Many parameters have an optional default value or state.
  - Initialize from State: Associates a parameter with a state property; users see its values in the scripted task dialog.
- **Range (Bottom & Top):** Sets lowest and highest acceptable values for applicable parameters, if applicable.
- **Boolean Parameter Default:** Specifies whether a checkbox is selected or cleared by default.
- **Special Properties:**
  - Affects Controls: Populates fields with actual simulation object state values when selected.
  - Choice: Adds choice option buttons; see "Specifying Choices for the Choice Parameters" for details.
  - Filter Category: Lets you add categories for filtering object lists; see "Specifying Categories for a Simulation Object" for details.
- **Option Button Types:**
  - Multiple (Choice): Typical option list with mutually exclusive choices, automatically associated with each other (Figure 261).
  - Single (Button): Individual option buttons placed anywhere on the dialog box, associated using a button group for mutual exclusivity (Figure 262).

- **Choice Parameters (Single Option Button, Drop-Down List, Image Drop-Down List, Multiple Option Buttons)**:
  - Create multiple sets of options and button groups.
  - Use Qt Designer to associate parameters with options for Single Option Button.
  - Specify a list of choices (text or images) for all choice parameters.
    - **Adding Choices**:
      - Text Choice: Click 'Add Parameter', type text, click OK. Repeat for each choice.
      - Image Choice: Click 'Add Parameter', select image path/file, click OK. Repeat for each image.
    - **Editing/Deleting Choices**: Use respective buttons in the dialog box.

- **Simulation Object Parameter**:
  - Build a list of categories to filter simulation object types in a dialog box.
  - **Adding Categories**: Click 'Add Parameter', select a filter, and click OK.
  - **Editing/Deleting Categories**:
    - Select parameter, click 'Edit'.
    - In Script Variable dialog box, select filter, click 'Edit' (to change category) or 'Delete'.

- **Affects Controls Option:**
  - Checkbox 'Affects Controls' in 'Simulation Object (Single)' and 'Simulation Objects (Multiple)' parameters.
  - When selected, updates related parameter values to match the chosen simulation object:
    - DI-Guy: Animation, Appearance
    - Embedded Entity, Emitter, Force, Formation, Location, Overlay, Weapon

- **Setting Indentation Distance for Script Dialog Boxes:**
  - Modify 'Indent' value in Application Settings (Script Settings page) to adjust indentation distance.

- **Specifying a Menu Location for Scripts:**
  - Scripted tasks and sets added to Task/Set menu by default.
  - Use 'Edit' button on 'Menu Location' line to define script's position:
    - For task scripts: Select Location on Task Menu dialog box
    - For set scripts: Select Location on Set Menu dialog box
  - Add script to existing submenu or top level, before/after chosen menu item.
  - Script appears on menu post scenario reload. Alphabetization is default but can be disabled.

**Key Points Added:**
- Clarified that 'Affects Controls' checkbox only updates parameters when a simulation object is selected in the task dialog box.
- Specified that 'Indent' value determines the level of indentation, not the actual distance.
- Explained that scripted tasks and sets are added to respective menus by default if no specific location is set.

- **Creating a New Submenu:**
  - Select the submenu's location.
  - Click 'Add Menu Before' or 'Add Menu After'.
  - Enter a name and click OK.
  - Add your script to this new submenu.

- **Task Concurrency (Action Categories):**
  - Tasks can run simultaneously or exclusively.
  - C++ tasks are grouped for concurrency management.
  - When creating/editing a task, specify interruptions by selecting action categories.

- **Script Availability:**
  - Scripts can be available based on:
    - Simulation object types.
    - Behavior sets.
    - System definitions.
  - Default: available to all objects. Settings interact as shown in Table 32.

- **Specifying Valid Simulation Object Types for a Script:**
  - Restrict scripts to specific simulation object types.

1. **Script Visibility Control:**
   - Scripts won't appear on menus for invalid simulation objects.
   - Users must determine if a script is valid for the selected object, especially with global plans.
   - To specify valid entity types:
     - Enable 'Make Available Based on Entity Type'.
     - Click 'Add' to open the 'Object Type' dialog.
     - Select options or type enumerations for each field (e.g., Kind, Domain, Country).
     - Use wildcards for matching.

2. **Behavior Set Restriction:**
   - Scripts can be restricted to specific behavior sets.
   - Enable 'Make Available Based on Behavior Set'.
   - Select desired behavior sets; create them before assigning scripts.

3. **System Definition Specification:**
   - Some scripted tasks/sets are available via system definitions, not object types.
   - They're specified by script IDs in the `script-ids` parameter (e.g., in AggregateLevel.sms).
   - Script IDs can also be specified in `script-enable-controller` and derived controllers.
   - Variables described in `script-variables` blocks are accessible to scripts through `vrf:getScriptAttribute()`.

1. **Aggregate-Indirect-Fire-Controller Update:**
   - Added `script-ids` parameter: "Indirect_Fire", "Limited_Munition_Attack".
   - Any object with this system can use these scripted tasks.
   - Example from obstacle-builder.sysdef uses `create-script-id` and `improve-script-id`.

2. **Equivalent Scripts for Toolbar Button:**
   - Map different scripts to the same toolbar button based on simulation object type.
   - Steps:
     - Create a new script.
     - Show it on task/set toolbar.
     - Select equivalent task/set.
     - Save the script.

3. **Programming Language for Scripts:**
   - Options: Lua (default) or C++.
   - Lua for most tasks/sets, C++ for adding GUI components to new tasks/sets developed with VR-Forces Toolkit.
   - Reactive tasks and background processes always written in Lua.

- **Adding C++ Tasks:**
  - Developers can add new C++ task controllers using the scripted task interface.
  - Example use case: Deploy and Recover tasks for embedded entities create dialog boxes this way.
  - Display C++ tasks in Scripts dialog box by selecting 'Show C++ Tasks' checkbox.

- **Concurrent Task Execution:**
  - Entities can run multiple instances of a task simultaneously if allowed.
  - Useful for managing non-conflicting activities, like an air base launching two flights.
  - Enable concurrent execution via 'Can Be Executed More Than Once at a Time' checkbox in Edit Scripts dialog box.

- **Creating Scripted Sets:**
  - Similar to scripted tasks but without action categories.
  - Steps:
    - Open Scripts dialog box.
    - Select folder (if any) for the new script.
    - Click New Script button.
    - Choose 'Set' as script type.
    - Fill in metadata fields.

- **Creating Reactive Tasks:**
  - Process similar to other scripts with some differences in metadata fields.
  - Steps:
    - Open Scripts dialog box.
    - Select folder (if any) for the new script.
    - Click New Script button.
    - Choose 'Reactive Task' as script type.
    - Fill in metadata fields.

- **Creating Reactive Tasks:**
  - Fill out common fields as described in Table 30 on page 724.
  - Enable by default: Select the 'Enabled By Default' checkbox.
  - Set priority:
    - Lower number = higher priority.
    - View a list of valid reactive tasks for reference.
  - Optionally, click 'Compare Priorities' to see task priorities.
  - Click 'Add'.

- **Creating Background Processes:**
  - Open Scripts dialog box: Choose Simulation > Scripts.
  - Select folder (if using hierarchy): For more details, see "32.6. Organizing Scripts into Folders" on page 748.
  - Create new script: Choose Script > New Script or click the New Script button.
  - Select 'Background Process' in the Script Type list.
  - Complete common fields as described in Table 30 on page 724.
  - Click 'Add'.

- **Saving Scripts:**
  - Unsaved scripts appear italicized with an asterisk in the Scripts window.
  - Save changes:
    - Scenario scripts: Save the scenario.
    - System scripts: Update via the 'Update' button after editing.
  - Metadata for system scripts saved as `./data/simulationModelSets/<model_set>/scripts/script_name.xml` (lower case).

- **Editing Scripts:**
  - Editing affects all scenarios using the script if it's a system script.

- **Editing Script Metadata:**
  - Open 'Scripts' window (Simulation > Scripts).
  - Select desired script and identify its type using the icon in the 'Script ID' column.
  - Edit metadata via either 'Script' menu's 'Edit Script Meta Data' option or by double-clicking the script name. A confirmation prompt appears for system scripts.
  - Click 'Update' to save changes.

- **Filtering Scripts:**
  - Filter options:
    - Script Access: Show system scripts, scenario scripts, or all scripts.
    - Script Type: Show scripted tasks, reactive tasks, sets, background processes, or all scripts.
    - Entity Type: Show scripts applicable to the selected simulation object type. Some scripts may not list any entity types.
    - Show C++ Tasks: Toggle display of tasks and sets written in C++, but with GUIs created using the script mechanism.

- **Organizing Scripts into Folders:**
  - **Adding a Folder:** Choose 'Add Folder' from the 'Folders' menu, enter a name for the new folder.
  - **Renaming a Folder:** Select the folder, choose 'Rename Folder', and enter a new name.
  - **Deleting a Folder:** Cannot delete folders containing scripts. Select an empty folder and choose 'Delete Folder'.
  - **Adding Scripts to a Folder:** Drag and drop scripts onto the desired folder.
  - **Removing Scripts from a Folder:** Drag and drop scripts away from the folder.

- **Exporting and Importing Scripts:**
  - Scenario scripts are saved within the scenario's SPT file, not as individual files.
  - Export one or more scripts as a package from one scenario for import into another. The script package cannot be modified; create a new package for changes.

- **Exporting Scripts:**
  - Open 'Scripts' window via Simulation > Scripts.
  - Select desired scripts.
  - Choose Script > Export Script Package.
  - Save as '.spt' file, containing metadata and script code.

- **Importing Scripts:**
  - Open 'Scripts' window.
  - Choose Script > Import Script Package or click Import Scripts.
  - Select '.spt' file.
  - In the Import dialog box, choose scripts to import while maintaining folder hierarchy.

- **Copying a Script:**
  - Open 'Scripts' window.
  - Select script to copy.
  - Choose Script > Duplicate.
  - Edit and save as new script. Copied system scripts keep their ID; copied scenario scripts get new IDs.

- **Deleting a Script:**
  - Open 'Scripts' window.
  - Select script to delete.
  - Choose Script > Delete Script. Be cautious, as deleting used scripts may cause failures without warning.

- **Creating a System Script:**
  - Create a scenario script and save it as a system script (saved in './data/simulationModelSets/<model_set>/scripts').
  - System scripts consist of two files: one for metadata (.xml) and one for the script code.

- **Script File Format & Saving as System Script:**
  - Scripts are saved in Lua format (.lua).
  - To save a scenario script as a system script:
    - Open the Scripts window (Simulation > Scripts).
    - Select the desired script.
    - Choose "Promote to System Script" and confirm.

- **Including System Scripts on Task and Set Menus:**
  - Most system scripts are listed by default, but some can be excluded for clutter reduction or deployment limitations.
  - Inclusion control via:
    - Checkboxes in New/Edit Script dialog boxes ('Show Task on Task Menu'/'Show Set on Set Menu').
    - Checkbox next to the script's entry in the Scripts dialog box.
    - Behavior sets (additive effect, see "25.4. Using Behavior Sets to Manage Scripts" for details).
    - Crowd tasks file names in specific folder.

- **Scripted Task Inclusion on Menu:**
  - Table 33 shows task menu listing based on 'Show Script on Menu' checkbox configurations:
    - Yes/Yes: Included.
    - No, for this scenario/No: Not included.
    - Yes/No: Not applicable (system script list check box not relevant).

- **Changing System Script Availability on Menu:**
  1. Open the Scripts window (Simulation > Scripts).
  2. Select the desired system script.
  3. Choose "Edit Script Meta Data".
  4. In the Edit Script dialog box, select/clear 'Show Task on Task Menu' checkbox based on Table 33.
  5. Click "Update" to save changes.
  6. In the scripts list, select/deselect the checkmark next to the script for immediate effect (hidden from menu if unselected).

1. **Crowd Task Addition:**
   - Edit `./data/simulationModelSets/EntityLevel/vrfSim/systems/movement/pedestrian-crowd-movement.sysdef`.
   - Add the new task to the script-ids list.

2. **Script Editor Specification:**
   - Open Application Settings > Script Settings.
   - Click Browse next to Script Editor, select your preferred editor (ZeroBrane Studio is included), and click Open.

3. **Lua File Editing:**
   - Use Scripts dialog box or Scripts window to edit Lua files.
   - Edit independent function libraries in `./userData/scripts` directly using any text editor or through the Scripts dialog box.

4. **Scripting Basics (Chapter 33):**
   - VR-Forces uses Lua for scripting, with classes and modules for common tasks.
   - Scripts have specific entry points (`OnStart`, `OnStop`, etc.) and execution sequences.
   - Monitor task status, stop tasks, and use task parameters.
   - Work with geometry (Location3D, Vector3D, etc.), code messages for translation, detect errors, and create interactive scripts.
   - Examples include creating a simple task (Create and Move to Waypoint), a scripted set, and a reactive task.

5. **Background Processes:**
   - VR-Forces supports background processes for continuous execution during simulation.

The VR-Forces Lua Interface (33.1.1 Lua Classes) provides a set of classes and pre-defined objects to facilitate scripting in the simulation. Access the documentation via the Windows Start menu's Documentation folder or at `./doc/luadoc/index.html`. Key points include:

- **Lua Class Structure**: Lua classes abstract object information and collect related methods. To call a method 'fn' on an object 'obj', use: `obj:fn()`.

- **Pre-defined Classes & Objects**:
  - **ComponentSystem**: Represents simulation object capabilities (movement, damage, weapons, sensors). Accessed via `this:getSystem()`.
    - *Methods*: Get attributes of the system.

  - **FeatureSet**: Represents terrain database query results. Created with a vrf query function.
    - *Methods*: Examine features' attribute values and vertex locations.

  - **Geometric classes**:
    - `Location3D`: Represents a 3D location.
    - `Vector3D`, `VectorGeoc3D`, `VectorOffset3D`: Represent geometric vectors (see "33.4. Geometry" for more details).

  - **ScriptAnimationModel**: Animates entity movement, serialized to the simulation.
    - *Methods*: Control and access animation data.

  - **SensorGimbal**: Represents a rotating sensor on a gimbal.
    - *Methods*: Control and access sensor data.

  - **SimObject**: Represents any single object in the simulation (entities, waypoints, routes). Accessed via vrf functions.
    - *Methods*: Get information about the object such as location, force type, and embarkation status.

- **Articulated Parts**:
  - `SwingingArtPart`: Represents a rotating articulated part.
  - `TranslatableArtPart`: Represents a translating articulated part.
- **Text Stream Translation**: `TranslatableStream` can be translated by VR-Forces for display in the GUI, based on the user's language setting.
- **Lua Object References**: Lua variables assigned to objects hold references, not copies. Geometric objects have `makeCopy()` methods for creating copies.
- **Reserved Words**: Table 34 lists reserved words that should not be used except for their intended purpose in VR-Forces Lua scripts.
- **Lua Modules**: The Lua interface includes modules like `aggregateUtils`, `airportDataUtils`, `behaviorEngine`, etc., which provide useful capabilities and definitions related to specific aspects of the simulation.

The text discusses utility modules, global functions, and script loading/execution processes in VR-Forces' Lua interface:

1. **Utility Modules:**
   - `msgUtil`: Manages object or text message queues.
   - `munitionLauncherUtils`: Supports munition-launching scripts (Delayed_homing, Launch_ASW_Missile).
   - `parseUtil`: Assists in parsing strings from received messages.
   - `pathUtil`: Facilitates path planning and ground-clamping points on a route.
   - `spatialUtil`: Computes spatial data using points, vectors, etc.
   - `swgs_test`: Contains utility functions for SWGS performance test scenarios.

2. **Global Utility Functions:**
   - `vrfutil` is not a Lua module but a set of global utility functions available by default in new scripts due to the `require "vrfutil"` line in the template.

3. **Script Loading and Execution:**
   - Scripts are located in `./makLua` or `./userData/scripts`, and can be imported using `require`.
   - Script entry point functions, called by the simulation engine, include:
     - `init()`: Sets up initial state of scripted task's environment. Called once when a task is assigned to an object.
     - `tick()`: The core function of every scripted task, called at each simulation tick after initialization.
     - `suspend()` & `resume()`: Handle task suspension and resumption in reactive tasks. They stop/restart tasks rather than preserving or resuming from the previous state.

These modules, functions, and entry points enable creating and managing scripts for VR-Forces simulations.

- **Script State Management:**
  - VR-Forces automatically handles saving and restoring Lua script state during scenario save/load or rewind.
  - `saveState()`: Optional function called before saving a scenario, allowing additional processing to save script-specific state.
  - `loadState()`: Optional function called after loading/rewinding a scenario, allowing additional processing to restore script-specific state. Be cautious about other simulation objects not being loaded yet.

- **Task Lifecycle Functions:**
  - `shutdown()`: Function called when the task ends, available for any necessary cleanup before task termination.
  - `entityDestroyed()`: Function called once when the entity executing the script is destroyed.

- **Message Handling Functions:**
  - `receiveObjectMessage(messageType, message, sender)`: Function called when a simulation object receives an object message (key-value pairs). Provides data about message type and sender. Message parameters depend on the specific message type.
  - `receiveTextMessage(message, sender)`: Function called when a simulation object receives a text message. Provides the message content and sender.

- **Influence Interaction Function:**
  - `receiveInfluence(influencer, influenceName, influenceParams)`: Function called in aggregate-level scenarios when a simulation object receives an Influence interaction (like engagement or jamming) from another object. Provides data about the influencer and type of influence.

- **Influence Parameters:** A table of parameters specific to each influence type (defined by `influenceName`), corresponding to those available in the Influence interaction FOM subclass.

- **Reactive Task Entry Points:**
  - `check()`: Defines and continuously checks a condition for task trigger.
  - `checkInit()`: Initializes reactive tasks, sets initial conditions for `check()`, runs when enabled and after task completion.

- **Script Execution Sequence (General):**
  - Initialize script environment (define `vrf`, `this`, Lua API functions).
  - Load script text (execute global statements, define global variables).
  - Call `init()` function.
  - If running, call `tick()` at specified interval (default: 0.5 seconds).

- **Script Execution Sequence (Reactive Tasks):** Adds a checking process to monitor conditions for task initiation.

- **Saved Scenario Script Execution:**
  - When saving, run `saveState()`, save Lua state in scenario file.
  - When loading, initialize script environment and load script text as before.

- **Global Variable Handling:**
  - Initialized global variables are re-initialized at each scenario run.
  - VR-Forces restores global variable values to their saved states upon reload, overriding initial values.
  - The `init()` function is not executed during reload; only the `loadState()` function is called.

- **Checkpointing Limitations:**
  - Saved aspects:
    - Global variables containing strings, numbers, and specific object classes.
    - Tables with string, number, object, or table values. Tables cannot reference themselves directly or indirectly.
  - Not saved:
    - Variables holding functions or threads.
    - Globally declared variables using the `local` keyword.
    - Table entries using non-number/string keys.

- **Scripted Task Saving Example:**
  - Upon reload, global variables `a`, `t.foo`, and function `f` are re-initialized, while `t.bar` is not.
  - Only `a` and `t.foo` are correctly restored; `t.bar` and `f` retain their re-initialized values.

- **Saving Global Variables:**
  - All global variables are saved if the checkpoint mode is 'AllGlobals'.
  - If the mode is 'CheckpointStateOnly', only variables within the `checkpointState` table are saved.

- **Changing Checkpoint Mode:**
  - Save all global variables: `setCheckpointMode(AllGlobals)`
  - Save only `checkpointState` table variables: `setCheckpointMode(CheckpointStateOnly)`

- **Script Loading and Execution:**
  - Global booleans:
    - `AllGlobals`: false
    - `CheckpointStateOnly`: true
  - Documentation reference: VR-Forces Lua for `vrf:setCheckpointMode`

- **Editing Scripts During Scenario Run:**
  - Unused scripts: No effect on scenario
  - Used scripts: May stop, restart, or continue based on changes; see Table 35 for details
  - Supported object types change: Menu updates immediately

- **Tasks and Subtasks:**
  - Carry out actions via:
    - Subtasks (same object): `vrf:startSubtask(taskName, {parameters})`
    - Tasks (other objects): `vrf:sendTask(taskName, {parameters})`
  - Parameters: Lua table; unspecified parameters use defaults
  - Example subtask: `vrf:startSubtask("move-to", {destination = "Waypoint 1"})`

- **Starting Tasks/Subtasks:**
  - Initiate subtasks with `vrf:startSubtask("subtask-name", {})`.
  - Send tasks to simulation objects using `vrf:sendTask(object, "task-name", {...})`.
  - Invalid task names or parameters result in runtime errors.

- **Task ID and Status Monitoring:**
  - A unique task ID is returned upon starting a task/subtask.
  - Task/Subtask states include 'Running', 'Complete (success)', 'Complete (failure)', and 'Canceled'.
  - Monitor tasks/subtasks using functions like `isTaskComplete(taskID)`, `taskResult(taskID)`, etc.

- **Stopping Tasks/Subtasks:**
  - Use `stopTask(taskID)` or `stopSubtask(taskID)` to halt a task/subtask before completion.

- **Task Parameters:**
  - Task parameters are sourced from users or set by parent tasks.
  - Access task parameters using `taskParameters.parameterName`.
  - For scripted tasks, parameters are accessible in the global Lua table `taskParameters`.

- **Error Handling and Completion States:**
  - Incompatible objects result in 'Complete (failed)' state shortly after starting a task.
  - Task success or failure varies based on the specific task type.

- **Task Parameters:**
  - Each task has parameters with specific types and Lua representations.
  - Parameters include:
    - Entity details: Name (String), Type (String)
    - Location: With Altitude (Location3D), Without Altitude (Location3D)
    - Munition: Resource (String)
    - Observer Mode (String)
    - And more, such as Filename (String), Heading (Number), Indirect Fire Weapon (String), etc.
  - Some parameters are view-only or have no direct Lua type (e.g., Heading Label, Range Label).
  - You can get a list of task parameters, their types, and descriptions by editing script metadata.

- **Geometry in Lua:**
  - Lua interface includes classes for geometric objects: Location3D
    - Represents a point in three-dimensional (3D) space.
    - Components: Latitude, Longitude, Altitude

- **Coordinate Systems:**
  - Accessible: North-East-Down (NED) coordinate system.
  - Variation: NED changes based on observer's location, differing at higher latitudes.

- **Vector3D:**
  - Representation: Direction in NED coordinates or bearing-inclination-range.
  - Nature: Not a straight line in Earth-fixed Cartesian; follows great circle routes.
  - Heading & Length: Shortest route around Earth (great circle).
  - Inclination: 0.0 between same-altitude locations, even if one is over the horizon.

- **VectorOffset3D:**
  - Definition: Offset from a reference direction (Vector3D) using right-forward-up values.
  - Use: Defining simulation object formation positions relative to a central location.

- **VectorGeoc3D:**
  - Nature: Vector in Earth-fixed Cartesian coordinates (geocentric).
  - Accessibility: Coordinate meanings and values are abstract, not accessible to scripts.

- **VectorGeoc3D:**
  - Created by:
    - Taking the difference of two locations.
    - Transforming a Vector3D at a specific location.
  - Represents the line-of-sight vector between two locations.
  - Behavior compared to Vector3D:
    - Passes through Earth when connecting points on opposite sides at the same altitude.
    - The angle between two north-directed vectors near the North Pole is the difference in their longitudes.

- **Lua Interface:**
  - No simulation functions require VectorGeoc3Ds, but they can be manipulated for computations like angles.

- **Coding Messages for Translation:**
  - Use `vrf:trUtf8()` to code messages for translation, supporting variable data with `%1`, `%2`, etc. arguments.
  - VR-Forces provides `translationFileCreate` to extract user-visible text from script dialog boxes.

- **Error Detection:**
  - Lua implementation detects:
    - Syntax errors (e.g., missing 'then' keyword) upon saving scripts.
    - Runtime errors during execution.
  - Error messages displayed in the Scripts dialog box and sent to the console.

- **Interactive Scripts:**
  - Use `vrf:askUserQuestion()` to create interactive scripts that request user input via the object console or Object Console Summary Panel.

- **Script Purpose:** Demonstrates a basic scripted task in VR-Forces: creating and moving to a waypoint.
- **Key Steps:**
  - Sets up metadata for the scripted task.
  - Includes the VRF Utilities module.
  - Initializes a subtask ID (`moveToWaypointSubtaskId`).
  - In `init()` function:
    - Sets tick period (update interval) to 0.5 seconds.
    - Creates a waypoint using user input for location and the current force type.
    - Sends a set data request to the simulation object, setting its speed based on user input.
  - In `tick()` function:
    - Starts a subtask for moving to the waypoint if not already started.
    - Checks if the movement subtask is complete. If so, ends the task successfully.
  - In `shutdown()` function: Cleans up by deleting the created waypoint object.
- **Script Parameters:**
  - `waypointLocation`: User-defined location for the waypoint.
  - `orderedSpeed`: Desired speed of the simulation object.
- **User Interaction:** Users specify the waypoint location and ordered speed when assigning this task to a simulation object. The scripted task then executes according to the Lua script's logic.

- **Task Behavior:**
  - Initial ticking: Initiates 'Move to Waypoint' subtask.
  - Subsequent ticking: Checks if the subtask is complete.
  - Subtask completion: Concludes the main task and removes the waypoint.

- **Script Functionality:**
  - Utilizes `init()`, `tick()`, and `shutdown()` functions.
  - No script-specific actions for saving or loading scenarios, as no `saveState()` or `loadState()` functions are included.
  - Documentation for parameters and return values: VR-Forces Lua API.

- **Scripted Set Example:**
  - Acquires two input values (speed, force) from a dialog box via `setParameters`.
  - Sets entity values using `sendSetData()` and finalizes with `endSet()`.

- **Scripted Task Example:**
  - Similar to scripted set but interrupts the object's current task.
  - Concludes with `endTask()` instead of `endSet()`.

- **Script Identification:**
  - Script type (task or set) determined by `myScriptType` metadata value, not function names.

- **Reactive Task Distinction:**
  - Employs `check()` and `checkInit()` functions to assess a condition at a specified tick rate.
  - Executes the task only if the condition returns true.

- **Speed Limit Destruction Script:**
  - Sets tick rate to 1 second.
  - Checks object's speed every tick, prints it, and destroys the object if it exceeds 15 m/s.

- **Background Processes:**
  - Run continuously in the background for specified simulation object types.
  - Cannot issue tasks or stop tasks of simulation objects.
  - Example: A simple background process that checks a lifeform's speed every 5 seconds and prints a message if it exceeds 3 m/s.

- **VR-Forces Behavior Engine:**
  - Allows creating behaviors for simulated forces using behavior trees, which are hierarchical structures combining various node types to define complex behaviors.
  - **Behavior Nodes:** Include Task (executes an action), Condition (checks a condition), Sequence (executes nodes in order), Loop (repeats a node), Selector (chooses the first successful node), Parallel (executes all nodes simultaneously), Role (defines specific roles for better organization), Sync (waits for other nodes to finish), Send/Receive (communicates between behaviors), Job (runs tasks asynchronously), and Query (retrieves information).
  - **Behavior Roles:** Define specific roles within the behavior tree for better organization and coordination of subordinate behaviors.

The VR-Forces Behavior Engine is a Lua module designed to simplify complex behavior scripting, especially for unit-level behaviors that involve coordinating multiple subordinates. Key aspects include:

1. **Behavior Trees**:
   - Decompose complex behaviors into simpler elements (nodes).
   - Nodes can have children arranged in a tree structure.
   - Leaves are primitive actions like VR-Forces tasks or computations.
   - Interior nodes control the flow of execution with standard algorithms.

2. **Support for Subordinate Behaviors**:
   - **Roles**: Specific parts of unit behavior performed by subordinates.
   - **Role Nodes**: Behavior tree parts reserved for specific roles.
   - **Sync Nodes**: To synchronize behaviors across multiple subordinates.

3. **Scripting and Integration**:
   - Declare behaviors, use state variables, and access role information.
   - Validate scripts and integrate behavior into Lua tasks by defining script type and components.
   - Support graphical display and editing with ZeroBrane Studio.

- **Script Validation:**
  - Lua syntax errors and undefined table/function references are checked first.
  - Behavior engine then verifies script validity (e.g., missing or incorrect node elements).
  - If required tools aren't installed, behavior engine creates graphical tree files.

- **Editing Scripts:**
  - ZeroBrane editor can be used to edit behavior scripts without running VR-Forces.
  - Lua engine in ZeroBrane checks Lua code for errors before generating a graph.

- **Behavior Engine Design:**
  - Incorporates Lua code in node definitions, allowing complex logic and calculations.
  - Specialized engine handles flow of control, making behaviors easier to develop and maintain.

- **Guidelines for Writing Better Behaviors:**
  - **Node Names:** Use clear, concise multi-word names that describe the node's purpose. Avoid special characters due to HTML interpretation.
  - **Task Nodes:** Perform single actions in separate task nodes for better visual understanding.

- **Node Function Best Practices:**
  - Keep node functions concise by breaking down large ones into smaller, lower-level functions defined globally and referenced within the node function body.
  - Predicate functions should generally avoid side effects; exceptions apply when necessary for loop control (e.g., in `doWhile`).
  - If computations are complex or cannot be concisely described in the node name, consider breaking them into multiple nodes.

- **Task Parameters and State Variables:**
  - Save task arguments in state variables to ensure they're shown in graphical output.
  - Minimize global communication through state to maintain modularity and understandability:
    - Use state within a node (e.g., loop counters).
    - Pass information locally between adjacent nodes in a sequence or parallel structure.
    - Derive static, unchanging values from task parameters and other static information in the initial `initFn`.

- **Node Definition and Usage:**
  - Define nodes in variables for cleaner, more readable scripts by avoiding long table definitions.
  - Use these node variables to create child nodes of other nodes, promoting code organization and maintainability.

The text discusses programming practices for behaviors using VR Force's Behavior Engine:

- **Behavior Structure**: A parallel task with two roles (R1, R2), each containing a sequence of tasks.
  - R1: "Task A" (A1 wait 4s, A2, sync point, A3)
  - R2: "Task B" (B1 wait 6s, sync point, B2, B3)

- **Code Reuse**: Identical nodes (sync point) can be reused to reduce duplication. Similar nodes can be created using functions.

- **Wait Tasks**: Used to pause execution for specified durations (A1: 4s, B1: 6s).

- **doIf Functions**: Enable/disable behavior tree parts based on initial conditions (task parameters, role assignments, unit types, etc.).

- **Simplified Representation**: Using variables for nodes reduces nesting and cleans up code.

1. **Behavior Tree Design:**
   - Avoid runtime condition nodes when conditions are known beforehand to simplify behavior structure.
   - Use `doIf` functions at the tree's top for branch selection and simpler design.
   - Move complex flow control from Lua code into the behavior tree architecture for better understanding.

2. **Example:** Implement task node branching logic as a selector node in fallback mode within the behavior tree.

3. **Qt Designer for Scripted Tasks/Sets:**
   - VR-Forces can auto-generate dialog boxes with default layout rules.
   - Use Qt Designer to create custom dialog boxes, capturing parameter relationships and enhancing aesthetics.
   - Enable Qt Designer by checking "Use Qt Designer" in the New Script or Edit Script dialog box.

4. **Adding Parameters with Qt Designer:**
   - Add parameters in the New Script or Edit Script dialog box.
   - Defined parameters will be implemented using default layout (customizable) when using Qt Designer.

Once you select 'Qt Designer' for script dialog boxes, parameter additions must be done within Qt Designer; the 'New Script' dialog box won't allow further changes.

1. **Enable 'Use Qt Designer'** in the 'New Script' or 'Edit Script' dialog.
2. Click the 'Qt' button to launch Qt Designer:
   - Default layout displayed if parameters exist, else a blank canvas appears.
3. Browse and drag VR-Forces script parameter widgets onto the canvas from the widget box.
4. Configure each parameter using the Property Editor:
   - **Object Name**: Lua script access name (e.g., `taskParameters.taskDestination`).
   - **Label**: Dialog box text; defaults to parameter name if blank.
   - **Tool Tip**: Optional text for a tool tip.
   - **Indent**: Parameter indentation in pixels.
   - **Visibility**: Specifies dialog box appearance.
   - **Default Values/Ranges/Boolean States** (if applicable).
5. Add design elements like dividers and labels, but non-VR-Forces properties aren't script-usable.
6. Preserve layout by selecting a layout option from the 'Form' menu.

**Key Points:**
- Parameters can only be added in Qt Designer post-selection.
- Layout information loss if 'Use Qt Designer' is unselected.
- Parameter order changes affect Edit Script dialog box listing.
- Configure parameters via Property Editor.
- Non-VR-Forces properties aren't usable in scripts.

- **Layout in Qt Designer:**
  - Unselected layout options may be rearranged by VR-Forces.
  - Save using `File > Save` or the save button to preserve layout information:
    - System scripts: Saved in UI file.
    - Scenario scripts: Saved in scenario.
  - Close Qt Designer after saving.

- **Choice Parameters in Qt Designer:**
  - Require a list of choices displayed as option buttons or drop-down lists.
  - Option buttons are mutually exclusive within the same `buttonGroup`.
  - Add choices:
    - Drop-down list:
      - Drag 'Choice (Drop-Down List)' onto canvas.
      - Click 'Change String List' in Property Editor.
      - Add strings one by one using 'New'.
      - Click OK to close dialog box.
    - Option buttons:
      - Drag 'Choice (Multiple Option Buttons)' onto canvas.
      - Double-click the initial button, change its text.
      - Click 'Change String List' in Property Editor.
      - Add strings one by one using 'New'.
      - Click OK to close dialog box.

- **Simulation Object Categories in Qt Designer:**
  - Filter simulation object types using categories with the Filter widget:
    - Double-click the widget to open a dialog box.
    - Click 'Add' on the Filters line.
    - Select a filter from the list and click OK.
    - Repeat for multiple filters, then click OK to close the dialog box.
  - Edit the category list by modifying the added filters.

- **Editing/Deleting Filter Categories:**
  - Open filter dialog by double-clicking the widget.
  - Select desired filter, click 'Edit' or 'Delete'.
    - For editing: Choose new category, confirm with 'OK'.
    - For deleting: Confirm removal with 'OK'.

- **Adding Design Elements in Qt Designer:**
  - Drag widgets (dividers, group boxes, indentation) from list onto canvas.
  - Set properties for each added widget.

- **Set Data Requests:**
  - Instantly affect simulation object state/behavior without overriding current tasks.
  - Sent from plans or 'Set' menu, created via Lua scripting.
  - Entity-level and aggregate-level requests indicated by icons (entity ( ), unit ( )).
  - Context-sensitive 'Set' menu displays applicable options for selected object.
  - Dialog boxes show defaults/most recently used values; check Information dialog box for current status.
  - Filter simulation object selection lists as needed.
  - Options available on main menus, context-sensitive menus, Sets Toolbar, Last Selected Objects Panel, and Chapter 44 for tactical graphics.

This chapter guides users on managing entity-level simulation objects in VR Forces simulations, with some settings applicable to aggregate-level scenarios as well.

1. **Entity States:**
   - Control active sonar mode (if available) or disable it.
   - Add or remove jamming targets.
   - Enable/disable AI, AIS data, aiming, aircraft lighting, and more.
   - Set entity states like altitude, appearance, armed status, and others.

2. **Entity Behaviors:**
   - Manage movement: speed, heading, pitch, navigation preferences, and more.
   - Control entity states such as destroyed, disembarked, embarked, etc.
   - Enable/disable systems and sensors (e.g., collision avoidance, radar, sonar).
   - Set rules of engagement, sector blanking, and target priority lists.

3. **Entity Appearance:**
   - Customize appearance with markings, name tags, unit patches, rank patches, and more.
   - Control visibility: invisible, undetectable, or hide occupants.
   - Manage DI-Guy characteristics (appearance, body weight) and hand items.

4. **Unit-specific Settings:**
   - Set data requests for units include assigning transport, managing dismount/mount status, locking embarkation, setting ordered formation, etc.

5. **Cross-references:**
   - Some settings also apply to aggregate-level scenarios (Chapter 37).
   - Aerodrome and runway set data requests are covered in Chapter 63.

- **Active Sonar Mode:**
  - Access: Set > Sensors > Active Sonar Mode.
  - Select sonar system and mode, then click OK.

- **Add Jamming Target:**
  - Access: Set > Jammer > Add Jamming Target.
  - Select target entity to jam, click OK. Repeat for multiple targets.

- **AI Enabled (non-aircraft entities):**
  - Access: Set > Action > AI Enabled.
  - Disable/enable collision avoidance and automatic actions by selecting 'No'/'Yes'.

- **AI Enabled (aircraft entities):**
  - Aircraft lack obstacle avoidance. Enable/disable AI via Set > Action > AI Enabled or toolbar button.
  - Select 'Yes'/'No' to enable/disable AI.

- **AIS Data (surface entities):**
  - Access: Set > AIS data.
  - Optionally input MMSI, IMO Number, ETA, Destination, and Navigation Status. Click OK.

- **Aiming:**
  - Entity aims at specified point/object/angle without firing. If targets, fires then resumes aiming behavior.

- **Entity Aiming Behavior:**
  - Entities aim at targets (points or objects) until their movement causes the target to be behind them.
    - If equipped with a turret that can aim in that direction, aiming continues.
    - Once stopped moving, entities turn back to aim at the specified target.
  - Aiming behavior can be controlled using a set data request.

- **Aiming Set Data Request:**
  - Select entity and choose "Set > Engagement > Aiming".
  - Options:
    - Aim at Point: Specify location coordinates.
    - Aim at Object: Select the object to aim at.
    - Aim at Angle: Specify azimuth and elevation angles.
    - Cease Aiming: No parameters required.

- **Aircraft Lighting:**
  - Use "Set > Appearance > Aircraft Lighting" for fixed-wing aircraft.
  - Tankers use a different set data request ("36.82. Tanker Lighting").

- **Altitude Adjustment:**
  - Change altitude immediately using "Set > Position > Altitude".
  - Alternatively, assign tasks (Move to Altitude or Fly Altitude) or use the Entity Control Panel.
  - Specify altitude in MSL (mean sea level) or AGL (above ground level).

- **Appearance Settings:**
  - Set appearance attributes for simulation objects using "Set > Appearance > Appearance".
  - Lifeform State field sets posture; VR-Forces uses closest similar posture if selected one is not supported.
  - DI-Guy Appearance set data request used for human characters ("36.23. DI-Guy Characteristics (Appearance, Head, Body Weight)").
  - Appearance set data request in aggregate-level scenarios is unsupported and will fail.

**Key Points Added:**
- Aiming behavior rules based on entity movement.
- Alternative methods for altitude adjustment and human character appearance settings.

- **Appearance Settings:**
  - Change current settings by opening the 'Appearance' dialog box.
  - Apply changes by clicking 'OK'.

- **Arming/Disarming Explosives:**
  - Default: Armed IEDs, car bombs, suicide bombers.
  - Arm/Disarm using:
    - 'Send Radio Set task'
    - 'Engagement > Armed' menu
  - Select desired state in the 'Armed' dialog box and click 'OK'.

- **Articulated Part Positioning:**
  - Set position of simulation object's articulated part at runtime (if not system-controlled).
  - Use 'Appearance Articulated Part' menu, select part, specify translation/rotation, then click 'OK'.

- **Assume Unknown is Hostile:**
  - Assume unknown objects in engagement zone are hostile.
  - Use 'Disposition > Assume Unknown is Hostile', choose 'No' or 'Yes', then click 'OK'.

- **Attaching/Dettaching Tactical Graphics:**
  - Attach graphic to entity using 'Disposition > Attached', specify entity and orientation, then click 'OK'.
  - Detach graphic by selecting 'Detach From Parent' in the 'Attached' dialog box.

- **Attention Grabbing:**
  - Set object's attention level for humans using 'Attention Grabbing' set data request.
  - Select object, choose desired attention level, and click 'OK'.

- **Attention Grabbing:**
  - Access: Set > Disposition > Attention Grabbing
  - Options: Select desired attention level
  - Action: Click OK

- **Automatically Close Doors:**
  - Default: Enabled
  - Toggle: Set > Action > Automatically Close Doors
  - Manual closure: Use "Close Door" task
  - Details in "Dynamic Terrain" chapter of MAK ONE Applications Reference Manual

- **Base (Aerodrome Assignment):**
  - Access: Set > Base
  - Assign base to aircraft using:
    - ICAO code
    - Objects List
    - Aerodrome list (managed aerodromes first, then all others)
  - Action: Click OK
  - Alternative method: Edit dialog box for the entity
  - Requires terrain database with aerodrome data

- **Capabilities:**
  - Determined by object's entry in ./appData/settings/vrfGui/SISO-REF-010.xml (DIS standard default)
  - Access: Set > Disposition > Capabilities
  - Change settings and click OK

- **Collision Avoidance Types:**
  - Enable/disable avoidance of entities, buildings, trees per entity basis
  - Overrides object parameter database entry; changes saved in process state repository
  - Recommend editing components in the object parameter database for permanent settings
  - GUI dialog box provides default setting, not current entity settings

- **Review Settings**: Ensure all settings in dialog boxes are checked to avoid unwanted changes.

- **Collision Avoidance**:
  - Use 'Collision Avoidance Types' for broad object categories.
  - For specific objects:
    - Select ground entity.
    - Choose "Set" > "Action" > "Collision Avoidance Types".
    - Check/uncheck object types to avoid or not avoid.
    - Click "OK".

- **Concealed**:
  - Sets simulation object's concealment attribute (True/False), affecting DIS/RPR FOM data sent over the network.
  - For aggregates, changes sensor signature for harder detection.
  - Select object > Choose "Set" > "Disposition" > "Concealed".
  - Choose an option (True or False) > Click "OK".

- **Countermeasures Auto Launch**:
  - Enable/disable automatic countermeasure launch:
    - Select entity > Choose "Set" > "Engagement" > "Countermeasures Auto Launch".
    - Choose an option (Enable/Disable) > Click "OK".
  - Manual launch still possible if disabled.

- **Current Speed**: Sets immediate speed of simulation object:
  - Select object > Choose "Set" > "Action" > "Current Speed".
  - Enter speed value. Negative values cause backward movement (if supported).
  - Click "OK". Fixed-wing aircraft in orbit change speed, humans might take a step then stop.

- **Destroyed**: Destroys selected simulation object immediately:
  - Select object > Choose "Set" > "Disposition" > "Destroyed".

- **Detonation Fuse Type**:
  - Configures detonation of IEDs, suicide bombers, car bombs: immediate, timed delay, or proximity-based.

- **Detonation Fuse Type:**
  - Choose fuse type: Timed, Immediate, or Proximity.
    - Timed: Set detonation time (seconds).
    - Proximity: Set trigger area radius.
  - Detonation Fuse Type arms the device implicitly.
  - Remote detonation via radio using 'Send Radio Set' task for IEDs, car bombs, and suicide bombers.

- **DI-Guy Appearance, Head, Body Weight:**
  - Applies to lifeform entities with DI-Guy characters.
  - Optionally update appearance immediately during changes.
  - Filter and change: appearance, head type, body weight (0.5 - 5.0).

- **DI-Guy Hand Item:**
  - Change character's hand item (e.g., civilian: cell phone, pistol; soldier: weapons).
  - Optionally preview new hand item in 3D view.

- **Disembarked:**
  - Immediately disembarks a simulation object.
  - Equivalent to 'Objects > Disembark' command but can be included in plans.

- **Embarked Simulation Objects:**
  - Not visible in 2D icon model; access via Objects List Panel.
  - 'Set > Embarkation > Disembarked' instantly embarks an object, unlike the 'Embark' task.
  - Default embarkation point is parent object's center (0,0,0), no preconfigured slots used.
  - Stealth observer mode requires offset calculation for embarked objects.
  - HLA users need RPR FOM 2, draft 17 or later for embarkation feature.
  - To embark a simulation object: select it, choose 'Set > Embarkation > Embarked', pick the object to embark on, optionally set an offset, then click OK.

- **Emergency Beacon:**
  - US Air Force human entity has an emergency transponder (beacon) with on/off functionality.
  - On: easier detection by Search and Rescue Sensor; off: detectable within sensor's range.
  - To toggle the beacon: select the entity, choose 'Set > Sensors > Emergency Beacon', pick 'On' or 'Off', then click OK.

- **Emitter:**
  - Enables/disables electromagnetic emissions for simulation objects with emitters (active radar, jamming radar, active sonar).
  - Emission properties defined in sensor component descriptor; beam behavior follows parameter settings.
  - Targeted entity remains tracked until another target is set or exercise status changes.
  - To enable electromagnetic emissions: select the object, choose 'Set > Sensors > Emitter', then click OK.

- **Radar & Emitter Control:**
  - Select Radar ID from the list or choose 'All'.
  - Set Emitter to 'On' and click OK.

- **Engagement Zones:**
  - Associate one or more engagement zones with a simulation object:
    - Select the object, go to `Set > Engagement > Engagement Zones`.
    - Choose desired zones and click OK.

- **Force Change (Entity-level):**
  - Change force during runtime for various scenarios.
  - Effects: Echelon ID, Icon, Force ID change; Entity enumeration remains unchanged.
  - To set force: Go to `Set > Disposition > Force`, select new force, and click OK.

- **Formations:**
  - Supported formations: Column (default), Line, Wedge, Vee, User-defined.
  - Unit formation setting:
    - Select unit, go to `Set > Unit > Formation`.
    - Choose desired formation and click OK.
  - Use 'Move Into Formation' task for simulated movement into formation.

- **Resource Freezing:**
  - Freeze/Unfreeze fuel levels:
    - Select entity, go to `Set > Action > Freeze Fuel Levels`.
    - Choose 'Yes' or 'No', and click OK.
  - Freeze Movement:
    - Prevents physics/simulation-related movement changes.
    - Tasks requiring movement pause while active.

- **Entity Movement:**
  - Non-spatial tasks (like weapon aiming) continue even when movement is frozen.
  - To freeze/unfreeze an entity's movement:
    - Select the entity.
    - Choose 'Set > Action > Freeze Movement'.
    - Select 'Yes' or 'No'.
    - Click OK.

- **Munition Levels:**
  - Freezing munition levels prevents entities from depleting resources while using weapons, including countermeasures.
  - To freeze/unfreeze an entity's munition levels:
    - Select the entity.
    - Choose 'Set > Action > Freeze Munition Levels'.
    - Select 'Yes' or 'No'.
    - Click OK.

- **Ground Clamp Fidelity:**
  - Human entities default to high fidelity ground clamping for realistic movement on terrain.
  - Low fidelity clamping (to navigation mesh) improves performance but may appear unnatural. It's the default for crowds and requires a specified navigation area.
  - To set ground clamp fidelity:
    - Select the entity or entities.
    - Choose 'Set > Action > Ground Clamp Fidelity'.
    - Select 'Low' or 'High'.
    - Click OK.

- **Heading:**
  - Heading request instantly sets an object's heading. Use 'Turn To Heading' task for pivoting/K-turns.
  - To set heading manually:
    - Select the simulation object.
    - Choose 'Set > Position > Heading', or use the Heading button on toolbars.
    - Enter a heading.
    - Select reference (True North, Magnetic, Host Object, Current Heading).
    - Click OK.

- **Hide Occupants:**
  - Overrides the 'Show Occupants' setting on the Entity Display Settings page for vehicles.
  - Automatically hides/displays vehicle occupants for performance reasons or when embarking simulated persons.

- **Occupant Visibility in Vehicles:**
  - Display/hide occupants: `Set > Appearance > Hide Occupants`
    - Options:
      - 'Hide Occupants': Hides driver/pilot
      - 'Show Occupants': Displays previously hidden occupant

- **IFF (Identification Friend or Foe) Transponder:**
  - VR-Forces implements NATO IFF based on RPR FOM 2.0 and 3.0 extensions
  - Set IFF transponder: `Set > Sensors > IFF`
  - Active IFF Code Changer system changes code every 30 minutes

- **Object Visibility (Invisible):**
  - Make objects invisible on map display: `Set > Appearance > Invisible`
  - Objects remain listed in the Objects List Panel

- **Entity Invulnerability:**
  - Protect entities from damage: `Set > Disposition > Invulnerable`

- **Radar Jamming (Jammer State):**
  - Enable/disable radar jamming: `Set > Jammer > Jammer State`
  - Refer to "9.6. Electronic Warfare" for more details

- **Jamming Mode:**
  - Specify emitter ID and mode for a jammer

- **Jamming Modes:**
  - Options: Deception Jamming, Mixed Mode Jamming, Mixed Noise.
  - To set:
    - Select the jamming entity.
    - Choose 'Set' > 'Jammer' > 'Jamming Mode'.
    - Select desired mode in the 'Jamming Mode' dialog box.

- **Laser Code:**
  - Sets code for laser beams sent by an entity and missiles' seek codes.
  - Default calculated by VR-Forces; can be changed to a custom number between 1111 and 1788 using digits 1-8 only.
  - To set:
    - Select the entity.
    - Choose 'Set' > 'Laser Designator' > 'Laser Code'.
    - Enter code in the 'Laser Code' dialog box.

- **Laser Power and Wavelength:**
  - Specifies power (watts) and wavelength (microns) for laser designators; not used by VR-Forces but sent over the network for other applications.
  - To set:
    - Select the entity.
    - Choose 'Set' > 'Laser Designator' > 'Laser Power and Wavelength'.
    - Enter values in the dialog box. Set to -1 to preserve current value.

- **Loadout (F/A-18 Hornet):**
  - Changes number of different missiles currently loaded on the entity during simulation.
  - Pre-set loadouts available: Default, Intercept, Surface, Ground.
  - To set:
    - Select the entity.
    - Choose 'Set' > 'Disposition' > 'Loadout'.
    - Specify loadout in the 'Loadout' dialog box.

- **Location:**
  - Moves simulation object instantly to a new location by setting its coordinates or dragging it.

- **Dragging Simulation Objects:**
  - Move objects to new locations.
  - For ground entities in buildings with interior geometry, specify altitude for different floors.
    - Steps:
      - Select the simulation object.
      - Choose Set > Position > Location.
      - Specify the new location by clicking on the terrain or entering coordinates and altitude.
      - Optionally, set the altitude.
      - Click OK.

- **Look At Action:**
  - Make human entities look at a point, object, or angle within specified limits (up to 90� azimuth and 45� elevation).
    - Steps:
      - Select the entity.
      - Choose Set > Action > Look At.
      - Select the desired 'Look At' option (Point, Object, Angle, or Cease).
      - Specify parameters if needed (location, object, azimuth, elevation).
      - Click OK.

- **Markings:**
  - Change exterior markings of vehicles with configured texture maps.
    - Steps:
      - Select the entity.
      - Choose Set > Appearance > Markings.
      - In each list, select the desired markings.
      - Click OK.

- **Name Tag (for soldier entities):**
  - Display a name tag on soldiers' chests, up to 31 characters long, case sensitive.
    - Default is "SMITH".
    - Update Name Tag Immediately checkbox: real-time update while typing may cause flickering.

- **Name Tag:**
  - Display soldier's name: Enter desired name, click 'OK'.
  - Update timing: Optionally clear 'Update Name Tag Immediately' for delayed update.
  - Rank and unit specification: Refer to "36.61. Rank Patch" (page 866) and "36.91. Unit Patches" (page 879).

- **Navigation:**
  - **Enabled:** Default is on; disable per entity using 'Set > Action > Navigation Enabled'. Disabled entities act as obstacles.
  - **Preferences:** Entities can prefer roads, avoid roads, or ignore roads while planning paths. Set preferences via 'Set > Action > Navigation Preferences'.
  - **Priority:** High priority entities have more path planning time. Set priority via 'Set > Action > Navigation Priority'.

- **Notify Level:** Set notification level for simulation object console messages using 'Set > Other > Notify Level'.

1. **Orbit:**
   - Set satellite orbit type (Kepler or geostationary).
     - Kepler orbits: Use two-line elements from sources like celestrak.org or space-track.org.
     - Geostationary orbits: Input longitude in degrees.
   - Steps to set orbit:
     - Select satellite.
     - Choose 'Set > Position > Orbit'.
     - Select orbit type and input data.
     - Click OK.

2. **Ordered Speed:**
   - Set desired speed for simulation objects, affected by factors like soil type, slope, modifiers.
   - Maximum speed limited by object parameter database's max-speed value.
   - For aircraft, specify ground speed, TAS (true airspeed), IAS (indicated airspeed), or Mach.
   - Use 'Current Speed' for instant changes.
   - Steps to set ordered speed:
     - Select simulation object.
     - Choose 'Set > Action > Ordered Speed'.
     - Input desired speed and measurement (if applicable).
     - Click OK.

3. **Pitch:**
   - Set pitch instantly for compatible simulation objects, input degrees between 90 and -90.
   - Steps to set pitch:
     - Select simulation object.
     - Choose 'Set > Position > Pitch'.
     - Input desired pitch in degrees.
     - Click OK.

- **Human Posture:**
  - Static & Movement Relationships:
    - Standing: Standing (static), Walking/Running (moving)
    - Kneeling: Kneeling (static), Crawling (moving)
    - Prone: Prone (static), Crawling (moving)
    - Running: Standing (static), Running (moving)
    - Parachuting, Jumping, Sitting, Squatting, Crouching, Wading: Standing (static), Walking/Running or specific movement (moving)
  - Speed determines 'Walking or Running' posture.
  - Unsupported postures default to closest supported one.
  - Set posture via Lifeform State field in Appearance dialog box or Posture set data request.
  - Some embarkation slots specify occupant's posture.

- **Preferred Trajectory Height:**
  - Specifies preferred height for indirect fire munitions (Fire for Effect tasks, untriggered munitions).
  - Overridden by indirect fire tasks if necessary to hit target.
  - Set via Preferred Trajectory Height dialog box.

- **Promote From Clutter:**
  - Converts clutter objects (created by Aircraft/Ship Clutter Area) into entities with assignable tasks and set data requests.

- **Radar Mode:**
  - Changes type of beam published by an entity's emitter.
  - Default: Fixed-wing aircraft have one emitter with 'Search' and 'Track' modes.
  - Set via Radar Mode dialog box, selecting the desired mode for a specific emitter ID.

1. **Data Entry Responsibility:** Ensure entered values are supported by the entity to avoid set data request failures.

2. **Rank Patch (Soldiers):**
   - Display rank patch for soldiers with configured ranks.
   - Control real-time update using "Apply Selected Patch Immediately" checkbox.
   - Set rank, name, and unit via "Set > Appearance > Rank Patch".

3. **Remote Sensor:**
   - Entities with Remote Sensor Receiver can use others' sensors (e.g., Patriot Missile Battery).
   - Specify remote sensor via "Set > Sensors > Remote Sensor".

4. **Remove Jamming Target:**
   - Stop an entity from jamming a target using "Set > Jammer > Remove Jamming Target".
   - Multiple targets can be removed with repeated set data requests.

5. **Reorganize Unit:**
   - Reorganize units via "Set > Unit > Reorganize" if automatic reorganization is disabled.

6. **Resources (Fuel, Ammunition):**
   - Set resource values for simulation objects using "Set > Disposition > Resources".
   - Maximum allowed resources are configured in the object parameter database.

- **Restore Simulation Object:**
  - Returns resources to default values or revives destroyed objects.
  - Steps: Select object > Set > Disposition > Restore.

- **Rules of Engagement (ROE):**
  - Define when a simulation object can fire at enemies:
    - Fire at Will
    - Fire When Fired Upon
    - Fire When In Engagement Zone
    - Fire on Priority Targets Only
    - Hold Fire
  - For fixed-wing entities, ROE applies both on ground and in air. Change ROE to prevent ground missile firing.
  - Steps: Select object > Set > Engagement > Rules of Engagement.

- **Fire-When-Fired-Upon (FWFU) Rule:**
  - Object considers itself under fire if:
    - Received "Entity Impact" detonation interaction within 'underFireTime' seconds (default 120).
    - Detonation occurred within 'underFireDistance' meters (default 1000) of the object.
  - UnderFireTime and UnderFireDistance are in platform's OPE file.

- **Sector Blanking:**
  - Hides targets within specified sector from radar sensors.
  - Parameters saved per-entity, in scenario and checkpoint files.
  - Steps: Select object with radar sensor > Set > Sensors > Sector Blanking.

- **Sector of Responsibility (SoR):**
  - Used with detection tables to prioritize targets based on their location relative to the object's SoR.

- **Sector of Responsibility (SoR) for Turret Scans:**
  - Define SoR by specifying:
    - Sector center: Midpoint of the area in degrees (0 to 360, measured clockwise from north).
    - Sector size: Area to be scanned, ranging from 0 to 180 degrees.
  - Default SoR: 90 degrees centered at zero degrees (north).
  - Set SoR via menu: Select object > Set > Engagement > Sector of Responsibility.

- **Sensor Aiming:**
  - Aim gimbaled sensors by selecting an entity and choosing Set > Sensors > Sensor Aim.
  - Aim options:
    - At Point: Click on the terrain or input coordinates (default altitude is entity's altitude).
    - At Object: Select the simulation object to aim at.
    - At Angle: Specify azimuth (horizontal angle relative to the sensing entity) and elevation (vertical angle).
    - Scan: Defaults to 180 degrees; adjustable in gimbaled sensor system definition file.

- **Sensor Field of View Color:**
  - Override automatic color assignment for sensor field of view.
  - Select entity > Set > Sensors > Sensor Field of View Color, choose sensor from list, pick desired color using color picker.

- **Sensor Zoom:**
  - Change field of view and zoom in on aim point for gimbaled visual sensors.
  - Select entity > Set > Sensors > Sensor Zoom, choose sensor (if multiple), adjust zoom level.

1. **Zoom Functionality:**
   - Adjust zoom level by typing a value or dragging the slider.
   - Apply changes by clicking 'OK'.

2. **TACAN Transmitter Settings:**
   - Access settings via "Set > Sensors > Set TACAN Transmitter".
   - Configure operational status (On/Off), ID code, channel number (1-126), and pulse band (X/Y).
   - Save changes by clicking 'OK'.

3. **Entity Skill Level Adjustment:**
   - Access skill level settings via "Set > Disposition > Skill Level".
   - Choose from Novice, Experienced, or Expert levels.
   - Apply changes by clicking 'OK'.

4. **Sonar Depth Configuration:**
   - Access sonar depth settings via "Set > Sensors > Sonar Depth".
   - Set desired depth or use entity's current depth.
   - Apply changes by clicking 'OK'.

- **Sonar Depth Setting:**
  - Optionally use 'Use Entity Depth' to set dipped sonar depth equal to the entity's depth.
  - Click 'OK'.

- **Spot Reports (Detection & Reporting):**
  - Spot reports allow simulation objects to report detected entities of another force for display, avoidance, or targeting purposes.
  - Global setting enables/disables spot reports for all objects; individual settings are required for avoidance/targeting.
  - To set spot reports:
    - Select the object, choose 'Set > Sensors > Spot Reports'.
    - Choose report type: 'Only to Front End', 'Broadcast', 'Send to Specific Entities', or 'Superiors and Peers'.
      - 'Only to Front End': Improves performance but entities can't use info for targeting.
      - 'Broadcast': Sends reports to all objects in the same unit.
      - 'Send to Specific Entities': Allows selecting specific recipients.
      - 'Superiors and Peers': Sends reports to objects in the same unit.
    - If sending to specific entities, select them from the list.
    - Choose spot reports enabled status ('On', 'Off', or 'Use Global Setting').
    - Click 'OK'.

- **Hand Item Stow:**
  - Hide/display hand item for a human character:
    - Select entity, choose 'Set > Appearance > Stow Hand Item'.
    - In the dialog box, select 'Yes' to stow (hide) or 'No' to display, then click 'OK'.

- **Subsystem Enabled:**
  - Enable/disable specific subsystems (like sensors, weapons):
    - Select entity, choose 'Set > Subsystems > Subsystem Enabled'.
    - Choose the subsystem and enable/disable it.

- **Subsystem Enabled/Disabled:**
  - Select entity.
  - Choose `Set > Subsystems > Subsystem Enabled`.
  - In the dialog box:
    - Select desired subsystem(s).
    - Set 'Enabled' to 'Yes' or 'No'.
  - Click 'OK'.

- **Superior (Add/Move Simulation Object):**
  - Select object.
  - Choose `Set > Other > Superior`.
  - Optionally filter list.
  - Select new superior unit, or move to force level by checking 'Set Force As Superior'.
  - Click 'OK'.

- **Surrendered State (Lifeforms Only):**
  - Select entity.
  - Choose `Set > Disposition > Surrendered`.
  - Choose an option from the list.
  - Click 'OK'.

- **Laser Code Synchronization:**
  - Select laser-guided weapon entity.
  - Choose `Set > Laser Designator > Synchronize Laser Code`.
  - Select lasing entity to synchronize with.
  - Click 'OK'.

- **Tanker Lighting:**
  - Select air tanker.
  - Choose `Set > Appearance > Tanker Lighting`.
  - Specify light settings in the dialog box.
  - Click 'OK'.

- **Target Entity:**
  - Select entity.
  - Choose `Set > Engagement > Target`.
  - In the dialog box, select target entity. Target override takes priority over automatic target selection.
  - Click 'OK'.

- **Targeting Entities:**
  - Select entity in Target list or on terrain.
  - Optionally filter entities; default is Opposing Entities.

- **Target Priority List (TPL) Management:**
  - **Add Target to TPL:**
    - Select simulation object, choose 'Set > Engagement > Target Priority List - Add'.
    - Set priority (High, Medium, Low), select entity, click OK.
  - **View TPL:**
    - Select entity, choose 'Objects > Information', view State Data page.
  - **Clear TPL:**
    - Select entity, choose 'Set > Engagement > Target Priority List - Clear'.
  - **Update TPL:**
    - Select entity, choose 'Set > Engagement > Target Priority List - Update'.
    - Add/remove targets; change priority using dialog box, click OK.

- **Tasking Simulation Object:**
  - Order object to stop executing tasks and take unit commands.

- **Tasking by Superior:**
  - Stops independent tasks; waits for superior's next order.
  - Doesn't execute current unit task, if any.
  - Access: Select > Set > Other > Tasked by Superior.

- **TDL Messaging:**
  - Enables/disables TDL messages or uses global setting.
  - Access: Select > Set > Other > TDL Messaging.

- **Tracer Use:**
  - Specifies tracer rounds for compatible weapons.
  - Requires observer tracers to be enabled (not supported in 2D).
  - Access: Select > Set > Engagement > Tracer Use.

- **Undetectable (Stealth):**
  - Makes objects undetectable, but not invulnerable.
  - Missiles launched before stealth mode can still hit the entity.
  - Blocks line of sight checks.
  - Access: Select > Set > Disposition > Undetectable.

- **Unit Patches (Soldiers):**
  - Sets unit patches for configured soldier entities.
  - Allows specifying name and rank.
  - Access: Select > Set > Appearance > Unit Patches.

- **Urgency (Human)**:
  - Controls human entity animation speed.
  - Levels: Slowest to Immediate (Immediate skips transitions).
  - Set via: Select entity, choose 'Set' > 'Action' > 'Urgency'.

- **Unit Patches (Set Data Requests for Units)**:
  - **Assign Transport**:
    - Designates a vehicle for a squad/team or clears previous assignment.
    - Option to apply changes to subordinate units.

  - **Dismounted**:
    - Immediately dismounts a unit from a vehicle.

  - **Dismounted Headquarters Section**:
    - Dismounts HQ section members, optionally retaining habitual mountees (like platoon sergeant).

  - **Lock Embarkation**:
    - Instructs vehicle crew to ignore mount/dismount tasks or clears previous lock.

  - **Mounted**:
    - Immediately mounts subordinates of a unit on an assigned vehicle.

- **Access all set data requests for units via 'Set' > 'Embarkation'.**

The provided text chunks detail various set data requests in VR-Forces, enabling users to instantly alter entities' states without simulating the process. Here are the key points:

1. **Mounted Crew:**
   - Immediate mounting of a vehicle crew onto their assigned transport.
   - Uses 'Assign Transport' set data request.
   - Steps: Select crew, choose Set > Embarkation > Mounted Crew.

2. **Mounted Headquarters Section:**
   - Immediate mounting of HQ section members onto vehicles (PL & RTO on the first, PLT SGT & FO on the second).
   - Steps: Select HQ section, choose Set > Embarkation > Mounted Headquarters Section.

3. **Ordered Formation:**
   - Specifies a unit's formation while moving.
   - Does not affect stationary units; use 'Move Into Formation' for that.
   - Steps: Select unit, choose Set > Action > Ordered Formation, select desired formation, click OK.

4. **Unloaded:**
   - Immediate dismounting of passengers from a vehicle (both mounted and embarked).
   - Steps: Select vehicle, choose Set > Embarkation > Unloaded.

5. **Additional Aggregate-Level Set Data Requests (37.x):**
   - These sections detail specific state changes for aggregate-level simulation objects, such as:
     - Activity, Ammunition, Assign Aircraft, Assume Unknown is Hostile, Capabilities, Concealed, Contamination, Current Speed, Destroyed, Disembarked, Embarked, Emitter, Engagement Zones, Engagement Results, Equipment Pacing/Tracking, Facilities, Food, Water, Fuel, Oil and Lubricant, Force, Has Drag Chute, Heading, Health, IFF, Loadout, Location, MOPP Level, Morale, Notify Level, Ordered Speed, Percent Complete, Personnel and Supplies, Posture (Unit), Preferred Targets, Radar Mode, Reorganize, Resources, Resources Pacing/Tracking, Restore, Resupply Mode, Role, Rules of Engagement, Sector of Responsibility, Spot Reports, Subsystem Enabled, Superior, Supplying, Tasked by Superior, TDL Messaging, Weapons Pacing/Tracking.

- **Activity:**
  - Assign activities to simulation objects based on their type.
    - Available activities include: Unknown, Attacking, Bivouacking, Emplacing obstacle, Indirect fire, Jamming, Other, Patrolling, Probing, Retreating.
  - Set activity:
    - Select the simulation object.
    - Choose "Set" > "Disposition" > "Activity".
    - Select an activity from the list and click "OK".

- **Ammunition:**
  - Specify the amount of each type of ammunition for a simulation object.
  - Set ammunition levels:
    - Select the simulation object.
    - Choose "Set" > "Disposition" > "Ammunition".
    - Check the box for each type of ammunition, adjust the slider or type a value, and click "OK".

- **Ammunition Pacing/Tracking:**
  - Designate certain ammunition types as 'pacing' (critical to mission) or 'tracking' (commander's interest).
  - Set pacing/tracking:
    - Select the simulation object.
    - Choose "Set" > "Disposition" > "Ammunition Pacing/Tracking".
    - Check the box for each type of ammunition, select an option ('Pacing', 'Tracking', or 'Neither'), and click "OK".

- **Assign Aircraft:**
  - Manage aircraft assignments to air bases (add, edit, remove).
  - Behavior differs based on whether used directly from the Set menu or within a plan.
    - When used directly: Replaces all previous aircraft assignments with new/updated list.
    - When used in a plan: Adds/changes only listed aircraft assignments.
  - Add aircraft type to an air base:
    - Select the air base.
    - Choose "Set" > "Air Base" > "Assign Aircraft".
    - In the dialog box, add the desired aircraft types and quantities.

- **Assign Aircraft:**
  - Add aircraft types and quantities:
    - Click 'Add' button.
    - Select type from list.
    - Enter quantity in text box.
  - Edit existing assignments by changing type or quantity.
  - Choose appropriate option (usually default).
  - Click 'OK'.
  - *Editing/Deleting:*
    - Add/remove types, change quantities.
    - Removing assigned aircraft returns fuel, munitions, and air crews to the base.

- **Assume Unknown is Hostile:** See "36.11. Assume Unknown is Hostile" for details.
- **Capabilities, Concealed, Contamination, Current Speed, Destroyed, Disembarked, Embarked, Emitter, Engagement Zones:** See respective sections for details.
- **Engagement Results:**
  - Set a text string (comment) for simulation object state updates over the network:
    - Select simulation object.
    - Choose 'Set' > 'Disposition' > 'Engagement Results'.
    - Enter text in 'Result' field.
    - Set expiration time or leave blank for no expiration.
    - Click 'OK'.
  - Text string persists until expiration or new result is set.

- **Engagement Results:**
  - Open dialog box via: Choose Set > Engagement > Engagement Results.
  - Specify result text and expiration time (days, hours:minutes:seconds).
  - Confirm with OK.

- **Equipment Pacing/Tracking:**
  - Access via: Select simulation object > Set > Disposition > Equipment Pacing/Tracking.
  - Check boxes for equipment types and choose 'Pacing' or 'Tracking'.
  - Apply changes with OK.

- **Air Base Facilities:**
  - Open dialog box via: Select air base > Set > Air Base > Facilities.
  - Manage runways (add, edit, delete), enable/disable night support, set storage capacities for aircraft, fuel, munitions, and personnel, and set apron/hangar concealment status.
  - Save changes with OK.

- **Resources:**
  - Open dialog box via: Select simulation object > Set > Disposition > Food, Water, Fuel, Oil and Lubricant.
  - Check boxes for resources (food, water, fuels, oil, lubricants) and set values.
  - Apply changes with OK.

The text outlines several data requests or settings for aggregate-level simulation objects in VR Forces, focusing on resources and unit states:

- **Resource Pacing/Tracking (Food, Water, Fuel, Oil, Lubricant):**
  - Designate resources as 'pacing' (critical to mission) or 'tracking' (commander's interest).
  - Access via: `Set > Disposition > Food, Water, Fuel, Oil and Lubricant Pacing/Tracking`.
  - Does not affect simulation but reported for external systems.

- **Aircraft Drag Chute:**
  - Specify if aircraft in an air unit have drag chutes.
  - Access via: `Set > Disposition > Has Drag Chute`.

- **Simulation Object Health:**
  - Restore personnel or set overall health of the object.
  - Access via: `Set > Disposition > Health`.
  - Based on total personnel, equipment, and weapons.

- **Air Unit Loadout:**
  - Specify loadout for an air unit.
  - Access via: `Set > Disposition > Loadout`.

- **Unit MOPP Level (Mission-Oriented Protective Posture):**
  - Change instantly; for gradual change, see "Change MOPP Level" task.
  - Access via: `Set > Disposition > MOPP Level`.

- **Unit Morale:**
  - Set a unit's morale level.
  - Access via: `Set > Disposition > Morale`.

- **Notify Level & Ordered Speed:** See page 861 and 862 for details.

- **Percent Complete (Combat Engineering Objects):**
  - Select object
  - Choose Set > Disposition > Percent Complete
  - Adjust slider or type value (0-100)
  - Click OK

- **Personnel and Supplies (Air Base):**
  - Select air base
  - Choose Set > Air Base > Personnel and Supplies
  - Optionally set:
    - Ground Crew Available
    - Air Crew Available
    - Munitions amount
    - Aviation fuel amount
  - Click Revert to reset any setting
  - Click OK. Max values depend on Facilities settings.

- **Morale & Posture (Unit):**
  - Select unit
  - Choose Set > Disposition > Morale/Posture
  - Adjust slider or select option
  - Click OK

- **Preferred Targets (Unit):**
  - Select unit
  - Choose Set > Engagement > Preferred Targets
  - Select up to three targets
  - Click OK

- **Radar Mode, Reorganize, Resources:** See respective pages for details.

- **Resources Pacing/Tracking:**
  - Select object
  - Choose Set > Disposition > Resources Pacing/Tracking
  - Select resources:
    - Pacing (critical to mission)
    - Tracking (commander's interest)
    - Neither
  - Click OK

- **Resupply Mode:**
  - Simulation objects can have one of four resupply modes:
    - None: The object does not resupply itself.
    - From Supply Units: The object gets supplies from nearby resupply units.
    - From Self-Continuous: The object resupplies itself continuously based on its resupply rate parameters.
    - From Self-Periodic: The object periodically resets all of its supplies, except health, to the base level. The period can be specified.
  - Set via "Set > Logistics > Resupply Mode" dialog box.

- **Role:**
  - Set role of air units (fighter, attack, bomber, QRA) via "Set > Disposition > Role".

- **Other Settings:**
  - Details for the following settings can be found in respective sections referenced:
    - Rules of Engagement
    - Sector of Responsibility
    - Spot Reports
    - Subsystem Enabled
    - Superior
    - Supplying
    - Tasked by Superior
    - TDL Messaging

- **Weapons Pacing/Tracking:**
  - Mark weapons as pacing or tracking via "Set > Disposition > Weapons Pacing/Tracking".
  - Pacing indicates critical mission status, tracking indicates commander's interest.

- **Plans:**
  - Two types: global plans and individual plans.
  - Plans can assign tasks, set data requests, create/delete simulation objects, and draw tactical graphics.
  - Commands in a plan can be conditional based on certain conditions.

- **Scenario Start:** Scenarios begin in pause mode, unless launched with the `-l` command-line option.

- **Plans & Execution:**
  - Plans are sets of tasks and state changes for simulation objects, executed sequentially.
    - Individual plans: Belong to specific objects; changing object attributes doesn't alter its plan. Interruptions can occur due to external commands or tasks from superiors.
    - Global plans: Affect multiple objects independently, interrupting current tasks and abandoning plans if present.

- **Object Tasks & Plans:**
  - Objects can have tasks assigned by superiors or interactively.
    - To ensure independent planned actions, add statements to the object's plan.
  - View an object's plan in the Plan window; the current task is highlighted.

- **Plan Editing:** By default, plans are locked during simulation. Unlocking and editing may cause synchronization issues with other objects.

- **Plan Concepts:**
  - Plans contain statements executed by VR-Forces without human intervention, built using dialog boxes.
    - Two types of plans exist: individual (specific to an object) and global (affect multiple objects).

- **Considerations for Creating Plans:**
  - Use triggers carefully; they can cause unexpected behavior if not managed properly.
  - Concurrent tasks in plans should be used judiciously to avoid conflicts.
  - Consider formation movement, tasked-by-superior requests, following simulation objects, and using non-VR-Forces objects in plans.

- **Plan Interruptions:**
  - Plans can be interrupted by triggers (conditional statements) or reactive tasks.
  - Using global commands, tasks, or sets in a simulation object's own plan may terminate its plan.
  - Global plans affect the entire scenario or specific objects but can cause only the last command to complete if multiple tasks are sent rapidly.

- **Plan Types:**
  - Individual plans: tied to a particular simulation object and can include global commands cautiously.
  - Global plans: independent of any simulation object, affecting the whole scenario or specific objects. Tasks from global plans interrupt ongoing tasks and terminate plans.

- **Conditional Statements in Plans:**
  - VR-Forces supports several conditional statements for plan execution based on specified conditions:
    - `If`: Evaluated once when reached; executes block if condition is true.
    - `Trigger`: Continuously evaluates a condition, executing the block when it becomes true.
    - `While`: Repeatedly executes a block as long as a condition remains true.
    - `Do Until Interrupt`: Assigns a task until a condition takes place, then moves to the next plan statement.
    - `Wait Until`: Simulation object waits in place until a condition becomes true before moving to the next plan statement.

- **Additional Key Points:**
  - Global plans are independent of any simulation object and can affect the scenario as a whole or specific objects.
  - Tasks sent to a simulation object from a global plan have the same effect as independent tasks assigned by a human player, interrupting ongoing tasks and terminating plans.

The VR-Forces User Guide presents various conditions testable using conditional statements, categorized as follows:

1. **Entity Conditions:**
   - **Location-based:**
     - Entity within a specific area (Entity In Area)
     - Entity within range of its target (Entity in Range of Target)
     - Entity to the left of a phase line (Entity Left of Phase Line)
     - Entity at a specified altitude (Entity Altitude)
   - **State-based:**
     - Entity creation or destruction (Entity Created, Entity Destroyed)
     - Entity under fire (Entity Under Fire)
     - Entity has a target (Entity Has Target)
     - Entity embarkation state change (Entity Embarked)
   - **Other entity conditions:**
     - Entity detection of another object (Detect Entity)
     - Entity receives text message (Receive Text Message)
     - Engineering object breach (Engineering Object Breached)
     - Missile approach warning (Missile Approach Warning)

2. **Lifeform Conditions:**
   - Lifeform surrender (Lifeform Surrendered)
   - DI-Guy animation or appearance check (Entity DI-Guy Animation Check, Entity DI-Guy Appearance Check)

3. **Miscellaneous Conditions:**
   - Random probability test (Random)
   - Resource level check for a simulation object (Resource)
   - Independent tasking of a unit's subordinate (Simulation Object Independently Tasked)
   - Simulation time and date checks (Simulation Time, Simulation Time of Day, Simulation Date/Time)
   - Tactical graphic activity (Tactical Graphic Active)

Conditional statements evaluate to True or False and support logical operators AND, OR, and NOT. They are evaluated once per execution.

- **If Statement:** Tests a condition and executes subsequent statements if true; optionally includes an 'else' block for false conditions.
  Syntax: `If (condition) then ... else ... endif`

- **Triggers:** Consist of a condition and associated statements executed when the condition becomes true.

- **Trigger Creation & Registration:**
  - Triggers are not automatically added to the plan's execution sequence.
  - They must be registered before VR-Forces will test them.

- **Trigger Condition & Execution:**
  - VR-Forces periodically checks the trigger condition.
    - If true, control passes to the first statement in the trigger body.
    - If false, VR-Forces continues to the next statement in the plan.

- **Interrupt vs Suspend Behavior:**
  - When a trigger fires:
    - If tasks are mutually exclusive with the current task:
      - Interrupt: Discards the current task and executes the trigger's statements.
      - Suspend: Suspends the current task and executes the trigger's statements.
    - If tasks are not mutually exclusive or only set data requests are present, the trigger's statements are executed, and the current task continues.

- **Post-Trigger Execution:**
  - After executing a trigger's tasks:
    - Interrupt: Control returns to the next statement in the plan after the one interrupted by the trigger.
      - If the simulation object was in a While loop when the trigger fired, it returns to the next statement in the While block.
    - Suspend: The suspended task resumes, if possible. It may not be meaningful due to scenario changes.

- **Trigger Placement & Naming:**
  - Trigger placement affects its functioning; see "Deciding Where to Put Triggers" for more details.
  - By default, a trigger's name is its condition syntax, but it can be changed for readability or brevity.

- **Trigger Management:**
  - Reregister triggers manually or set them to auto-reregister for repeated testing of the same condition.
  - Use reactive tasks as an alternative to triggers (see Chapter 32).

- **While Statements:**
  - Structure: `While` keyword, condition, block of statements, `endWhile`.
  - Execution: If true, runs the block; if false, skips it.
  - Condition re-evaluation: Occurs only after completing the entire block.
  - Continuous tasks (Wait, Patrol) in While blocks may prevent condition re-evaluation.

- **Do Until Interrupt Statement:**
  - Enables simulation objects to perform a task until a condition is met or interrupted by another input (trigger).
  - On interruption, returns to Do Until task(s) after handling the interrupting task.

- **Wait Until Statements:**
  - Simulation object waits in place until a condition is true.
  - Trigger interruptions:
    - If "Interrupt Current Task" is not selected: Returns to Wait Until state after trigger tasks are completed.
    - If "Interrupt Current Task" is selected: Moves to the statement after Wait Until.

- **Conditional Tests** in VR-Forces enable plans to respond based on various simulation object states.

  - **Detect Entity**:
    - Checks if an object has detected another at specific identification levels (Detected, Classified, Identified, Full Knowledge).
    - Not supported in global plans.

  - **Engineering Object Breached**:
    - Returns true if a specified engineering object is breached.
    - Aggregate-level scenarios only.

  - **Entity Altitude**:
    - Returns true if an object's altitude is higher or lower than specified.

  - **Entity Created/Destroyed**:
    - Returns true when an object is created or destroyed, respectively.
    - Unit destruction definition may vary based on implementation.

  - **Entity DI-Guy Animation/Appearance Check**:
    - Tests the current DI-Guy animation or appearance for a lifeform.
    - Useful for scripting animations or interactions based on appearance.

  - **Entity Embarked**:
    - Returns true if an object is embarked (on another object).

  - **Entity Has Target**:
    - Returns true if an object identifies a target, unless rules of engagement prevent firing.

  - **Entity In Area**:
    - Returns true if an object is in the named area.
    - Can use 'NOT' operator to check if outside an area.
    - Extruded areas first check 2D position, then altitude for volume inclusion.
    - Option to exclude destroyed objects for trigger reregistration.

- **Considerations**:
  - If a simulation object with the specified name doesn't exist, the condition result is always false.
  - If a specified object is destroyed, the condition might never be satisfied. Plans should account for this possibility.

- **Proximity and Position Conditions:**
  - `Entity In Range of Target`: Object within specified range of another.
  - `Entity Left of Phase Line`: Object to the left of a phase line, considering its infinite extension.

- **Combat Conditions:**
  - `Entity Under Fire`: Directly targeted or hostile detonation within specified distance.
  - `Missile Approach Warning`: Hostile missile within specified distance (not available in global plans).

- **Lifeform and Entity Status:**
  - `Lifeform Surrendered`: Lifeform entity has surrendered.

- **Random Condition:**
  - `Random`: Probability between 0% and 100%. Not recommended for triggers. Use carefully in cascading If statements.

- **Communication Conditions:**
  - `Receive Text Message`: Object received specific text message.

- **Resource Condition:**
  - `Resource`: Tests specified resource amount using comparison operators (not available in global plans).

- **Scenario and Tasking Conditions:**
  - `Scenario Event`: Specified scenario event is in process or completed.
  - `Simulation Object Independently Tasked`: Object within a unit executing task independently.

- **Unit Task Status Check:** Test if all or specific members of a unit are not independently tasked to time unit tasks (e.g., helicopter CH 47 waiting for Inf SQD 1).
- **Simulation Time Conditions:**
  - `Sim Time >` or `<`: True if elapsed simulation time is greater than or less than specified.
  - Simulation time format: days, hours, minutes, seconds.
- **Simulation Date/Time Condition:** True if the current simulation date and time matches a specified value.
- **Tactical Graphic Active Condition:** True if a published tactical graphic is in the active state.
- **Boolean Operators:**
  - `AND`: Evaluates as true if both conditional expressions are true.
  - `OR`: Evaluates as true if either of the expressions is true.
  - `NOT`: Evaluates as true if the conditional expression is false.
- **Plan Variables:**
  - `Simulation Object`: Refers to a simulation object identified by a conditional test (e.g., Entity in Area). In an AND condition, it's set to the last satisfied condition; in an OR condition, it's set to the first satisfied condition.
  - `Created Object`: Refers to the most recently created object. Specific to each simulation object plan and does not affect other plans.

- **Viewing Plans:**
  - Observe simulation objects' plan progress with numbered statements and highlighted conditional blocks.
  - Plan window expands automatically when control passes to a trigger.
  - Current task is highlighted, and completion displays a status message.
  - View multiple objects' plans simultaneously; also view current task on Information dialog box or Last Selected Object Panel.

- **Viewing Plans: Steps:**
  1. Select the simulation object.
  2. Open the Plan window using menu (Choose Objects > Plan), keyboard shortcut (P), or panel buttons.

- **Considerations for Creating Plans:**
  - Tips for constructing plans to avoid debugging issues and understand statement interactions.

- **Considerations for Using Triggers:**
  - Register triggers at plan's beginning to ensure evaluation, or later based on desired behavior.
  - Nest triggers within other triggers for complex conditions (e.g., time-based).
  - Triggers can have Set statements only, concurrent tasks, or both; they don't necessarily interrupt current tasks.

1. **Trigger Usage:**
   - Triggers execute `Set` statements during task performance, mimicking manual state changes.
   - Useful for changing a simulation object's state under unknown conditions.

2. **Concurrent Tasks:**
   - Plans wait for current tasks to complete before starting new ones, even if they don't conflict.
   - Use triggers to assign concurrent tasks in plans; the object executes both tasks simultaneously.
   - Alternatively, use reactive tasks for automatic concurrent task assignment.

3. **Formation Movement:**
   - Set formation using `Formation set data request` or move into a formation with `Move Into Formation` task.
   - Default formation is a column.

4. **Tasked-By-Superior Request:**
   - Has no effect within a plan body as it's overridden by the next task.
   - Implemented only if it's the last statement in a plan or trigger after all tasks are executed.

5. **Following Simulation Objects:**
   - Avoid giving followers identical offset values to prevent circling behavior when the followed object stops.

6. **Non-VR-Forces Simulation Objects in Plans:**
   - Identified by marking text; if absent, VR-Forces uses their simulation object identifier.
   - Remote units are ignored and cannot be checked for children.
   - Referring to remote entities by marking text may cause unpredictability with duplicate names.
   - Ensure consistent naming of non-VR-Forces objects across runs.

The text outlines creating, managing, and using plans in VR-Forces, focusing on simulation objects:

1. **Plan Components & Considerations:**
   - Plans combine tasks, data requests, global commands, conditions, and triggers.
   - Editing a plan during a simulation may cause desynchronization unless the updated plan starts from the current point.

2. **Managing Plan Statements:**
   - Add statements (tasks, data requests, control blocks, wait until, triggers) to plans after the selected statement.
   - Edit or delete statements as needed.
   - Print, save changes, and build condition statements for plans.
   - Use plan variables and create global plans with quick launch options.

3. **Adding Commands & Interactions:**
   - Add tasks, sets, messages (text/sensor views, console), create/delete objects, issue plans, send view control/test results from commands menu.
   - Write plans for units, multiple simulation objects, and remote entities.
   - Copy plans/statements, restart/abandon plans, and edit plans during simulations.

4. **Plan Window & Access:**
   - Open the Plan window via Objects > Plan (or P), Last Selected Object Panel's Plan button, or Command Panel's Plan button.
   - Add, edit, or delete statements in the opened plan for a selected simulation object.

**Key Points to Remember:**
- Edit plans before starting simulations to avoid desynchronization.
- Be mindful of open dialog boxes when multiple Plan windows are active.
- Plans facilitate diverse interactions with simulation objects.

- **Adding Tasks/Set Data Requests:**
  - Select the desired location in the Plan window.
  - Choose `Task > category > Task` or `Set > category > Set Data Request`.
  - Fill out required parameters using guides from respective sections ("Section V. Tasks" on page 525 for tasks, "Section VI. Set Data Requests" on page 833 for set data requests).
  - Click 'OK' to add the statement or 'Cancel' to exit.

- **Adding Conditional Blocks (If, While):**
  - Open the Plan window and select the insertion point.
  - Choose `Conditions > If` or `While`.
  - Optionally, provide a description in the Description box for use instead of condition syntax.
  - Create the conditional expression using "39.4. Building Condition Statements" on page 926.
  - Click 'OK' to add the block (If statement or While statement).
  - Add tasks, sets, or other commands within the block based on true/false conditions:
    - For If blocks: add commands under the first line for true condition and optionally under the else line for false condition.
    - For While blocks: add commands under the first line for as long as the condition is true.

- **Adding Wait Until Statement:**
  - Open the Plan window and select the insertion point.
  - Choose `Wait Until`.
  - Fill out required parameters using guides from respective sections.
  - Click 'OK' to add the statement.

- **Wait Until Statement:**
  - Start with an empty plan by selecting 'Plan'.
  - Choose 'Conditions > Wait Until' to open the dialog box.
  - Optionally, add a description for the wait until statement in the Description box.
  - Create a conditional expression using the method described on page 926 of the user guide.
  - Click 'OK' to add the wait until statement to the plan.

- **Adding a Trigger to a Plan:**
  - Open the Plan window and choose 'Conditions > Add Trigger'.
  - Optionally, enter a name for the trigger in the Trigger Name box.
  - Select 'Automatically Reregister Trigger' if you want the trigger to be automatically reregistered after it runs.
  - Select 'Interrupt Current Task' if you want the trigger to interrupt the currently running task instead of suspending and resuming it.
  - Create a conditional expression for the trigger using the method described on page 926 of the user guide.
  - Click 'OK' to add the trigger to the plan. The trigger name will be listed below the main plan block.
  - Select the first line in the Trigger pane (Trigger Body) and add tasks, sets, or other commands that should be executed when the condition becomes true.
  - Register the trigger (see 'Registering Triggers').

- **Registering Triggers:**
  - In the Plan window, select the statement below which you want to register the trigger.
  - Choose 'Conditions > Register Trigger'.
  - Select the desired trigger from the list in the Register Trigger dialog box. If there are no triggers or you want to create a new one, choose 'New'.
  - Click 'OK' to register the trigger.

- **Reregistering Triggers:**
  - By default, triggers are unregistered after their statements have been executed.
  - For recurring conditions, manually reregister the trigger by selecting it and choosing 'Conditions > Register Trigger', or set automatic reregistration when creating/editing a trigger by selecting 'Automatically Reregister Trigger'.

1. **Alternatives to Triggers:**
   - Write reactive tasks (similar to triggers) or scripted tasks for repeated condition testing.

2. **Managing Triggers:**
   - **Unregistering:** Stop trigger condition testing without removal; useful when scenario circumstances change.
     - Steps: Select plan statement > Conditions > Unregister Trigger > Choose trigger > OK.
   - **Cleanup:** Remove unused triggers from a plan (no penalty for leaving them).
     - Method: Plan > Clean Up Unused Triggers.
   - **Automatic Check:** VR-Forces can automatically check and handle unused triggers on plan save/apply.
     - Enable: Settings > Application > Simulation Settings > Always Check For Unused Triggers Before Updating Plan.

3. **Modifying Statements:**
   - **Edit:** Edit simple statements in the Plan window by double-clicking or using the Edit button.
   - **Delete:** Delete individual or all statements at once.
     - Individual: Select statement > Delete (or press Delete).
     - All: Select top line > Delete (or press Delete).

4. **Plan Operations:**
   - **Print:** Print plans listing scenario name, simulation object's name, and plan statements.
     - Method: Plan > Print.
   - **Save Changes:** Save changes to a plan and continue editing or save and exit using Apply or OK in the Plan window.

- **Conditional Statements:** Create If blocks, While loops, Wait Until, or triggers by specifying a condition.
- **Condition Builder:** Dynamic dialog box offering permissible options for each step; supports comparison operators, logical operators, and tests of simulation object status.
  - Builds conditions using one or multiple conditions that can be nested and grouped.

**Simple Condition (One Condition):**
- Choose condition type: If/Else Expression, While Expression, Wait Until Expression, Trigger dialog box.
- Optionally add a description for the condition.
- Change evaluates to (True/False) if needed.
- Select the condition to test from the list provided.
  - Specify parameters of the selected condition in the opened dialog box.
- Click OK; the condition is displayed at the bottom and added to the plan or trigger pane.

**Complex Condition (Multiple Conditions):**
- Choose the type of condition expression dialog box.
- Optionally change the top-level logical operator to 'Or' for any/all conditions.
- Optionally change the top-level evaluator to 'False'.
- Select a condition from the list and specify its parameters in the opened dialog box.
  - Click OK; the condition displays at the bottom of the dialog box.
- Build complex conditions using multiple, nested conditions with logical operators (AND, OR, NOT).

- **Adding Conditions:**
  - Click 'Add' button to create a new condition line.
  - Choose a condition, specify its parameters, and add more as needed; syntax updates dynamically.
  - Optionally, select a logical operator ('And' or 'Or') for complex conditions, adding subordinate lines indented under the operator.
  - Expand/collapse logical groupings using the arrow next to the logical operator line.
  - Continue adding conditions and finalize with 'OK'.

- **Complex Condition Tutorial:**
  - Creates the condition: "If (M1A2 4 in Area 1) AND ((M1A2 2 left of Phase Line 1) OR (T80 1 destroyed)) then".
  - Procedure involves opening a plan window, choosing 'Conditions > If', and constructing the expression using options like 'Entity in Area', 'Any of the conditions (Or)', 'Entity Left of Phase Line', and 'Entity Destroyed'.
  - Include a description for clarity or use the entire syntax.
  - Edit existing condition statements by double-clicking them in the Plan window.

- **Editing Conditions:**
  - Click 'Edit' ( ) button next to a condition.
  - Modify parameters as needed.
  - Select a different condition from the list and specify its parameters.
  - Click 'Delete' ( ) button to remove a condition.
  - Choose a different evaluation option in the 'Evaluates To' dropdown menu.
  - Click 'OK' to save changes.

- **Editing Triggers:**
  - Select the desired trigger in the Triggers list.
  - Click 'Edit' ( ) button. The Trigger dialog box appears.
  - Follow the same steps as editing conditions.
  - Click 'OK' to save changes.

- **Specifying Objects in Condition Statements:**
  - Options include:
    - Specific named simulation object (e.g., "M1A2 1 is in Area 1").
    - "Self" for easy plan replication and pasting.
    - Enumeration (e.g., any M1A2).
    - Inverse selection (e.g., any simulation object but myself, or except an M1A2).
    - Unit behavior: all members must satisfy the condition or any member can.

- **Specifying a Name in a Condition Statement:**
  - Select the 'Name' tab in the condition dialog box.
  - Choose 'Use SELF' for the current simulation object.
  - Filter and select a named simulation object, variable, or unit from the list.
  - If a unit is selected, choose whether any subordinate member should satisfy the condition.

1. **Inverting Selection:**
   - Check 'Invert Selection' to select all members except the selected one.
   - Selecting both 'Any Subordinate of Selected Unit' and 'Invert Selection' makes the condition true if any entity in the scenario meets it.

2. **Specifying a Pattern:**
   - Patterns use enumerations from `./appData/settings/vrfGui/condition-entity-types.csv`.
   - You can add custom patterns to this file.
   - To specify a pattern:
     - Select 'Pattern' tab.
     - Optionally, choose a force to test for.
     - For each element of the enumeration, select an option from the list or type an enumeration in the text box.
     - If the entered enumeration is for a unit, enable 'Any Subordinate Of Selected Unit' if you want any member meeting the condition to satisfy it.
     - Select 'Invert Pattern' to specify the inverse of the name (any member except the selected one).
     - Click OK.

3. **Using Plan Variables:**
   - Plan variables (`Simulation Object` and `Created Object`) can be used in tasks, sets, or conditional tests.
   - They are assigned values only after an object is created from within a plan or a conditional test identifies a simulation object.
   - To use a plan variable:
     - Select 'Plan Variables' in the Filter list.
     - Choose the desired variable (either `Simulation Object` or `Created Object`).
     - Complete the rest of the dialog box normally.

4. **Creating Global Plans:**
   - Global plans are not tied to a specific simulation object but are assigned to a specific back-end.
   - They have a limited set of tasks and commands, similar to individual plans, and can be extended using VR-Forces API or scripted tasks.

- **Accessing Global Plans:**
  - Open 'Global Plans' window via `Simulation > Global Plans` or toolbar button ().
  - Lists all global plans and their associated simulation engines.

- **Creating a New Global Plan:**
  - Click 'New' in the Global Plans window.
  - Enter a name for the plan in the 'Plan Name' box.
  - If your scenario has multiple back-ends, select the desired one.
  - Click OK to open the 'Edit Global Plan' window.
  - Add commands from Task, Set, Conditions, or Commands menus as described in the user guide.
  - Optionally:
    - Enable quick launch by selecting the 'Quick Launch' checkbox.
    - Add the plan to the Quick Launch Panel by selecting 'Show on Quick Launch Panel'.
    - Specify the position of the plan on the Quick Launch Panel using the 'Ordinal' box.
    - Change the icon for this plan on the Quick Launch Panel by clicking the 'Browse' button, selecting a file, and clicking Open.

- **Controlling Global Plan Execution (Quick Launch):**
  - Enable quick launch to prevent the plan from running automatically.
  - Launch the plan manually:
    - From the Quick Launch Panel: Click the icon and text of the desired plan.
    - From the 'Global Plans' window: Select the plan, then click 'Launch'.
    - From another plan: Open the plan window, choose Commands > Launch Global Plan, select the quick launch global plan, and click OK.
  - The launched plan runs to completion. Once finished, it can be relaunched.

- **Opening Information Dialog Box for a Global Plan:**
  - Open 'Global Plans' window via `Simulation > Global Plans` or toolbar button ().
  - Select the desired global plan in the list.

- **Open Information Dialog Box:**
  - Select the global plan.
  - Click 'Information'.

- **Adding Commands to a Global Plan:**
  - Use the 'Commands' menu to assign tasks and data requests to simulation objects.
  - Unlike individual plans, there's no context sensitivity; ensure the task/set is supported by the target object.
  - Verify compatibility using the Task/Set menu of an object or the Simulation Object Editor.

- **Adding Tasks/Sets from Commands Menu:**
  - Select 'Commands' > 'Send Task' (or 'Send Set') to open respective dialog boxes.
  - Choose a simulation object; view the list of available tasks/sets for that object.
  - Select the desired task/set and click 'OK'.
  - If parameters are required, provide them in the subsequent dialog box.

- **Adding Commands to a Plan:**
  - Add tasks without parameters directly to the plan.
  - For parameterized tasks:
    - Specify parameters in the task-specific dialog box.
    - Click OK to add the command to the plan.
    - Refer to relevant sections for detailed task assignment.

- **Editing Task/Set Commands:**
  - Select the plan statement and click 'Edit' or double-click it to open the dialog box.
  - Options include:
    - Deleting the current task and choosing a new one.
    - Editing the parameters of the existing task.
  - Click OK to save changes.

- **Sending Text Messages:**
  - Access "Send Text Message" from the Commands menu.
  - Choose 'Broadcast' for all objects or specify a single object by name or selection.
  - Type your message and click OK. The command is added to the plan.
  - Received messages can be tested in conditional statements, without using radio networks or displaying communication lines/squawk indicators.

- **Sending Console Messages:**
  - Display messages on an object's Information dialog box or back-end console based on notification levels.
  - Lower-level notifications are displayed if the target's level is higher.

- **Sending Console Message:**
  - Open 'Console Message' dialog from 'Commands' > 'Console Message'.
  - Choose notify level.
  - Type message, then click 'OK'.

- **Creating Objects from a Plan:**
  - Open desired object creation palette from 'Commands' > 'Create' > 'palette'.
  - Select and create the object. The created object disappears as only its creation command is added to the plan.

- **Deleting Objects from a Plan:**
  - Open 'Delete Object' dialog from 'Commands' > 'Delete Object'.
  - Type or select the name of the object, then click 'OK'.

- **Deleting Oneself from the Scenario:**
  - Use 'Delete Self' command for the current simulation object.

- **Issuing a Plan:**
  - Open 'Issue Plan' dialog from 'Commands' > 'Issue Plan'.
  - Select or type the target simulation object's name.
  - Issue Plan is concurrent, not affecting current tasks or plan sequencing.

- **Creating Simulation Objects:**
  - Type the name of a non-existent object.
  - Ensure the typed name matches the created object's name.
  - Avoid duplicate entity names in the scenario.
  - Use 'Created Object' plan variable for recently created entities.

- **Writing Plans:**
  - Use the right side dialog box, identical to the main Plan dialog box.
  - Follow standard procedures to write plans (described elsewhere).

- **Sending View Control Messages:**
  - Target specific observers or groups with similar names.
  - Send saved observer views; transition time can be specified.
  - Not all view modes are supported by the 'View Control' command, but saved views using any mode can be sent to VR-Forces.
  - Recorded scenarios with MAK Data Logger capture view control commands for demonstration purposes.

- **Steps to Send a View Control Message:**
  1. Choose 'Commands > Send View Control'.
  2. Select observers to control (specific or all).
  3. Choose the desired view action:
     - Reset: Resets the observer view to default.
     - Detach: Detaches the observer from an attached simulation object.
     - Observer View: Sends the selected observer view.
     - Attach mode: Sends the selected attach mode (Absolute or one of the attach modes).
  4. For most commands, select additional parameters in the reappearing dialog box.

- **Observer View Action:**
  - Choose desired observer view from Figure 335.
  - Optionally, specify transition time in seconds.

- **Absolute/Attach Modes (Figure 336):**
  - Select observer mode.
  - For Absolute: Specify observer location and optionally set offset orientation.
  - For Attach: Choose simulation object to attach to; manually set offset vector if needed (default is 0,0,0).
  - Use Track or Tether Track with specific settings.

- **Creating Sensor View from a Plan:**
  - Access "Commands > Create Sensor View".
  - Select front-end(s) for sensor view.
  - Enable/disable view display and sensor controls using Figure 337.

- **Sending Test Results:**
  - Choose "Choose > Test Result".
  - Pick result, enter optional message; simulation exits immediately upon test result issuance.

- **Writing Plans for Units/Simulation Objects:**
  - Select unit or individual simulation object.
  - Follow plan creation procedures (unit members respond independently).
  - Assign plans to multiple objects simultaneously, replacing existing ones.

- **Plan Window Behavior:**
  - Displays the same plan if selected objects have identical plans.
  - Presents 'continue' or 'cancel' options when selected objects have different plans. Choosing 'continue' clears the Plan window and replaces existing plans with an empty one.

- **Writing Plans for Multiple Simulation Objects:**
  - Select the simulation objects to assign the same plan.
  - Choose "Objects > Plan" to open the Plan window.
  - Add statements to the plan as desired.
  - Click "OK" to assign the plan to the selected objects.

- **Plans for Remote Entities:**
  - Attach components to remote entities before writing plans.
  - Use appropriate plans (e.g., enable spot reporting, send radio message) as movement tasks are not supported.
  - Refer to "78.1. Attaching Components to Remote Entities" for detailed instructions.

- **Copying Plans and Plan Statements:**
  - Open the source plan and select the top line (Main Plan Block) or a specific statement to copy.
  - Choose "Plan > Copy Plan" or click the Copy button.
  - Open the destination plan and select the insertion point.
  - Click the Paste button to insert the copied plan or statement.
  - Save the plan.

- **Restarting a Plan:**
  - **Interactively:** Select the simulation object, then choose "Objects > Manage Plan > Restart Plan".
  - **From within a plan:** Open the plan, choose "Commands > Restart Plan", select the desired object in the dialog box, and click "OK".

- **Abandoning a Plan:**
  - Stops current task, marks plan as complete, deletes triggers, skips to end, enters wait state.
  - Prompted before abandonment unless disabled. Can be done interactively or via command.

- **Editing a Plan During Simulation:**
  - Plans locked by default during scenario run. Unlocking allows editing but may cause synchronization issues.
  - Changes save entity to first line, restarting plan from beginning.

- **Synchronization Matrix (Sync Matrix):**
  - Manages multiple entities/units with coordinating plans in phases for better scenario control and synchronization.
  - Entities/units in one matrix. Separate matrices for different forces or uncoordinated groups.
  - Creation involves adding entities/units, units, phases, and plans. Plans can be copied, pasted, continued, deactivated, activated, or removed.

**Key Points Added:**
- None

- **Complex Scenarios:**
  - Debugging can be difficult due to multiple individual plans, a global plan, and a Synchronization Matrix.

- **Synchronization Matrix:**
  - A simulation object that sends plans to entities/units using the 'Issue Plan' command.
    - Plans are sent in phases, with each phase having a specific end condition.
    - Once a phase ends, all plan information from it is discarded, and the next phase's plans are used.
  - Can contain both entities and units (including multi-level units).
    - In each phase, you can make a plan for either a unit or its constituent entities, but not both simultaneously.

- **Spot Report Viewpoint:**
  - When ground truth is disabled for opposing forces, objects are hidden until spotted by friendly forces.
  - Details on spot reports and fog of war can be found in section 9.1.2.

- **Building a Synchronization Matrix:**
  - Create a new matrix using the 'Add Sync Matrix' button.
  - Manage matrices by selecting one from the list or changing its name directly.
  - Delete a matrix using the 'Remove Sync Matrix' button.

- **Adding Entities and Units to the Matrix:**
  - Click 'Add Object' in the Object column, then select an entity/unit from the Objects List or on the terrain to add it to the matrix.
  - Remove an entity/unit using the 'Remove Object' button next to its name.

- **Managing Phases in the Matrix:**
  - The matrix starts with two phases; add more using the 'Add Phase' button.
  - Edit a phase's end condition (default: All Plans Completed) using the 'Edit' button. Learn about conditions in "38.2. Conditional Statements".
  - Remove a phase using the 'Remove Phase' button.

- **Adding and Editing Plans for Entities/Units:**
  - Each cell in the matrix holds a plan for the associated entity/unit.
  - Add or edit plans by single-clicking on cells that read 'Add Plan'.

- **Plan Management in Synchronization Matrix:**
  - Create/Edit a plan:
    - Right-click in a cell, choose 'Set Plan' to create a new plan.
    - Right-click in a cell, choose 'Edit Plan' to modify an existing plan.
  - Copy a plan:
    - Right-click on a cell with a plan, choose 'Copy Plan'.
    - Right-click on another cell, choose 'Paste Plan' to paste the copied plan.
  - Continue a plan across phases:
    - Click 'Continue' in the cell for that phase. An arrow appears, showing the span of the plan.
  - Discontinue a continued plan:
    - Right-click on the arrow and choose 'Discontinue Previous Plan'.
  - Deactivate/Activate plans:
    - Right-click on the unit's plan, choose 'Deactivate Plan' to stop subordinates from following it.
    - Right-click on the unit's plan, choose 'Reactivate Plan' to resume following the plan.
  - Remove a plan:
    - Right-click on the plan and choose 'Remove Plan'.

- **Tactical Graphics:**
  - Represent points, lines, areas, and information overlaid on terrain.
  - Automatically assigned to overlays upon creation, with the option to change later.

- **Displaying Tactical Graphics:**
  - Show/Hide tactical graphics:
    - Use 'Show' to display tactical graphics.
    - Use 'Hide' to hide tactical graphics.
  - Show/Hide labels for tactical graphics:
    - Use respective 'Show Labels' options to display labels.
    - Use respective 'Hide Labels' options to hide labels.
  - Display HAT (High Accuracy Terrain) lines:
    - For vertices: Enable 'Display HAT Lines for Vertices'.
    - For routes (3D only): Enable 'Display HAT Lines for Routes'.
  - Display tactical graphics in black or white:
    - Choose the desired color option to change the display color of tactical graphics.

- **Simulation Objects:** Aware of certain tactical graphics, influencing their behavior in simulations.

- **Supported Tactical Graphics:**
  - **Control Objects:**
    - **Waypoints:** Specific X, Y, Z coordinates for simulation objects to move towards.
    - **Areas:** Polygonal areas with volume, allowing air and subsurface entities to interact.
    - **Routes:** Sequences of points in three-dimensional space for navigation.
    - **Phase Lines:** Infinitely long lines defined by two points, used for planning movements.
    - **Obstacles (Area & Linear):** Polygonal areas or lines on the terrain that simulation objects try to avoid if obstacle avoidance is enabled.

  - **Specialty Graphics:**
    - **Pedestrian Paths:** Routes humans automatically choose to follow in navigation areas with navigation data.
    - **Terrain Page-in Area:** Areas prioritizing streaming or paged terrain for paging in.

  - **Informational Graphics:**
    - **Text:** Arbitrary informational text displayed on the screen.
    - **Symbols, Circles, Ellipses, Boxes, Spider Webs:** Graphics that do not affect the simulation.

  - **Volumetric Objects (Areas, Circles, Boxes, Ellipses, Corridors):** Define 3D volumes for detecting simulation object presence, useful for air corridors and airspace definition.

  - **Combat Engineering Objects (Lines & Areas):** Impede progress and cause damage to simulation objects in aggregate-level scenarios.

- **Tactical Graphics Features:**
  - Named with an optional alternative name up to 255 characters long.
  - Can have labels and extended labels, which are not unique and have no length restriction.
  - Belong to a specific force.

- **Force Indication:**
  - Waypoints and bullseyes display their force color.
  - Other tactical graphics' force can be determined via the 'State Data' page in their Information dialog box.

- **Basic Control Objects:**
  - **Points (Waypoints):**
    - Identify X, Y, Z coordinates.
    - Can have altitude values for aircraft waypoints or patrols.
    - Clamp to entity surfaces; buoyancy may need disabling for ocean entities.
  - **Phase Lines:**
    - Defined by two points, extend infinitely in either direction and have infinite height.
    - Used for testing the location of a simulation object (left/right of line).
    - Simulation objects cannot move along phase lines.
  - **Routes:**
    - Sequences of 3D points with a defined direction.
    - Objects can move or patrol along them from one end to the other.
  - **Areas:**
    - Define polygonal areas on the terrain for location testing (object in/out of area).
  - **Obstacles:**
    - Represent problematic terrain lines/areas that cause simulation objects problems.
    - Ground entities avoid them if obstacle avoidance is enabled.

- **Related Topics:**
  - Intervisibility and Range
  - Terrain Profiles & Manually Paging-In Terrain
  - Creating and Placing Objects
  - Overlays

1. **Aggregate-Level Scenarios:**
   - Support various objects: combat engineering, contamination areas, and obstacles.
   - Objects can defend, damage, or impede simulation objects.
   - Linear obstacles not supported; functional only in navigation areas.

2. **Tactical Graphics Display Configuration:**
   - Enable/disable display of tactical graphics.
   - Show/hide vertex indicators for point, linear, and areal objects (default: selected only).
   - Show/hide height-above-terrain lines.
   - Display height-above-terrain lines for selected graphics only.

3. **Showing/Hiding Tactical Graphics:**
   - Default behavior: destroy when hidden, recreate when shown (performance impact).
   - Control display from:
     - Display Settings dialog box.
     - Menu and toolbar options.
     - Overlays tab.
   - Show/hide all or specific tactical graphics, including active ones only.

4. **Configuring Tactical Graphics Hiding:**
   - Option to make tactical graphics invisible instead of destroying them for improved performance in scenarios with many tactical graphics.

5. **Tactical Graphics Labels:**
   - Display labels and height above terrain for tactical graphic objects (enabled by default).

- **Vertex Labels:**
  - Impact performance when displayed.
  - Show/hide: Settings > Display > Tactical Graphics Display Settings > Show Tactical Graphics Labels.
  - Hidden at altitudes where text exceeds adjacent line segment or shape length.

- **HAT (Height Above Terrain) Lines for Vertices:**
  - In 3D modes, helps understand object-terrain relationships.
  - Shown only for objects that can be above/below ground (routes, waypoints).
  - Show/hide: Settings > Display > Tactical Graphics Display Settings.
  - Reduces frame rate.

- **HAT Lines for Routes (3D Only):**
  - Thin, light-colored lines at regular intervals along routes.
  - No terrain intersection; can go below sea level if route is above water.
  - Configure appearance via Environmental Line visual definition in element definitions.

- **Tactical Graphics Color Override:**
  - Default: selected force color. Can override to display friendly forces as black or white.
  - Override: Settings > Display > Tactical Graphics Display Settings > Friendly Force Color Override.

- **Overlays** in VR Forces:
  - Organize and manage tactical graphics and simulation objects.
  - Equivalent to clear plastic overlays on a physical map.

- **Creation and Editing:**
  - Create an overlay: Select 'Overlays View', click 'Add' button, rename it if needed.
  - Select an overlay: Click its name in the 'Overlays View'.
  - Lock/unlock an overlay:
    - Prevent/enable editing of objects on the overlay.
    - Use 'Lock/Unlock Overlay' button.
  - Hide/show objects or overlays for better focus during editing or observation.

- **Saving and Loading:**
  - Save and load tactical graphics and overlays together.
  - Locked/unlocked state of each overlay is saved with the scenario, but not show/hide state of default overlays and objects on them.

- **Exporting and Importing:**
  - Export tactical graphics as shapefiles.
  - Import shapefiles into overlays.

- **Overlay Visibility Control:**
  - Hide all objects on an overlay:
    - Clear checkbox in Overlay Bar or Object Lists Panel.
  - Hide individual objects:
    - Clear object's checkbox in Objects List Panel.
  - Hide all overlays except selected one:
    - Right-click the desired overlay and choose "Hide All but This".
  - Show/Hide all overlays:
    - Right-click any overlay and choose respective option ("Show All Overlays" or "Hide All Overlays").

- **Newly Created Objects:**
  - Automatically hide new objects on an overlay:
    - Select the overlay in Overlay Views panel.
    - Click the "Auto-hide" button () to add a crossed-out eye icon next to the overlay name.

- **Overlay Name Change:**
  - Rename default or user-created overlays:
    - Select the overlay in Object Lists Panel, Overlays View.
    - Click the "Rename" button or slowly double-click the overlay's name.
    - Type a new name and press Enter.

- **Object and Overlay Removal:**
  - Remove object from user-created overlay:
    - Right-click the object in Overlays View and choose "Remove From Overlay".
  - Delete an overlay (and its contents):
    - Select the overlay in Object Lists Panel, Overlays View.
    - Click the "Delete" button () to remove the overlay and all associated objects.

- **Saving/Loading Tactical Graphics and Overlays:**
  - Published tactical graphics are saved to .oob file. Unpublished ones go to .ovl file.
  - Save overlays independently:
    - Choose File > Overlay > Save Overlay.
    - Enter a name for the overlay file in the Save Overlay dialog box.
    - Click "Save" to save the overlay file (.ovl).

- **Loading Tactical Graphics and Overlays:**
  - Load previously saved overlays:
    - Go to `File > Overlay > Load Overlay`.
    - Select the desired overlay file.
    - Ensure the terrain database matches or includes the area where the overlay was created.

- **Exporting Tactical Graphics as Shapefiles:**
  - Export tactical graphics to shapefiles for external use:
    - VR-Forces exports point, line, and area graphics separately (P.shp, L.shp, A.shp).
    - Edit exported shapefiles in third-party applications to add attributes like road width or lanes.
  - To export:
    - Select the desired overlay on the Overlays View.
    - Go to `File > Overlay > Save Overlay as Shape Files` or click the corresponding button.

- **Importing Shapefiles into Overlays:**
  - Import feature data (shapefiles) into overlays for quick tactical graphics creation:
    - Features are placed as points, lines, or areas (e.g., roads, buildings).
  - To import:
    - Select an overlay.
    - Go to `File > Overlay > Import Shape File Onto Overlay`.
    - Select the desired shapefile and click Open.

- **Tactical Graphics Creation:**
  - **Areas:** Projected (2D, infinite height) and volumetric (3D, floor & ceiling).
  - **Freehand Lines:** Editable but vertices aren't individually selectable; arrows can be added.
  - **Circles & Ellipses:** Don't interact with simulation objects.

- **Additional Operations:**
  - Draw: Arcs, sector areas, spider webs, boxes, and create volumetric (extruded) graphics.
  - Add text to overlays and assign tactical graphics to them.
  - Display terrain profile while creating lines and publish tactical graphics.

- **Route & Area Creation:**
  - Create: Computed routes, intel collection areas, minefield areas, nav edges, and bullseyes.
  - Bullseye operations: Measure bearing and range, attach spider webs.

- **Tactical Graphic Attachment & Editing:**
  - Attach graphics to simulation objects automatically or manually.
  - Delete, edit vertices, resize boxes/text, rotate ellipses, change line direction/color, and style properties of tactical graphics.

- **Active & Inactive Graphics:** Understand the difference between active (interact with other objects) and inactive (do not interact) tactical graphics.

- **Circle, Ellipse, Arc, Sector Area (Tactical Graphics)**:
  - Used solely for graphics; simulation objects do not interact with them.
  - Created via the Create Object Palette, optionally using the Tactical Graphics filter.
  - Creation involves placing center/endpoints and defining dimensions using mouse drag and click.

- **Circle**:
  - Define center point first, then set radius by dragging the mouse.

- **Ellipse**:
  - Set center point, then height (drag vertically), and finally width (drag horizontally).

- **Arc**:
  - Place one end, then the other, before setting radius with a mouse drag.

- **Sector Area**:
  - Defined by two legs sharing a common vertex connected by an arc.
  - Attributes: Width, Depth, Heading can be manually specified in the Edit Sector dialog box.
  - Drawn clockwise up to 360 degrees (a full circle).

- **Spider Webs**:
  - Display sectors and ranges.

- **Spider Web:**
  - Heading: Oriented to true or magnetic north based on Display Units Settings.
  - Customizable Attributes:
    - Number of Rings: Specify the quantity of rings in the spider web.
    - Distance Between Rings (NM): Set the distance between each ring in nautical miles. The spider web's size adjusts based on these specifications.
    - Number of Spokes: Define the number of spokes in the spider web.
  - Creation Steps:
    - Open Create Object Palette.
    - Select Spider Web, changing the cursor to draw mode with a vertex icon.
    - Open and edit parameters in the Create Spider Web dialog box.
    - Click to place the center of the spider web; it's created using specified parameters.

- **Box:**
  - Characteristics: Constrained to be parallelograms, non-interactive with simulation objects (not areas).
  - Creation Steps:
    - Open Create Object Palette.
    - Select Box, attaching a box to the cursor.
    - Click to place the box approximately where desired.
    - Double-click any vertex to make it editable and drag to reshape the box.

- **Volumetric Tactical Graphics (Extruded):**
  - Use Cases: Define 3D areas like air corridors, airspace, etc.
  - Types:
    - Area (extruded)
    - Box (extruded)
    - Circle (extruded)
    - Corridor (linear object)
    - Ellipse (extruded)
    - Joint Engagement Zone (Altitude Limited)
    - Missile Engagement Zone (Altitude Limited)
  - Simulation Object Interaction: Objects can move along corridors, ignoring height and width. Entity in Area condition checks if an entity is within the volume of an extruded area.
  - Creation Steps:
    - Open Create Object Palette.
    - Select desired volumetric tactical graphic type.
    - Specify vertices like a 2D tactical graphic; right-click to set the final vertex, opening the Edit dialog box.
    - If creating a route, specify height and width. For other extruded graphics, specify floor and ceiling (above mean sea level).
    - Click Create.

- **Text on Overlay:**
  - Characteristics: Maximum text object width is fixed.
  - Creation Steps:
    - Open Create Object Palette.
    - Select Text; "Text" is attached to the cursor.
    - Click to set the bottom center of the text, opening the Create Text dialog box.

1. **Assigning Tactical Graphics to an Overlay:**
   - New tactical graphics are assigned to the 'Tactical Graphics' overlay by default.
   - Assign during creation or editing:
     - Set property while creating (see "14.3.2 Specifying an Object's Properties Before You Create It").
     - Move later using Edit Object dialog box or drag in Overlays View.

2. **Moving a Tactical Graphic to a Different Overlay:**
   - Select graphic, choose 'Objects > Edit', select new overlay, then click 'Update'.
   - Alternatively, drag graphic to new overlay in Overlays View.

3. **Displaying Terrain Profile While Creating a Line:**
   - Automatically display (configured in "61.1.2 Configuring Terrain Profiles") or manually open terrain profile window:
     - Select object, click 'Create object tab', place first vertex, then click 'Terrain Profile'.

4. **Publishing Tactical Graphics:**
   - By default, all tactical graphics are published (visible to other participants).
   - Unpublish to make visible only on the front-end where created.
   - Published save to scenario objects file; unpublished save to overlays file.
   - Publish/unpublish: select graphic, choose 'Objects > Edit', toggle 'Publish Object' check box.

- **Computed Route:**
  - Persistent tactical graphic saved with scenarios, usable by any simulation object.
  - Created using specified rules (preconfigured for ships/ground vehicles, or customizable).
  - Creation steps:
    - Choose "Create > Computed Route".
    - Optionally, name, label, and overlay the route.
    - Select a force and set start/end points.
    - Choose vehicle type (ground/ship or custom with specific rules).
    - Click "Create".

- **Intel Collection Area:**
  - Modifies sensor signatures of objects within its boundaries, affecting detection abilities.
  - Created like other areas but requires setting area modifiers per force to increase/decrease detectability.
  - Creation steps:
    - Open Create Object Palette > Intel Collection Area.
    - Draw an area on the map.
    - Add forces and set modifier values in the dialog box.
    - Click "Create".

- **Minefield Area:**
  - Two types: representational (no effect) or simulation objects with specified parameters that can damage entities passing through.
  - Types include Antipersonnel, Antitank, Decoy, Graphic/Unspecified, and Planned Minefield.

- **Minefield Types:**
  - *Conventional Minefield:* Contains conventional antitank and antipersonnel mines, defined post-creation. Mines do not self-destruct.
  - *RAAM-ADAM Minefield:* Scatterable minefield with two types of mines that self-destruct after 48 hours in simulation. Editable post-creation.
  - *Scatterable Minefield:* Includes remote anti-armor and area denial anti-personnel mines, defined post-creation. Mines can self-destruct.

- **Creating a Minefield:**
  - Open Create Objects Palette.
  - Select desired minefield type.
  - Draw an area on the map.
  - Configure mine types with respective fuses, trip wire length (if applicable), areal density, and self-destruct time (for scatterable mines).
  - Click 'Create' to display the minefield.

- **Navigation Edges:**
  - Tactical graphics influencing navigation mesh in a navigation area.
  - Enable entities to move to otherwise inaccessible locations.
  - Examples: Climbing buildings or creating virtual tunnels underground.
  - May impact realism but can be acceptable for less detailed terrains.

- **Nav Edges:**
  - Used when navigation data is too restrictive for entities to move through certain areas.
  - Types:
    - Direct Movement: A generic nav edge for all entities.
    - Pedestrian: Preferred by pedestrian entities over generic paths.
    - Crawl: Causes human entities with crawl animations to crawl along the route.
  - Creation:
    - Select a nav edge in the Create Object Palette.
    - Draw the nav edge like a linear tactical graphic.

- **Bullseyes:**
  - Used for measuring bearing and range between bullseye and simulation objects or cursor.
  - Creation:
    - Open the Create Object Palette.
    - Select Bullseye.
    - Place the bullseye on the terrain.
  - Measurement:
    - To object: Select the bullseye, then select the simulation object. Bearing and range display in the Last Selected Object panel.
    - To cursor (Plan View only): Select the bullseye, choose Observer > Mouse Bullseye Position. Bearing and range update as the cursor moves over the terrain.

- **Cursor Bearing & Range Display:**
  - Activate: Choose "Observer" > "Map Cursor Position From Bullseye On Cursor"
  - Behavior: Bearing and range from the bullseye update based on cursor location.
  - Customize: Edit "DefaultMapMouseCursorFromBullseyeOnMouseOverlay" model definition.

- **Spider Web on Bullseye:**
  - Attach: Select bullseye, choose "Set", then desired spider web size (70 NM, 100 NM, or 200 NM).
  - Remove: Select bullseye, choose "Set" > "Clear Range Rings".

- **Attach Tactical Graphics to Simulation Objects:**
  - Manual Attachment:
    - Create graphic, select it, choose "Objects" > "Attach Object To", select object, click OK.
  - Automatic Attachment (3D observer modes only):
    - Select 3D observer mode, move observer, select graphic on palette, place first vertex on 3D model, continue creating graphic.

- **Delete & Edit Tactical Graphics:**
  - Delete: Select graphic, choose "Objects" > "Delete", or press "Delete".
  - Edit: Select graphic, edit its properties.

- **Editable Properties:**
  - Add, delete, and edit vertices.
  - Change name, altitude reference, direction of line.
  - Modify linear/areal styles:
    - Pen style and width.
    - Line style.
    - Arrows (add or remove).
    - Fill for areas.
  - Change color.
  - Resize boxes and text objects.
  - Rotate ellipses.
  - Move to different location or overlay.

- **Editing Vertices:**
  - **Dynamic Editing:**
    - Right-click on vertex, choose 'Add Point After' or 'Before'.
    - New point added midway between selected vertex and next/previous one.
    - Optionally edit new point.
  - **Edit Object Dialog Box:**
    - Select graphic, click 'Objects > Edit'.
    - Add vertex after selected one, midway to the next vertex.

- **Editing a Vertex:**
  - **Dynamic Editing:**
    - Double-click on vertex.
    - Move mouse for location change.
    - Use Alt+mouse wheel or Alt+left mouse button+drag for altitude change.
    - Click to place the vertex.
  - **Edit Object Dialog Box:**
    - Select graphic, click 'Objects > Edit'.
    - Edit waypoint's location/coordinates/altitude.

- **Editing Phase Lines, Routes, or Areas:**
  - Double-click a coordinate value to edit it.
  - Enter a new value, then press Enter or click outside the field to confirm.
  - Click on the map to change selected vertex coordinates.
  - Set altitude manually by editing the value.
  - Click 'Update' to apply changes.

- **Deleting a Vertex:**
  - Directly: Right-click > Delete Point (no confirmation prompt).
  - In Edit Object dialog box: Select vertex > Remove Point button > Update.

- **Resizing Boxes and Text Objects:**
  - Double-click a vertex, then drag it to resize the object.

- **Rotating an Ellipse:**
  - Select ellipse > Objects > Edit.
  - Check 'Free Rotate' > OK.
  - Double-click a point on the ellipse, then drag it in a circular direction.

- **Changing Line Direction:**
  - Select line > Objects > Edit.
  - Click 'Reverse Direction' > OK.

- **Changing Tactical Graphic Color:**
  - Select graphic > Objects > Edit.
  - Click 'Color' button, choose new color from the color picker > OK (in both dialog boxes).

- **Changing Linear and Areal Style Properties:**
  - Select object > Objects > Edit Style.
  - Change properties such as line width or pen style.

- **Fill Style (Areal Objects):**
  - Applies to areal objects; excludes lines with textures like Line of Contact.
  - Options include solid fill and various line/grid fills.

- **Line Style:**
  - Special lines can have different types, such as Main Axis or Arrows.
  - Arrows can be added at the end, beginning, or each segment of a line.

- **Editing Styles:**
  - Change style properties by selecting an object > Edit > Edit Style.

- **Active/Inactive Tactical Graphics:**
  - Can be activated (displayed) or deactivated (hidden).
  - State can be set during creation/edit or using a set data request.
  - Inactive graphics are hidden unless 'Show Only Active' is selected in Display Settings.
  - Deactivation is usually a GUI effect, but indirect fire events wait for activation if specified.

- **Setting Activation State:**
  - Change state (Active/Inactive/Use Activation Times) by selecting an object > Edit > Set Activation.
  - If using times, specify 'Activate At' for simulation time or time of day.

- **Tactical Graphic Visibility Control:**
  - Use the 'Activation' set data request to:
    - Make tactical graphics visible (Active) or invisible (Inactive).
    - In some cases, deactivating graphics affects their functionality, such as preventing indirect fire events and entity spawning.
  - For time-specific visibility, use the 'Use Activation Times' option:
    - Choose between simulation time, time of day, or date and time of day.
    - Specify start ('Activate At') and end ('Deactivate At') times.
    - Optionally, ignore the year for annual activations.

- **Additional Functionality:**
  - Set data requests allow changes to tactical graphics from plans, scripted tasks, or sets without opening Edit dialog boxes.

- **Crosswalk Control:**
  - Human characters plan paths that include crosswalks.
  - They cross if allowed, otherwise stop and wait at the crosswalk.
  - To set a crosswalk's status (enabled/disabled):
    - Select the crosswalk graphic.
    - Choose "Set > Allow Crossing".
    - Toggle the "Allow Crossing" checkbox to enable or disable crossing.
    - Click OK.

- **Appearance Settings for Tactical Graphics:**
  - **Arrowhead Style:** Set arrow type, location, and width for linear graphics.
  - **Color:** Change color of linear/areal tactical graphics.
  - **Fill Style:** Specify fill pattern (horizontal, vertical, diagonal lines, opacity) for areal tactical graphics.
  - **Line Width:** Set width of linear/areal tactical graphics.
  - **Pen Style:** Choose line type (solid, dashes/dots combinations) for linear/areal tactical graphics.

- **Remote Graphics:**
  - Remote graphics are drawn onto the scene by remote programs using VR-Vantage Remote Draw API.
  - This chapter explains how to display them in VR-Forces.

VR-Forces can display graphics sent from other applications using the VR-Vantage Remote Draw API, with settings managed in Display Settings or Remote Graphics menu.

- **Remote Graphics Display:**
  - Enable/Disable: Check 'Show Remote Graphics' box.
  - View List:
    - Choose 'Settings > Display', then select 'Tactical Graphics Display Settings'.
    - Or choose 'View > Remote Graphics Panel'.
  - Organization: By sets, with attributes grouped by type using templates.
  - Visibility Control: Check/uncheck boxes in the Remote Graphics Sets list.

- **Visual Effects (3D Only):**
  - Trailing and Decal Effects:
    - Specify models for these effects.
    - Display persistent tracks.
  - Track Histories:
    - Configure segments, timeout, HAT lines, coloring, and terrain profile.
  - Fire and Detonation Effects/Lines:
    - View fire and detonation effects.
    - View fire and detonation lines.
  - Unit Combat Graphics and Task Visualizations:
    - Display task visualizations for entities.
    - Pin task visualizations for entities.
  - Sensor Contact Lines:
    - Enable display, specify objects, and configure line settings.

- **Aggregate-level Scenarios:** Do not support certain effects like trailing effects, smoke clouds, fire, and detonation effects by default.

- **Range Rings Display:**
  - Enable/Disable: Through user settings.
  - Pinning: For specific simulation objects.
  - Configuration:
    - Customizable display of range rings.
    - Weapon system ranges configurable.

- **Additional Tactical Information Displays:**
  - Laser Designators, Supply Lines, Tactical Smoke, Electromagnetic Emissions, Radio Communication Lines.
  - Configurable aspects for Radio Communication Lines:
    - Lifetime.
    - Display mode.
    - Color.

- **Trailing and Decal Effects (3D Only):**
  - Supported effects: Contrails, dust clouds, tire tracks, footprints, wakes.
  - Enabling/Disabling: Per-observer basis via Display Settings dialog box or Observer menu.
  - Configuration:
    - Through model definitions using a decal schema.

- **Persistent Tracks:**
  - Default behavior: Fade after ~20 seconds.
  - Persistence configuration:
    - Create persistent tracks area by placing vehicles or drawing tracks within the area.

- **Creating Persistent Tracks:**
  - Draw a route on the terrain where you want the tracks to appear.
  - Select the type of tracks:
    - Inline Wheeled: Vehicles with one wheel behind the other (motorcycles, bicycles).
    - Wheeled: Vehicles with two wheels per axle.
    - Dual Wheeled: Vehicles with four wheels on one or more axles.
    - Tracked: Vehicles that move using continuous track, caterpillar track, or treads (tanks).
  - Choose the depth of tracks:
    - Light: Less visible.
    - Medium: Moderately visible.
    - Heavy: Most visible.
  - Confirm settings by clicking 'OK'.

- **Displaying Track Histories:**
  - Enables tracking paths of simulation objects and munitions during an exercise.
  - Ribbons' color is based on the object's force.
  - Has significant performance and memory cost; disable for large simulations to improve performance and memory usage.
  - May appear broken over uneven terrain if not edited (allowocclusion set to false).
  - Enable/disable per observer:
    - Through Settings > Display > Observer Settings > Track Histories check box.
    - Or using the Observer > Track Histories menu or Track Histories button on the Observer Settings Toolbar.

- **Configuring Track History Segments and Timeout:**
  - Adjust segment length for a balance between accuracy (shorter segments) and performance (longer segments).
  - Increase maximum number of segments for longer history, but may clutter screen or affect performance.
  - Set track histories to infinite length to never drop segments; they will continue to accumulate.

- **Track History Memory Management:**
  - Infinite length for track histories can consume all computer memory, causing a crash.
  - Configure track history settings via `Settings > Display > Track History Settings`.
  - Key configurable parameters:
    - Enable infinite track history length using the 'Infinite Track' checkbox.
    - Change the number of segments displayed using the 'Track Length' slider or box.
    - Adjust segment expiration time with the 'Segment Timeout' slider (default: 3600 seconds).
    - Specify each segment's duration in the 'Segment Length' box.

- **HAT Lines for Track Histories (3D Only):**
  - Enable/disable HAT lines via `Settings > Display > Track History Settings`.
  - Configure HAT line appearance by editing the entity's element definition and specifying values for:
    - `enableheightlines` to enable or disable HAT lines.
    - `heightlinescolor` to set the color of HAT lines.
    - `heightlinesspacing` to determine the interval between HAT lines.

- **Entity Track History Color:**
  - Change an entity's track history color via right-click menu (`Color Track History`).
  - Set custom colors using basic swatches, HTML codes, or screen color picking.
  - Revert to default color by selecting 'Clear Override' in the right-click menu.

- **Terrain Profile for Track History:**
  - Display a terrain profile for a track history via `Objects > Terrain Profile > Track History Profile`.
  - The terrain profile is independent of the drawn track history and starts when the profile window opens.

VR-Forces offers several graphic effects to enhance munition firings and detonations visualization:

1. **Fire and Detonation Effects:**
   - Flaming effects
   - Smoke plumes
   - Detonations (colored based on impact type: white for entity, gray for ground, black for airburst)
   - Muzzle flashes
   - Tracers (displayed only if munition is a tracer and mapped to a tracer model, not supported in 2D modes)

   **Enabling/Disabling:**
   - Display Settings > Observer Settings page
   - Or using Observer > effect command

2. **Fire and Detonation Lines:**
   - Line between shooter entity and detonation location, colored by shooter's force
   - Enabled/disabled via Settings > Fire/Detonate Lines or toolbar button

3. **Unit Combat Graphics:**
   - Attack indicators (triangular areas showing attack direction, colored by attacker's force)
   - Attack animations (footprint sector blinks from green to white where attacked)
   - Enabled/disabled via Display Settings > Unit Display Settings page

4. **Task Visualization:**
   - Lines and estimated time of arrival displayed for entities executing certain tasks
   - Not available for all tasks, supported only for individual entities

- **Task Visualization Limits:**
  - Maximum of 10 simultaneous task visualizations for different simulation objects.
  - Maximum of 80 segments per task visualization line; excessive points are sampled, reducing precision but maintaining general path intent.
  - VR-Forces generates verbose messages if limits are exceeded.

- **Task Visualization Control:**
  - Global or per-simulation object enablement/disablement.
  - Per-object settings saved with the scenario.
  - Default: enabled for selected entity; can be disabled or pinned to entities.

- **Pinning Task Visualizations:**
  - Allows multiple entities to visualize tasks simultaneously.
  - Possible even when 'Show Task Visualizations for Selected Entity' is cleared.

- **Display Sensor Contact Lines:**
  - Enable in observer mode to visualize connections between a simulation object and detected objects.
  - Control which objects display these lines: specific, selected, or all.
  - Settings are scenario-specific.

- **Enable Display of Sensor Contact Lines:**
  - Access via Settings > Display > Observer Settings > Sensor Contact Lines.
  - Alternatively, use Observer menu or toolbar button.

- **Specify Which Objects Show Sensor Contact Lines:**
  - Pin sensor contacts for specific objects: Objects > Decorations > Pin Sensor Contacts.
  - Enable for selected objects: Display Settings > Sensor Contact Line Settings > Show For Selected.

- **Remove Sensor Contact Line Pins:**
  - Deselect Pin Sensor Contacts for an object or use Remove All to clear all pins.

- **Configure Sensor Contact Lines:**
  - Customize color, line width, and arrow size via Display Settings > Sensor Contact Settings page.

- **Display Threat and Sensor Range Rings:**
  - Show threat range (armament effective area) as circles with heading lines.
  - Display separate rings for each weapon system or sensor of an entity.

- **Range Rings:**
  - Display combat effectiveness and unit footprint in scenarios.
  - Have sector breaks for front, rear, left flank, and right flank.
  - May extend beyond terrain display limits.

- **Display Options:**
  - Enabled globally but displayed per entity basis.
  - Customizable: color, transparency, labels (entity name, weapon type, range).
  - Optional 3D view: display range sphere.

- **Enabling/Disabling & Pinning Range Rings:**
  - Enable/disable via Display Settings > Observer Settings or toolbar button.
  - Pin to a simulation object for persistent display (Objects > Decorations > Pin Range Rings).

- **Configuration Options:**
  - Color and transparency customizable by weapon/sensor type.
  - Labels: entity name, weapon type, range value.
  - Optional 3D sphere display with opacity modifier.
  - Automatic display on object creation/discovery (Display Range Rings by Default).

- **Range Rings:**
  - Displayed for objects created/discovered post-enabling.
  - Enable/Disable:
    - Individual object: "Display Range Rings for Selected"
    - Always show footprint: "Always Display Footprint"
  - Customize:
    - Color change: Select "User-Defined Color", use color picker
    - Opacity change: Modify value in the Opacity column

- **Weapon System Ranges:**
  - Range rings displayable and publishable as enumerations.
  - New weapon systems require list addition.
  - Data stored in `./appData/settings/enumerations/VRF-enums.xml`.

- **Laser Designators:**
  - Displayed if available (green circle with laser code).
  - Enable: "Settings" > "Laser Designators"
  - Configure appearance using visual definition attributes.

- **Supply Lines:**
  - Display resupply lines between simulation objects.
  - Enable/Disable: "Settings" > "Display" > "Unit Display Settings" > "Show Supply Lines"

- **Tactical Smoke:**
  - Displays smoke munitions affecting line-of-sight.
  - Enable/Disable: "Settings" > "Display" > "Observer Settings" > "Tactical Smoke"
  - Does not affect performance simulation.

- **Electromagnetic Emissions (Emitter Volumes):**
  - Displayed for entities with emitter systems.
  - Colors represent frequencies, size is configurable.
  - Enable/Disable: Settings > Display > Entity Display Settings > Show Emitter Volumes.

- **Radio Communication Lines:**
  - Displayed when a simulation object sends a radio message.
  - Can be line-of-sight or follow earth's curvature.
  - Configurable color and lifetime.
  - Enable/Disable:
    - Global: Settings > Display > Radio Communications Settings > Show Radio Communications.
    - Individual (Communication Lines & Squawk Indicators): Same path as above.

- **Configuration:**
  - Lifetime (in seconds) for communication lines and squawk indicators can be set in the Display Settings dialog box.
  - Display mode (line-of-sight or earth's curvature) can also be configured there.

- **Earth Curvature:**
  - Enable: Select 'Curvature of the Earth'.
  - Exaggeration: Adjust 'Curved Earth Exaggeration' slider.

- **Radio Communication Lines Color Configuration:**
  - Default color: Green.
  - Options:
    - Force coloring: Settings > Display > Radio Communications Settings.
    - Frequency-based coloring: Add ranges, set start/end frequencies and colors. Specify outside range color.

- **Vehicle Wheel Rotation:**
  - Enable/disable: Settings > Display > Entity Display Settings.
  - Rotation rate: Depends on wheel size, vehicle speed, and turning.

- **2D & 3D Visualization:**
  - **2D Icons:** MIL-STD 2525B icons with color/shape codes for friendliness. Size changeable in Plan View observer mode.
  - **3D Entity Models:** Scale exaggeration possible. Can be hidden.
  - **DI-Guys in Vehicles:** Display option available.

- **Manually Changing Icon Scale:**
  - Reduce icon size for better visibility when many objects are close together.
  - Change size using Display Settings > Entity Display Settings:
    - Enable 'Enable Fixed Scaling of 2D Icons'
    - Adjust 'Entity 2D Icon Scale' slider

- **Scaling 2D Icons by Altitude:**
  - Icons appear smaller from greater heights, display at full size on hover or selection.
  - Enable/disable altitude-based resizing via:
    - Display Settings > Entity Display Settings (clear 'Enable Fixed Scaling of 2D icons')
    - Display Settings Toolbar ('Dynamically Scale Icons' button)

- **Rotating 2D Icons to Simulation Object Heading:**
  - By default, icons don't rotate with object heading. Enable rotation for specific entities via:
    - Display Settings > Entity Display Settings (check 'Rotate Entity Military Standard Symbols to Heading')
    - Display Settings Toolbar ('Rotate 2D MIL STD Symbols' button)

- **Exaggerating the Scale of 3D Entity Models (for distant viewing):**
  - MAK Technologies supports:
    - XR scaling: Gives all entities equal visibility, doesn't preserve size relationships
    - Linear scaling: Preserves size relationships between entities

- **Model Scaling:**
  - *Linear Scaling*: Uniformly scales all entities by a constant factor, regardless of observer distance.
    - A factor of 10 results in entities being 10 times their normal size (Figure 404).
  - *XR Mode*: Enhances entity visibility using colorized 3D models when switched to XR observer mode (Figure 405).

- **Scaling Entity Models:**
  - Access Observer Settings > Model Scaling.
  - Select scaling type: XR or Linear.
  - Adjust the Scale Factor slider for desired scaling.

- **Hiding 3D Models:**
  - Deselect 'Main Model' checkbox in Observer Settings to hide 3D models.

- **Displaying DI-Guys in Vehicles:**
  - Global setting to enable/disable display of DI-Guy characters inside vehicles (for display purposes only).
  - Show/hide occupants per entity using the 'Hide Occupants' set data request.

- **Lighting Effects:**
  - VR-Forces supports various lighting effects, including dynamic lighting, ocean reflections, lens flare, sun rays, and shadows.
  - Adjust scene and material lighting in Display Settings > Advanced Lighting Settings.

- **Accessing Lighting Render Settings:** Open 'Display Settings' and select the 'Lighting Render Settings' page.

- **Ambient & Diffuse Lighting:**
  - *Scene Lighting:*
    - Adjust independent scale factors for ambient (indirect light) and diffuse (reflected light).
      - Lower values make objects darker; higher values make them lighter.
  - *Material Values:*
    - Choose between using object-specific or globally specified ambient and diffuse material values.
    - Adjust global scale factors independently.

- **Advanced Lighting Settings:**
  - *Emissive Lighting:*
    - Change the emissive texture brightness scale value.
      - Higher values increase brightness; lower values decrease it.

1. **Emission Scale Adjustment:**
   - Change emission scale using the Emission Scale slider or by entering a value in the box.

2. **Dynamic Lighting Display:**
   - VR-Forces displays light cast by sources such as headlights, street lamps, and spotlights.
   - Dynamic lights can be part of the terrain or an entity model, controlled by appearance bit or Appearance set data request.
   - Lights can automatically turn on at dusk and off at dawn with daylight control.
   - Emissive lights are always on, regardless of day or night.
   - Enable/disable dynamic lighting: Settings > Display > Observer Settings > Dynamic Lights.

3. **Ocean Planar Reflections:**
   - VR-Forces shows reflections of terrain and objects on water surfaces.
   - Requires dynamic ocean to be enabled for planar reflections to appear.
   - Performance impact can be reduced by configuring LOD Distance Scale or specific LOD scale for ocean planar reflections.
   - Enable/disable planar reflections: Settings > Display > Ocean Settings > Enable Ocean Planar Reflections.

- **Ocean Planar Reflections:**
  - Adjust LOD Distance Scale: Observer Control Panel (page 1155).
  - Texture Resolution: Affects reflection texture quality; higher resolution decreases performance.
  - SpeedTrees in Reflections: Enable/Disable via Display Settings > Ocean Settings page.

- **Lens Flare:**
  - Simulates light source visual artifact (e.g., sun through camera lens).
  - Requires high dynamic range lighting enabled.
  - Enable/Disable via Display Settings > High Dynamic Range Settings page.

- **Crepuscular (Sun) Rays:**
  - Simulates sunbeams through clouds.
  - Enable/Disable via Display Settings > Render Settings page.

- **Skybox Cube Map:**
  - Configures reflection and sky effects.
  - Adjust regeneration threshold for performance-visual quality balance.
  - Optionally omit clouds to improve performance.

- **Flashlight Mode:**
  - Lights circular area like a flashlight.
  - Turn on/off with 'F' key, move beam with Alt + right mouse button.

- **Flashlight Beam Size Adjustment:**
  - Change flashlight beam size by holding down `Alt` and using the mouse scroll wheel.

- **High Dynamic Range (HDR) Lighting:**
  - Enabled by default for enhanced scene realism on HDR monitors.
  - Configure via:
    - Settings > Display
    - High Dynamic Range Settings page
    - Enable/Disable with 'Enable High Dynamic Range' checkbox
    - Adjust other settings like Auto Exposure, Bloom, Lens Flare, Streaks, and advanced parameters.

- **HDR Settings:**
  - Control individual effects (Auto Exposure, Bloom, Lens Flare, Streaks) and adjust their parameters.
  - Advanced settings scale intensity of dynamic lights, emissive textures, light points, shininess, specular components, and manage auto-exposure adjustments.

- **Auto Exposure Controls:**
  - Prevent auto exposure from going too low/high compared to global lighting using *Min/Max Difference*.
  - Scale final image intensity and affect global lighting when auto exposure is off with *Post Scale* (increase for less intense images).
  - Set minimum and maximum values for final intensity scaling before tone mapping with *Final Clamp (Min/Max)*.

- **Bloom, Lens Flare, and Streak Effects:**
  - Increase the intensity of bloom effect on high-intensity objects with *Bloom Scale*.
  - Increase the intensity of lens flare effect with *Lens Flare Scale*.
  - Increase the intensity and length of streak effect on high-intensity objects with *Streak Intensity/Length Scale*.
  - Set the maximum number of streaks (up to 8) with *Number of Streaks*.
  - Rotate the direction of streaks with *Streak Rotation/Offset*.

- **HDR Settings:**
  - Apply final color correction based on display characteristics with *Gamma*.

- **Lighting and Clouds Disabling (XR Observer Mode):**
  - Quickly disable lighting effects and clouds to improve simulation object visibility when using XR observer mode.

- **Shadow Display (3D Only):**
  - Enable/disable shadows globally or for specific objects via *Display Settings > Shadow Settings* page.
  - Enable/disable shadows on SpeedTree trees via *Settings > Display*.

- **Accessing Shadow Settings:**
  - Open 'Display Settings' dialog box.
  - Select the 'Shadow Settings' page.

- **Key Shadow Settings:**
  - **Use Front Face Culling:** Balances between more shadow acne (z-fighting) and less light bleeding artifacts.
  - **Shadow Map Resolution:** Higher resolution provides more detailed shadows, but increases performance demand and memory usage.
  - **Number of Cascades:** More cascades render higher detail, but increase memory usage and reduce performance.
  - **Use Maximum View Distance:** Limits shadow display distance for faster rendering and higher quality near the viewer.
  - **Cache Far Cascade:** Improves performance by updating the farthest cascade less frequently.
  - **Adjust Near Distances and Shadow Casters Based On HAT:** Optimizes shadow rendering based on observer's height above terrain.
  - **Shadow Ambient Factor:** Fades out shadows, determining how much light passes through them.
  - **Apply Shadow to Ambient Lighting:** Applies shadows to ambient lighting, making them appear darker.

- **Additional Settings:**
  - **Split Scheme:** Adjusts cascade distribution between logarithmic and linear approaches.
  - **Shadow Stabilization Scheme:** Reduces shimmer common in shadow maps.
  - **Split Selection Scheme:** Determines which cascade a piece of geometry is in.
  - **Pre-Filtering Scheme:** Smoothes shadows using different shadow casing techniques.
  - **Filtering Scheme:** Affects how blurred the shadow map appears.
  - **Configure Per-Cascade Settings:** Allows polygon offset configuration for individual cascades.
  - **Merge Rendering of Near Cascades:** Improves performance by drawing near cascades together on supported video cards.

- **Note:**
  - Shadows are rendered using a shadow map, with scenes divided into sections (cascades) for varying resolution shadows.
  - For detailed information on 3D shadow rendering, refer to online resources.

- **Water Droplets and Splash Effects:**
  - Simulates raindrops, waves, and water splashes on the observer's camera lens.
  - Sea spray visible in high seas; rotor wash for hovering helicopters at two quality levels.
  - Enable/disable splash effects: Settings > Display > Observer Settings (Ocean Spray, Rain Splash, Wave Splash).
  - Enable sea spray: Settings > Display > Ocean Settings > Enable Sea Spray Particle Effects.
  - Adjust water droplet size: Settings > Display > Render Settings > Droplets Scale slider.

- **Rotor Wash:**
  - Displays over water and land for rotary-wing entities.
  - Enable/disable globally: Settings > Display > Entity Display Settings (Enable Rotor Wash).
  - High-quality rotor wash enabled/disabled in Ocean Settings page.

- **Buoyancy for Surface Entities:**
  - Enables buoyancy effects when dynamic ocean is active.

- **High Quality Rotor Wash:**
  - Enable/Disable via checkbox in an unspecified dialog.
  - Affects performance; disable if needed.

- **Wakes and Spray Effects (Dynamic Ocean):**
  - Displayed on surface entities, impact performance.
  - Edit attributes like length, offset, fade time, LOD distance in Visual Model Editors dialog box.
  - Enable/Disable:
    - Settings > Display > Entity Display Settings page.
    - Checkbox: 'Enable Wakes on Dynamic Oceans'.
    - Spray effects enabled/disabled with checkbox: 'Enable Spray Effects on Surface Vehicles'. Disabling wakes also disables spray effects.

- **Buoyancy for Surface Entities (Dynamic Ocean):**
  - Causes entities to bob up and down, affects performance.
  - Buoyancy calculation range:
    - Always calculated within minimum cull distance.
    - Not calculated beyond maximum buoyancy LOD range or far clipping plane/near clipping plane. The nearer of these two distances determines the stop point for buoyancy calculations.
  - Face front culling can be enabled to calculate buoyancy models for all entities within the minimum range and between the near clipping plane and the closest of either the far clipping plane or maximum buoyancy LOD range.
  - Enable/Disable:
    - Settings > Display > Entity Display Settings page.
    - Checkbox: 'Enable Buoyancy Models for Surface Vehicles'.
  - Adjust default LOD Distance slider or box to set calculation range.

- **Buoyancy Settings:**
  - Default distance set to 0: Infinite buoyancy range for entities without LOD range.
  - Buoyancy calculation limit: Far clipping plane.
  - Calculation radius adjustment: 'Minimum Cull Distance' slider or box value.
  - Optional feature: Face front culling.

- **Sensors (CameraFX) in VR-Forces:**
  - Simulated views: Night vision goggles (NVG), infrared with adjustable contrast, blur, and noise.
  - Sensor module: CameraFX using SenSim libraries from JRM Technologies.
  - Entity support: One "ActiveRegion" per entity based on power plant status.
  - Visual effects only: No relation to simulation object sensors.
  - Enabling methods:
    - Select pre-configured observer mode.
    - Edit or create observer mode with sensor.
    - Change Sensor attribute for channel.
  - Configurable aspects:
    - Blur, noise, gain (IR only).
    - Lighting overrides: Ambient, diffuse light, and entity emitted light intensity.
    - Sensor texture map: Shader-based effects for NVG and IR modes.

- **Texture Control:**
  - Enable/disable textures; adjust intensity.
  - Shader-based effects maps explained in the reference manual.

- **Sensor Configuration:**
  - Configure settings for each sensor type (Monochrome, NVG, Infrared, Full Color).
  - Changes affect display only when that sensor is active.
  - To configure:
    - Open Display Settings > Sensor Settings page.
    - Select sensor mode and module.
    - Adjust sliders for desired settings.

- **Adding/Managing Sensors:**
  - Add, rename, or delete sensors via Display Settings > Sensor Settings page.
  - Configure new sensors with CameraFX module; set Blur, Noise, Gain levels.

- **Intervisibility & Range Line Features (Chapter 51):**
  - Understand intervisibility types: Point-to-Point, Intervisibility Fan, Simulation Object Intervisibility.
  - Create transient or permanent intervisibility objects.
  - Edit, configure, pin, show/hide, and display terrain profiles of intervisibility lines.

- **Intervisibility (Line-of-Sight) in VR Forces:**
  - Displays line-of-sight between points, within areas, and between objects.
  - Transient displays disappear after a set time; permanent ones remain and are resizable/movable.
  - Calculated from the center of object bounding volumes by default. This may differ from simulation app calculations, leading to potential discrepancies in target detection.
  - Only point features block line-of-sight (LOS); linear and areal features do not.

- **Types of Intervisibility:**
  - Point-to-point:
    - Line-of-sight between two points.
    - Visible portion is green; non-visible is red. Colors can be changed.
  - Intervisibility fan:
    - Rays radiating from a center, showing intervisibility along their paths.
    - Distance between rays can be configured.
  - Entity intervisibility:
    - Circular area showing which objects can see each other and vice versa.
    - Calculations are made within a cylindrical area extending above and below the terrain.

- **Intervisibility Objects Configuration:**
  - Can be set as transient or permanent.
  - Parameters include height above terrain for intervisibility calculation, display colors, and origin LOS elevation.

- **Intervisibility Modes:**
  - *Transient:*
    - Temporarily displays intervisibility from a mouse-clicked origin.
    - Resets with another click.
    - Exits on right-click.
    - Creation:
      - Clear 'Left Click Makes Objects Permanent'.
      - Choose intervisibility type.
      - Place origin by clicking on the terrain.
      - Adjust size/direction by moving the cursor.
      - Right-click to exit intervisibility mode.

  - *Permanent:*
    - Stays in display after creation.
    - Can be resized, moved, and edited but not saved as part of the scenario.
    - Creation:
      - Enable Intervisibility Objects.
      - Select 'Left Click Makes Objects Permanent'.
      - Choose intervisibility type.
      - Place origin by clicking on a simulation object or terrain location.

- **Editing Intervisibility Object:**
  - Change line length/direction, fan origin, or diameter by double-clicking and dragging the respective point/circle.
  - Anchored objects cannot change their origin.

- **Exiting Edit Mode:** Click to exit edit mode.
- **Resetting Object Size:** Right-click while in edit mode to revert an intervisibility object to its original size.
- **Moving Intervisibility Objects:**
  - Double-click the center point of a fan or any point on a line to select it (cursor changes).
  - Drag the object to a new location and click to set the new position.
  - Right-click while in edit mode to revert an intervisibility object to its original location.
- **Configuring Intervisibility Objects:**
  - Access Display Settings > Intervisibility Settings page.
  - Select an intervisibility object from the list to configure settings:
    - Elevation of origin and end point.
    - Sampling rate for intervisibility fans.
    - Update rate for entity intervisibility fans.
    - Display of height above terrain lines (3D) and height labels (3D and 2D).
    - Colors used to display intervisibility objects.
  - Changes in colors or sampling rate affect all existing objects; changes in origin/end point elevation only affect new objects.
- **Intersection Configuration:**
  - Choose between front-end and back-end calculations for intersections.
  - Include simulation objects in back-end calculations if desired.
  - Set wait color, wait time, and fan line sample interval as needed.

- **Pinning Intervisibility Object to Simulation Object:**
  - Moves with the simulation object.
  - Origin is centered on the simulation object.
  - Steps:
    - Select the simulation object.
    - Choose "Intervisibility > Create intervisibility_type" (where intervisibility_type is a type of intervisibility object) or click an Intervisibility Toolbar button.
    - Specify the end point for the intervisibility object.

- **Showing/Hiding Intervisibility Lines:**
  - Toggle display using:
    - Settings menu: "Settings > Display", then select "Intervisibility Settings" page.
    - Intervisibility menu/toolbar button: "Intervisibility > Enable/Disable Intervisibility".

- **Displaying Terrain Profile for Intervisibility Line:**
  - Automatically displayed when creating an intervisibility line.
  - Shows how terrain changes affect intervisibility.
  - Can be disabled in Display Settings under "Terrain Profile Settings" page.

- **Deleting Intervisibility Objects:**
  - Deleting a pinned simulation object also deletes the intervisibility object.
  - To delete an individual intervisibility object without affecting the simulation object:
    - Select the outer circle or end point of the intervisibility object.
    - Choose "Intervisibility > Delete" (or press Delete).

- **Range Lines:**
  - Show great circle distance and bearing between two points during a session.
  - Distance and bearing update if end points (simulation objects) move.
  - Creation:
    - Place line ends on terrain points or attach to simulation objects.

- **Quick Range Line Drawing:**
  - Middle mouse button: Draw a range line between two points to measure distance and bearing quickly.
    - Steps:
      - Press and hold the middle mouse button at the start point.
      - Move the cursor to the end point, observing displayed information beside the line.
      - Release the middle mouse button when done; the line disappears.

- **Range Line Creation:**
  - Context Menu: Right-click on terrain or object, select 'Create > Create Range Line', place start/end points.
  - Create Menu:
    - Choose 'Create > Create Range Line'.
    - Position cursor for start point (attach to objects if needed).
    - Position cursor for end point (attach to objects or terrain).

- **Range Line Persistence:** Lines persist until deleted or scenario is rewound.

- **Deleting a Range Line:**
  - Select the line and choose 'Intervisibility > Delete' from menu or context menu.

- **Configuring Range Lines:**
  - Use Model Definition Editor (accessed via 'Settings > Visual Model Editors') to change attributes:
    - Font, offset, colors for measurement text.
    - Thickness, style of range lines.
    - Font size of distance and bearing data.
    - Rounding up measurements to higher units (e.g., meters to kilometers).
  - Distance and bearing use application's specified distance measurement unit.

- **Range Lines:**
  - Display unit changes from meters to kilometers when the line length exceeds 1 kilometer.

- **Emitter Volumes Configuration (Chapters 52 & 52.1):**
  - Customize emitter volume appearance by editing the DefaultEllipsoidArc model definition or creating custom definitions.
  - Entities must have specific visualizers in their 2D/3D model sets to display volumes.

- **Emitter Volume Color Configuration (52.1.1):**
  - Default colors based on frequency (high/low).
  - Customize color based on emission frequency or pulse rate, using attributes like `colorByFrequency`, `low/highFrequency`, and `usePulseFrequency`.

- **Emitter Volume Radius Control (52.1.2):**
  - Radius determined by emitter power and elevation/azimuth sweep data.
  - Fine-tune beam radii using configurable exponent weight and scale factor to prevent overly wide or narrow emissions.

- **Radius Calculation:**
  - VR-Forces calculates emitter volume radius based on elevation and azimuth sweeps.
  - It applies linear (`linearScale`, default: 100) and exponential (`exponentialScale`, default: 0.1) scaling to the calculated radius.
  - Formula used: `scale = linearScale * pow(sqrt(power/tempVar), exponentialScale )` where `tempVar = 8*elevationSweep*sin(2*azimuthSweep)` and if `tempVar <= 0`, it's set to 1.

- **Radius Exponent Weight (a value between 0 and 1):**
  - Slows radius growth when power or area is greater than 1.
  - Increases radius growth when power or area is less than 0.

- **Emitter Volume Segments:**
  - VR-Forces displays emitter volumes as groups of spherical sections.
  - By default, it draws one segment for each 10 degrees in the field of view.
  - Segment angle can be customized between 10 to 45 degrees using the `angleSegmentMax` parameter in the EllipsoidArc model definition.

- **Configuring Emitter Volume Segments:**
  - Use the Model Definition Editor (Visual Model Editors dialog box) to edit or create ellipsoid arc model definitions.
  - To display or hide segment outlines, use the same process as configuring segments.

- **Visual Model Editors:**
  - Open Visual Model Editors dialog.
  - Select the Model Definition Editor page.
  - Load an existing file using "Load and Replace" if needed (details in reference manual).
  - Filter model definitions by clicking the Filter button and selecting EllipsoidArc.
  - Select DefaultEllipsoidArc from the listed ellipsoid arc model definitions.
  - Change the value of the showLines parameter for the selected model definition.
  - Export the updated setting to the loaded definition file or an individual file.

- **Adding Custom EllipsoidArc Model Definition:**
  - Decide whether to export the edited model definition to a new or existing file.
  - Open Visual Model Editors dialog and select the Model Definition Editor page.
  - Load an existing file using "Load and Replace" if needed (details in reference manual).
  - Filter model definitions by clicking the Filter button and selecting EllipsoidArc.
  - Select DefaultEllipsoidArc from the listed ellipsoid arc model definitions.
  - Duplicate the selected model definition using the Duplicate Model Definition button.
  - Rename the duplicated model definition if desired, then change its parameter values as needed.
  - In the Entity Definition Editor page, select the entity and its 3D Sensor Volume visualizer.
  - Assign the new custom ellipsoid arc model definition to the selected entity by clicking the Value column for the modeldefinition attribute and selecting the newly created model definition in the Choose Model Definition dialog box.
  - Export the updated setting to the loaded definition file or an individual definition file, then reconnect to enable the new model definition.

- **Sound Effects in VR-Forces:**
  - VR-Forces can associate sound effects with entities, fire events, and detonation events.
  - To enable sound effects:
    - Open the Audio Settings dialog box by choosing Settings > Audio Settings.
    - Select the "Enable Sound" checkbox to turn on sound effects.
    - Optionally, specify the playback device (speaker) and capture device (microphone).

- **Sound Effects Control:**
  - Enabled/Disabled via 'Audio' button on Display Settings toolbar.
  - Configured in 'Settings > Audio Settings'.

- **Configurable Sound Settings:**
  - **Playback Device:** Select speaker for audio output.
  - **Capture Device:** Select microphone (used with MAK Radio).
  - **Volume:** System volume level.
  - **Max Voices:** Simultaneous playing sounds (1 to 256), affecting performance with many audio sounds.
  - **Speaker Maximum Decibels:** Calibrates audio system for speakers, affects sound falloff at distance. Default is 80 db for headphones or desktop PC's speakers.
  - **Speed of Sound:** Atmospheric speed in meters/second (default: 343 m/s), affects delay in distant sound playback.
  - **Enable Environmental Processing:** Enables low pass filtering to replicate air absorption.

- **Sound Effects Enabling:**
  - Enabled/Disabled via 'Enable Sound Effects' option.

- **Decibel Configuration:**
  - VR-Forces uses a decibel scaling system for consistent audio experience across different systems (headphones, speakers, amplifiers).
  - Individual entity sounds can be configured to match real-world decibel levels near the sound source.

- **Sound Settings:**
  - Set desired maximum volume (dB) for automatic audio system calibration.
  - Sound's loudest point ('reference distance') and quietest point ('falloff distance') are calculated based on Speaker Maximum Decibels setting.

- **Sound File Association:**
  - VR-Forces provides generic entity and event sound files in `./SharedData/18/latest/Audio/Sounds`.
  - Use Visual Models Editor to map sound files to entities/events.
  - Model definitions specify associated sound files (e.g., 'heli_blades.wav' for 'heli_blades' model).

- **MAK Radio Features:**
  - Enables voice communication over radios and intercoms within the same exercise.
  - Two configurable radios with two channels each; communication requires matching frequencies not being jammed.
  - Intercom allows crew members of a single vehicle or all MAK Radio users ('ADMIN' option) to communicate.

- **Audio Communication in VR-Forces:**
  - Uses Intercom or VOX Radio for audio data transmission via signal interactions/PDUs on the simulation network.
  - Communications are perfect and unaffected by terrain, weather, distance, etc., but can be jammed using standalone radio app or VR-Forces' radio panel.

- **Audio Device Configuration:**
  - Uses audio devices configured in Audio Settings dialog box for capture and playback. (See "53.2.1 Configuring Sound Effects" on page 1113.)

- **Using Radio in VR-Forces:**
  - Each configured radio has a radio head displaying name, frequency, TX/RX audio levels.
  - Accessible via:
    - View > Radios (opens Radio Communications dialog box)
    - View > Toolbars > Radio Control Toolbar (displays toolbar)
  - Standalone MAK Radio app can be launched from:
    - Windows Start menu
    - Command line: `./bin64/vrfLauncher --makRadio`

- **Operating the Radio:**
  - Enable radio system, select entity to speak for.
  - Optionally adjust master volume and VOX threshold (for voice-activated transmission).
  - Use Push to Talk (default key 'T') or operate radio head with:
    - Power button
    - Channel selection
    - Microphone mute/unmute button
    - Speaker mute/unmute button

- **Volume Control:**
  - Adjust volume using slider.
  - Mute/enable speaker: ( ).

- **Radio Operations:**
  - Talk (non-Vox): Click PTT.
  - Mute/enable microphone: ( ).
  - Open Radio Communications dialog box: ( ).

- **Intercom/VOX Radio Usage:**
  - Select attached entity, enable power button: ( ).
  - Vox radios: Select channel.
  - Start talking after ensuring microphone is not muted.

- **MAK Radio Configuration:**
  - Configure radios via "Configure Radios" option.
  - Change settings for:
    - Number of radios/channels.
    - Frequencies.
    - Sample rate.
    - Format.
  - Match Transmission, Modulation, and Crypto settings between communicating radios.

- **Radio Format Change:**
  - Select format from list.

- **Adding/Editing Radios:**
  - Click 'Add Radio' (+) or 'Edit' (pencil) button.
  - Configure radio using 'Radio Configuration' dialog box (Figure 446).
    - Settings: Duplex, Audio Toggles, Transmission Toggles (radios only), Modulation, Crypto, Channels.
  - Click 'OK'.

- **Adding/Editing Intercoms:**
  - To add, click 'Add Intercom' (+). To edit, select row and click 'Edit' (pencil) button.
  - Configure intercom using 'Intercom Configuration' dialog box (Figure 447).
    - Edit name if desired. Settings: Duplex, Audio Toggles (Hear Self, Mic Muted, Speaker Muted).
  - Click 'OK'.

- **Finishing:**
  - Click 'OK' in 'Radio System Configuration' dialog box to return to 'Radio Communications' dialog box.
  - Lists update if radios or intercoms are added/removed.

- **Audio Settings:**
  - Access via 'Settings' > 'Audio Settings'.
  - Choose Playback Device (speaker) and Recording Device (microphone).
  - Set default push-to-talk key(s) by pressing desired keys in the Push To Talk Keys box.

1. **MAK Radio:**
   - **Audio Settings:** Accessed via Radio Communications dialog box or MAK Radio application.
     - Allows jamming of radio frequencies by clicking the 'Jam' button on a radio head.
     - Jamming makes communications inaudible and undetectable to users.

2. **Observer (Eyepoint) in VR-Forces:**
   - Location from which users observe the 3D/2D environment.
   - Movement: Manual or automatic when attached to simulation objects.
   - Control: Local or remote via view control messages.
   - Multiple observers per session, each associated with different windows.

3. **Observer and Viewing Scenarios:**
   - Chapter explaining observer creation, editing, and mode changes.
   - Topics include:
     - Switching between 2D/3D projections.
     - Managing observer modes (creation, deletion, editing, renaming).
     - Adding/removing observers.
     - XR mode introduction.
     - Model sets management.
     - Communicating information about the observer.

4. **Switching Between 2D and 3D Projections:**
   - VR-Forces supports both 2D and 3D projections.
   - Switch between them by changing the observer mode (Stealth/Out-the-Window to Plan View).
   - Transition maintains approximate height above terrain or altitude, keeping view changes minimal.

- **Observer Modes**: Customize VR-Forces settings for observer movement and visuals.

- **Components of an Observer Mode**:
  - Model Set: Choose from 3D models, 3D colorized models, or 2D icons.
  - Key Map: Assign keys to movement functions.
  - Projection: Select 2D or 3D view.
  - Graphics and Movement Settings: Configure simulation object visuals and observer movement.

- **Predefined Observer Modes**:
  - Stealth: 3D situational awareness projection.
  - Out-the-Window: Desktop image generator, hides visual effects.
  - Plan View: 2D "big picture" terrain view.
  - XR (Exaggerated Reality): 3D mode for distant entities, exaggerates size.
  - CameraFX views: IR BlackHot, IR, NVG, and Visual Camera.

- **Common Features**:
  - Editable modes; add new ones as needed.

- **Changing Observer Mode**:
  - Access Display Settings > Observer Settings page.
  - Select desired mode from the Observer Mode list or use shortcuts (Observer menu, toolbar).

- **Creating a New Observer Mode**:
  - Open Display Settings > Observer Settings page.
  - Click 'Add' to create new mode dialog.
  - Enter name, choose model set, projection, and key map.

- **Observer Modes (Create, Edit, Delete, Rename):**
  - Access: Settings > Display > Observer Settings page.
  - Create:
    - Click 'Add'.
    - Enter name in 'Create New Observer' dialog.
  - Edit:
    - Select mode.
    - Edit attributes.
  - Delete:
    - Select mode.
    - Click 'Delete'.
  - Rename:
    - Select mode.
    - Click 'Rename'.
    - Enter new name.

- **Observer (Add/Remove):**
  - Add:
    - Observer Settings page: Click 'Add' in Observer list, enter name in dialog.
    - Display Engine Configuration Editor Panel: In Channel Attributes list, select desired observer.
  - Multiple observers allow different views per channel/window.
  - Saved observers retain only their names; location info requires saving an observer view.

- **Observer Selection:**
  - Defaults to the observer assigned to the focused window.
  - Can be changed temporarily via Display Engine Configuration Editor Panel.

- **Adding an Observer:**
  - Select the desired channel.
  - Edit 'Observer Name' attribute and select 'New'.
  - Enter a name, click OK; new observer is selected on toolbar and listed in attributes.
  - Save display configuration to keep the observer.

- **Removing an Observer:**
  - Open Display Settings > Observer Settings page.
  - Select observer and click Delete.
  - Save updated display configuration if needed. Observers are removed at VR-Forces closure unless saved.

- **XR Mode (Extended Reality):**
  - Combines situational awareness of Stealth mode with Plan View's big picture.
  - Uses special 3D colorized model set visible at greater distances.
  - Models are exaggerated in size for better visibility.

- **Model Sets:**
  - VR-Forces offers three types:
    - Realistic, textured 3D models (3D Models).
    - Solid-colored caricatures with minimal articulation (3D Colorized Models).
    - MIL-STD 2525B icons (2D Icons).
  - Each observer mode specifies a model set.

- **Changing Model Sets:**
  - Edit an observer mode to change its associated model set.
  - Dynamically change the model set: `Observer > Set Model Set > model_set`.

- **Communicating Information About the Observer:**
  - VR-Forces shares state updates (position, orientation) and responds to view control messages.
  - Default: broadcasts info for synchronization/representation; enable/disable via `Settings > Publish Observers`/`Stop Publishing Observers`.
  - DIS: send info to specific computer using Simulation Connections Configuration dialog box.

- **Viewing and Attaching to Other Observers:**
  - Detects other applications sending state updates, lists in object hierarchy.
  - Attach local observer to remote observers like any other simulation object.
  - Observer icons visible in 2D view; map visual model for 3D view visibility.

- **Display Remote Observers' Models:**
  - `Settings > Display`, select Entity Display Settings page, check 'Show Other Stealths'.

- **Moving the Observer (Eyepoint):**
  - Use compass navigation, keyboard mappings, orbiting, and camera movement.
  - 3D/2D coordinate systems available for observer movement.

The VR Forces User Guide provides instructions on moving and manipulating the observer (camera) in both 3D and 2D views using keyboard and mouse inputs:

- **Moving the Observer:**
  - **Mouse in 3D View:** Drag terrain, change orientation, drag view, orbit terrain.
  - **Keyboard in 2D View:** Move observer horizontally.
  - **Mouse in 2D View:** Move observer horizontally and vertically.

- **Zooming the Observer:**
  - **3D Projection:** Zoom in/out using mouse wheel or keyboard shortcuts.
  - **2D Projection:** Zoom in/out using mouse wheel or keyboard shortcuts.
  - Set scale factor and magnification LOD angle for terrain zoom control.
  - Zoom to extents to fit the view to the entire terrain.

- **Centering the Observer:**
  - Center on a simulation object from Object Console Summary Panel or Information Panel.

- **Additional Features:**
  - Simulate camera jitter, force orientation north (true, magnetic, or grid), enable/disable view constraints.
  - Control navigation speed and enable/disable speed scaling.
  - Save, recall, delete views; load views automatically with terrain; specify startup view.
  - Use the 'Go To Location' panel for quick observer placement.

- **Observer Information:**
  - Observer Information Panel displays location (X, Y, Z) and orientation (yaw, pitch, roll).
  - Compass shows the observer's heading in 3D view.

- **Attach Modes:** Move the observer independently (absolute/free-fly mode) or attach it to a simulation object or prop.

- **2D Compass:**
  - Two needles: straight (indicates true north) and arrow (indicates magnetic north).
  - Needle alignment varies based on observer's location.
  - Illustrated in Figure 458.

- **3D Compass:**
  - Horizontal, showing direction of observer's view.
  - Uses true or magnetic north based on Display Units Settings.
  - Measurement units: degrees or NATO-MIL (specified in Display Unit Settings).
  - Default shows cardinal and intercardinal directions (N, NE, S, SW, etc.).
  - Can be edited to not show these indicators as current heading.
  - Illustrated in Figure 459.

- **Compass Control:**
  - Enable/disable: Display Settings > Observer Settings or Observer > Compass.
  - Measurement units: Display Unit Settings.
  - Customization:
    - Edit ChannelCompass schema and model definitions (smallCompass, largeCompass).
    - Change compass location (top, topRight, etc.).
    - Change compass color using OpenGL RGBA scheme.

- **Observer Movement:**
  - Uses specific functions like "Move Observer Forward".
  - Functions can be executed via keyboard mappings.

- **Observer Movement:**
  - Two primary functions move the observer forward, each using a different coordinate system.
  - Keyboard keys, mouse buttons, and wheel control these movements.
  - Default mappings behave as expected most of the time, but some movements vary based on view, coordinate system, or attach mode.

- **Customizable Key Mappings:**
  - VR-Forces allows changing default key mappings and creating new ones for different observer movement types (details in Chapter 82).

- **Observer Movement Variability:**
  - This section explains how observer movement varies based on the observer coordinate system and attach mode.

- **Observer Modes & Key Map Settings:**
  - Four modes: Stealth, CameraFX, XR, Plan View.
  - Support for 3D models, colorized models, and 2D icons (Table 45).

- **3D Observer Movement Coordinate Systems:**
  - Level Observer Coordinates:
    - Moves with respect to the terrain.
    - Follows earth's curvature in geocentric databases.
  - Observer Coordinates:
    - Moves based on the observer's body coordinate system.
  - Entity Level Body Frame & Entity Body Frame Coordinates:
    - Moves relative to an entity's body frame, considering or ignoring pitch and roll.

- **2D Observer Coordinate System:**
  - Restricted to two dimensions; no altitude, pitch, or roll changes.
  - Zooming adjusts field of view and resolution.

- **Attached Context & Observer Movement (3D Only):**
  - Key maps control navigation using specific coordinate systems (observer frame or level observer frame).

VR-Forces supports navigation in alternate coordinate systems based on the observer's attach mode:

1. **Movement Directions:** Forward, back, up, down, left, right.

2. **Attach Modes & Movement:**
   - Follow/Track: Movement is relative to the entity's level body frame.
   - Mimic: Movement is relative to the entity's body frame, ignoring pitch and roll.
   - Tether: Movement is relative to the level observer frame.
   - Unattached: Movement is in level observer coordinates.

3. **Keyboard Mappings:**
   - VR-Forces maps observer movement functions to keyboard keys for easy navigation:
     - Primary movement keys (W, A, S, D) are mapped to observer coordinates.
     - Keypad layout changes orientation and movement speed.
     - Laptop users can use arrow keys instead of the keypad.

4. **Usage:**
   - Press and hold a key combination to move the observer continuously in the desired direction.
   - Ensure NumLock is on for using the keypad for navigation.

- **Combined Key Presses:** Simultaneously press multiple keys to combine movement functions (e.g., diagonal movement by pressing 'forward' and 'left').

- **Navigation Options:**
  - **Movement:**
    - Forward/Backward
    - Up/Down
    - Left/Right
    - Applicable to: Observer, Level Observer, Entity, Level Entity, Attached Context Coordinates

  - **Rotation:**
    - Heading (Left/Right)
    - Pitch (Up/Down)
    - Roll (Left/Right)
    - Applicable to: Observer and Level Observer Coordinates

  - **Camera Control:**
    - Orbit Left/Right
    - Orbit Up/Down
    - Look (Move Camera) Left/Right
    - Look (Move Camera) Up/Down
    - Tilt (Move Camera) Left/Right

  - **Reset & Zoom:**
    - Reset Observer to Default Position and Orientation for Attached Mode
    - Reset Camera to Default Position and Orientation
    - Zoom View

- **Geocentric Terrain Movement:** Beyond 6 million meters from Earth's surface, movement keys orbit around the center of the Earth.

- **Orbiting:**
  - Orbit around an object or screen center point (ineffective in sky).
  - Heading continuously faces the orbit point; camera can look elsewhere during orbit.
  - To orbit:
    - Around an object: Attach observer to the object, then press right/left arrow keys.
    - Around a point: Detach from any simulation object (press 'Z'), then press right/left arrow keys.

- **Camera Movement:**
  - By default, looks in heading direction but can be moved independently (up/down/left/right/tilt left/right).
  - Compass movement indicates heading change, not camera movement.
  - Key mappings: Ctrl + Keypad number (2, 3, 4, 6, 8, or 9) for camera movement. NumLock must be on to use the keypad for navigation.

- **Camera Movement:**
  - Use keys mapped to camera movement functions.
  - Provided by MAK Technologies.

- **Observer Movement (3D View):**
  - **Keyboard:** Not explicitly mentioned, but implied from the context.
  - **Mouse:**
    - **Drag Terrain:** Left-click and drag; effective for large distances. Disable via Display Settings or Observer Control Panel.
    - **Change Orientation:** Right-click and drag.
    - **Drag View:** Middle mouse button (or wheel) and drag; no terrain click required.
    - **Orbit Terrain:** Ctrl + Drag.
    - **Teleport:**
      - Shift+click on terrain/prop to move 90% of the way towards it.
      - Ctrl+Shift+click on simulation object to jump to it.

- **Observer Movement (2D View):** Same as 3D view using mouse and keyboard.

- **Similarities between 2D and 3D views:** Many key and button mappings are shared.
- **Movement limitations in 2D view:**
  - No support for vertical movements: up/down (altitude), pitch, or roll.
  - Only horizontal movements are possible.
- **Observer heading changes:**
  - Not possible when 'Orient North' is enabled. For details, see "56.9. Forcing Orientation North".
- **Keyboard navigation in 2D view:**
  - Use NumLock for keypad navigation.
  - Refer to the VR-Forces Quick Reference Card for complete movement functions and mappings.
- **Mouse navigation in 2D view:**
  - Drag terrain for position change.
  - Orbit for heading change, but not possible when 'Orient North' is enabled.
- **Zooming observer in both 3D and 2D projections:**
  - Zooming magnifies objects, increasing level of detail (LOD).
  - Zoom speeds decrease with increased magnification for better control.
  - Field of view establishes baseline zoom level.
  - Switching between 3D and 2D maintains zoom level (Stealth only).
  - Scene corruption may occur at high altitudes (>10,000m) due to z-buffer precision limits.
  - Environmental conditions (clouds, rain) affect visibility during zooming.

1. **Zooming in 3D:**
   - Zoom out limit: Observer's initial location.
   - To see more terrain: Move the observer away from it.
   - Zoom methods:
     - Keys: `=` (increase), `-` (decrease).
     - Mouse: Ctrl + scroll wheel forward/backward.
     - Observer Control Panel: Specify value in Magnification box.
   - Magnification change: 1.25x per key press/mouse scroll.
   - Reset magnification to 1.0: '0' key or middle mouse button.

2. **Zooming in 2D:**
   - No zoom limit due to lack of observer altitude.
   - Zoom methods:
     - Keys: `E` (increase), `Q` (decrease).
     - Mouse wheel: Scroll forward/backward, Alt + scroll for center focus.
   - Reset to default zoom: Spacebar.

3. **Terrain Scale Factor:**
   - Zooming scales terrain distances based on view magnification.
   - Adjust Terrain Magnification Scale Factor (Experimental Features) to control scaling.
   - Benefits performance by limiting high-quality terrain details at higher magnifications.

4. **Magnification LOD Angle for Terrains:**
   - Higher zoom levels increase memory usage due to paging in more detailed terrain tiles.

- **Terrain Performance Tuning:**
  - Limit high LOD (Level Of Detail) tiles to areas of interest for better performance.
  - Adjust 'Terrain Magnification High LOD Angle' to control the range of higher LOD tile usage.
  - Increasing this angle can prevent cracks between high and low LOD tiles but may impact performance. This feature is recommended for ground vehicles.

- **Ocean Rendering Issues:**
  - When zooming in over long distances, the ocean might not render correctly or interact poorly with terrain. To fix this:
    - Edit `./data/Environment/Ocean/Triton.config` and set `use-mesh = no`.
    - Fine-tune performance settings in the file if needed.

- **Zooming Observer:**
  - **To Extents of Terrain/Objects:** Zoom resets to show terrain center or selected object extents based on observer attachment and selection status.
  - **Quick Zoom to Selected Objects:** Select objects, then choose 'View > Zoom to Extents'.
  - **Scenario Load Zoom:** Configure scenarios to automatically zoom to all simulation object extents upon loading.

- **Zooming to Scenario Extents on Load:**
  - Saved observer view overrides 'Zoom to Scenario Extents' on load.
  - To zoom to simulation object extents on load:
    - Open the scenario.
    - Go to Settings > Application > GUI Settings page.
    - Select 'Zoom to Scenario Extents on Load'.
    - Save the scenario.

- **LOD (Level of Detail) Center in Observer Mode:**
  - Adjusts LODs for areas away from the area of interest, reducing unnecessary high detail rendering.
  - Best suited for aircraft; use LOD angle change for ground vehicles.
  - Configure: Settings > Display > Observer Settings page.

- **Centering the Observer on a Simulation Object:**
  - Methods: Object Console Summary Panel, Last Clicked Object Panel, or Information dialog box.
  - Using Object Console Summary Panel attaches observer to object in Tether mode.
  - To center:
    - Right-click message from desired simulation object.
    - Choose 'Center Entity'.

- **Centering the Observer on a Simulation Object:**
  - From Last Clicked Object Panel or Information dialog box.
  - No attachment to object; object movement causes it to go off-center.
  - Plan View: Icon centers in window. Stealth mode: Observer stays oriented relative to centered object.
  - Spacebar changes view to top-down (similar to Plan View).
  - Can't center on different object if already attached.

- **Simulating Camera Jitter:**
  - Enable 'Allow Camera Shake' in Display Settings > Observer Settings.
  - Adjust Intensity slider or box value for desired effect.

- **Forcing Orientation North:**
  - Default: Observer's heading stays north (up) in 2D view, regardless of attached object's heading.
  - Can be disabled to match attached simulation object's heading.
  - Enable/disable via Display Settings > Observer Settings or Observer menu.
  - Specify True, Magnetic, or Grid North for plan view orientation:
    - True north: Points towards geographic North Pole.
    - Magnetic north: Determined by World Magnetic Model (WMM).
    - Grid north: Direction indicated by vertical grid lines on ordnance survey maps.

- **Map Alignment Preferences (3D Only):**
  - Select True North, Magnetic North, or Grid North.

- **View Constraints (3D Only):**
  - Prevents observer from moving through terrain or props within a 1-meter bounding sphere.
  - Enabling/disabling methods:
    - Press `/` key.
    - Choose "Observer > Constrain to Terrain".
    - Use Observer Control Panel.

- **Navigation Speed:**
  - Options: Manual speed setting or automatic speed scaling based on circumstances.
  - Speed scaling assumptions:
    - Higher above terrain = faster movement.
    - Closer to attached object = slower movement.

- **Speed Scaling (3D Only):**
  - Enable/disable methods:
    - Observer Control Panel.
    - "Observer > Speed Scaling".
    - Press `*` key on keypad.
  - Speed scaling modes:
    - Above Ground Level (AGL).
    - Above Mean Sea Level (MSL), with optional offset.

- **Changing Observer's Movement Speed:**
  - Adjust linear, rotational, and orbital speed.
  - If speed scaling is enabled, changes the speed gain; if disabled, changes absolute speed.

- **Observer Speed Control:**
  - Adjust sliders on Observer Control Panel or Display Settings dialog box (range: 0.1 to 10, default: 1).
  - Keyboard/mouse shortcuts:
    - Linear speed: Keypad 7 (faster), 1 (slower); Ctrl+mouse wheel; Movement key + mouse wheel.
    - Orbital speed: Keypad + (faster), - (slower).

- **Saving and Recalling Observer Views:**
  - Automatically saves views as part of the scenario (.osrx).
  - Save views independently or associate with a terrain, specifying a default view.
  - Saved views include attach mode, positional offset, marking text; X & Y values for 2D views.
  - Manage saved views in Observer Views Panel:
    - Add current view, save to file, load file, clear list.
    - View icons indicate 3D/2D, terrain association, default status.
  - Recall a view: select it in the Observer Views Panel.

- **Recalling a View:**
  - Select view in Observer Views Panel for immediate change.
  - Hold Ctrl and click for smooth transition; mode doesn't change if new view uses different observer mode.

- **Deleting Views:**
  - Right-click on view in Observer Views Panel, select 'Delete Observer View'.
  - Clearing list removes scenario-specific views and hides terrain-associated views.

- **Loading Views Automatically with Terrain:**
  - Save views to a file (.osrx) in the same directory as MTF file for automatic loading.
  - Default view can be specified; it's indicated by an asterisk next to its icon.

- **Saving and Recalling Views:**
  - Terrain-associated views don't save with scenarios but load when terrain is loaded, unless marked hidden.
  - Scenario-specific views take precedence once saved.

- **Default Terrain Views:**
  - Set default 3D/2D view:
    - Right-click desired view.
    - Choose "Set As Default Terrain View".
  - Apply default view based on current observer mode (3D or 2D) when loading a terrain.
  - Unset default view:
    - Right-click the default view.
    - Choose "Unset Default Terrain View".

- **Scenario Startup View:**
  - Set startup view for scenarios with observer views:
    - Right-click desired view.
    - Choose "Set Default Scenario View".
  - Indicated by a star icon next to the view.
  - Unset default scenario view similarly.

- **Saving and Loading Views:**
  - Save all views to a file:
    - Click 'Export Views' in Observer Views Panel.
    - Select or type file name, click OK.
  - Save individual view:
    - Right-click desired view.
    - Choose "Save Observer View".
    - Enter file name, save.
  - Load saved views:
    - Append manually to Observer Views Panel.
    - Automatically loaded when scenario with saved observer views is opened.

- **Benefits of Saving Views:**
  - Associating views with a terrain:
    - Automatically loads views on terrain load.
    - Can specify a default view for immediate use.
  - Saving views to a file:
    - Useful for simulation-specific Absolute mode views or when observer is attached to simulation objects.
    - Not automatically loaded; needs manual loading or command line.

- **Saving and Recalling Views:**
  - Load a view by dragging and dropping the `.osrx` file onto the Observer Views Panel.
  - Import and append views using the 'Import and Append Views' button in the Observer Views Panel.

- **Using the Go To Location Panel:**
  - Move the observer to a specified address, latitude/longitude, or MGRS coordinates.
  - Select method: Address (requires internet), Lat/Lon (degrees, minutes, seconds), or MGRS (Grid Zone, Map Sheet, Easting, Northing).
  - Enter required information and click 'Go'. Error messages displayed if there's an issue with the entered address.

- **Controlling the Observer from Other Applications:**
  - VR-Forces responds to view control messages sent by other applications or entity/global plans using VR-Link-based apps.
  - View control messages can specify: attach mode, simulation object, observer position, and orientation.
  - Enable/disable processing of view control messages via 'Settings > View Controls'.

- **Attaching the Observer:**
  - Attach to simulation objects or props using various modes:
    - Mimic/Track (follows object's movement and orientation)
    - Tether Track/Location Track (stays at a fixed distance/orientation from the object)
    - Filter attachment list by object type
  - Detach from an object, hide the attached model (3D view only), and attach to props.
  - Improve performance when attaching to ground objects.

The VR-Forces User Guide provides methods and modes for attaching an observer (camera) to objects in 3D and 2D views. Key points include:

1. **Attach Modes:**
   - **Absolute Mode:** Observer stays at a fixed position.
   - **Follow Mode:** Observer follows the target object's movement.
   - **Mimic Mode & Mimic Track Mode:** Observer mimics the target object's orientation and/or position.
     - *Mimic Location Track Mode:* Observer tracks the target object's location but maintains its own orientation.
   - **Space Follow Mode:** Observer follows the target object while maintaining a constant distance.
   - **Tether Mode, Tether Track Mode & Tether Location Track Mode:** Observer is connected to the target object with a virtual tether of fixed length.
     - *Tether Track/Location Track:* Observer tracks the target object's position and orientation/orientation only, respectively.
   - **Track Mode:** Observer tracks the target object's position and orientation.

2. **Attaching the Observer:**
   - Right-click on an object in the Objects List Panel or terrain and select 'Observer Attach > [Attach Mode]'.
   - Select a simulation object/prop, then click the 'Attach' button on the Attachments Panel or Attach Object Toolbar.
   - Use keyboard shortcuts:
     - `>`/`<` to attach to next/previous objects without filter.
     - `.` `/`, to attach to next/previous allowed objects based on attachment filter.

3. **Observer Behavior:**
   - When switching attachments, the observer preserves its relative position and orientation to the attached object.
   - Press 'Spacebar' to quickly return to the default offset for the current attachment mode.

4. **Special Attachment Modes:**
   - For Tether Track, Mimic Track, Tether Location Track, or Mimic Location Track modes, refer to specific sections in the guide (pages 1178 and 1185).

- **Attaching Observers (Cameras):**
  - Attach observers to other observers or objects in VR-Forces.
  - **To attach an observer to another observer:**
    - Filter the Objects List to show all objects or observers.
    - Select the target observer window.
    - In the Objects List, select the observer to attach.
    - Right-click and choose 'Observer Attach' with the desired attach mode (e.g., Attach mode).

- **Attaching Observers to Articulated Parts:**
  - Attach an observer to specific moving parts of entities (like turrets).
  - After attaching to an entity, select the articulated part in the expanded Attachments Panel.

- **Attach Modes: Mimic Track/Tether Track & Mimic Location Track/Tether Location Track**
  - These modes require specifying a primary and secondary object or location for attachment.
  - **To attach using these modes:**
    - Right-click on the primary object, choose the attach mode (e.g., Attach Mimic Track).
    - Click the secondary object or location.

- **Filtering Object Attachment List:**
  - Simplify attachments by filtering the list by scene element type in the Attachments Panel.

- **Detach from Simulation Object:**
  - Click 'Detach' button ( ) on Attachments Panel or press 'Z'.
  - Detaching allows observer to move freely and independently of the simulation object.

- **Hide Attached Model (3D View Only):**
  - Expand Attachments Panel, select 'Hide Attached Model' checkbox.
  - Hiding model improves performance by reducing rendering load in 3D view.

- **Attach to Props:**
  - Attaching to props doesn't cause observer movement as props are stationary.
  - Benefits: Quickly refocus the observer on a specific scene location. In Track mode, use keyboard movement keys to orbit around the prop.

- **Improve Performance with Ground Objects:**
  - Disable height above terrain calculation for better performance when attaching to ground simulation objects.
  - Use command-line option `-S` or `--suppressHatIntersectOnAttach` to disable this calculation.

- **Attach Modes in 3D View:**
  - Various modes combine position, orientation models, and constraints for different observer behaviors relative to the attached simulation object.
  - Modes include Absolute (free-fly), Follow, Mimic, Track, Space Follow, Tether, etc., each with unique movement and orientation rules.

- **Absolute Mode:**
  - Observer moves freely in space, not attached to any simulation object.

The VR Force User Guide outlines several attach modes for observers (viewpoints) in a simulation, dictating how the observer moves and behaves relative to a simulation object:

1. **Follow Mode:**
   - Observer maintains offset from object's position and heading changes.
   - Observer's pitch/roll remains unchanged even if the object's pitch/roll changes.

2. **Mimic Mode:**
   - Observer behaves as if rigidly connected to the entity, mimicking its movements.
   - Observer's position, heading, pitch, and roll change with the object's.
   - Cockpit displays disable observer position/orientation adjustment relative to the entity.

3. **Mimic Track Mode:**
   - Combines Mimic mode (position changes) and Track mode (orientation remains focused on a secondary entity).
   - Orientation controls are disabled.

4. **Mimic Location Track Mode:**
   - Similar to Mimic Track, but tracks a location on the ground instead of an entity.

5. **Space Follow Mode:**
   - Observer attaches above an entity at a fixed distance (e.g., satellites), scaled for visibility.
   - Observer's position and heading change with object's movements, but pitch/roll remains unchanged.
   - Observer cannot move towards/away from or below the horizontal plane of the entity.

In all modes, simulation object movement does not affect the observer.

- **3D View Attach Modes:**
  - **Tether Mode:** Observer maintains constant distance and direction from object.
    - *Changes:* Position with object; heading, pitch, roll independent.
  - **Tether Track Mode:** Observer's position changes with attached entity; orientation tracks a secondary entity.
  - **Tether Location Track Mode:** Similar to Tether Track but tracks a ground location instead of an entity.
  - **Track Mode:** Observer's heading changes to keep object centered in view; position remains unchanged.

- **2D View Attach Modes:**
  - Supports **Follow** (observer's heading changes with entity) and **Tether** (heading doesn't change) modes.
    - *Movement:* Standard keys offset observer from object's position; orbit keys offset orientation (in Follow mode or relative to terrain).
  - **Mapping:** 3D attach mode maps to either Follow or Tether in 2D view, restoring original mode upon switching back.

- **Observer Attachment at Startup:**
  - To attach observer to an entity on scenario load, save the desired view as a favorite.

- **Inset Views:**
  - Display inset views of individual simulation objects.
  - Default observer attachment in Mimic mode causes main window's model disappearance; change or detach observer to fix.
  - Control inset views using keyboard commands, edit in Display Engine Configuration Editor.
  - Title bar displays object name, but view can be changed to other objects.
  - Create inset view: select object, choose "Objects > Create Window > Create Inset View" or right-click on object.

- **Cockpit Displays:**
  - VR-Forces supports displaying GL Studio-created cockpit displays for various vehicle entities (fixed-wing, rotary-wing, ground vehicles).
  - Cockpits can be 2D (screen-fixed) or 3D (vehicle-aligned), allowing instrument zoom.
  - Display cockpits only when observer is attached to entity in Mimic mode; not supported on Linux.
  - Enable/disable cockpit display and smoothing options via "Display Settings" dialog box.

1. **Smoothing in Dynamic Widgets:**
   - Smooths display of dynamic widgets like orientation or velocity.
   - Shows smoothed values instead of instantaneous changes.

2. **Cockpit Displays and Instrument Panels:**
   - Cockpit displays:
     - Fixed, operate in Mimic mode.
     - Enabled/disabled via Settings > Cockpit Displays.
   - Instrument panels:
     - Inset windows displaying vehicle instruments (e.g., altimeter, artificial horizon).
     - Independent windows, placeable anywhere on the screen.
     - Not supported on Linux, not persistent across exercise runs.
     - Created by selecting an entity and choosing "Create Window" > "Create Instrument Panel".

3. **Configuring Entities for Instrument Panels:**
   - VR-Forces includes fixed-wing aircraft instrument panels, usable with appropriate configuration.
   - Entities must have `instrumentPanelCategory` parameter in their model definition to use provided instrument panels.

4. **Displaying Sensor Views:**
   - VR-Forces can display views from gimbaled visual sensors (e.g., UAV camera) in 3D mode.

- **Sensor View Display:**
  - Displays in an inset window with information about observer mode and viewed area (Figure 491).
  - Has its own observer; observer mode can be changed within the view.
  - Each sensor has a control panel for:
    - Moving the sensor
    - Changing its aim
    - Zooming in/out
    - Lasing targets (Figure 492)

- **UAVSensorDemo Scenario:**
  - Demonstrates use of an entity with a gimbaled sensor and Lua script for successive aiming at entities.

- **Displaying Sensor Views:**
  - Select an entity with a gimbaled sensor.
  - Create sensor view via:
    - "Object > Create Window > Create Sensor View" or
    - Right-click on the object and choose "Create Window > Create Sensor View"

- **Sensor Field of View Cone Display:**
  - Displays translucent cones showing observed terrain area, each cone in a different color (Figure 493).
  - Enable via:
    - "Settings > Display"
    - Select "Observer Settings" page
    - Check "Sensor Fields of View"

- **Controlling the Sensor View:**
  - Control panel opens with sensor view for:
    - Aiming at simulation objects or terrain points
    - Setting scan mode
    - Joystick control (configured joystick required)
    - Zooming in/out
    - Moving field of view
    - Lasing center point
    - Setting laser designator code

  - Alternate methods available via data requests:
    - Sensor Aim for aiming and setting scan mode
    - Sensor Zoom for zooming

- **Sensor View Issues & Solutions:**
  - *White Terrain:* Set 'Clipping Plane' to 'Clamp Near Clip When Magnified'.
  - *Aiming Sensor:*
    - At an entity: Click 'Track an Entity', select the object, click 'OK'.
    - At a location: Click 'Track Location', choose a point or enter coordinates, click 'OK'.

- **Sensor View Controls:**
  - *Mode:* Scan (Scan button), Joystick control (Joystick button).
  - *View Adjustment:* Zoom (Zoom slider), Move (arrow buttons), Rate of movement (Rate slider).

- **Lasing from Sensor View:**
  - Enable lasing to target the center point.
  - Change laser designator code: Click 'Laser Code', enter a 3- or 4-digit code between 111 and 1788, click 'OK'.

- **Gimbaled Sensors Configuration:**
  - Edit properties in Simulation Object Editor (SMS).
  - Set Minimum & Maximum Azimuth Angle to the same value for 360-degree swivel.

- **Depth of Field Effect:**
  - Controls scene focus based on focal depth and range.

- **Depth of Field (DoF) Effect in VR-Forces:**
  - DoF creates an illusion of depth and focus.
  - Key parameters:
    - Focal Depth: Distance where objects are sharp.
    - Focal Range: Depth of field, determining how much is in focus around the focal depth.
  - Enabling and configuring DoF:
    - Enable/Disable: Use 'Observer > Depth of Field' or Display Settings > Observer Settings.
    - Manual Configuration: Adjust Focal Depth and Focal Range sliders in Display Settings > Render Settings.
    - Automatic Configuration: Enable 'Depth of Field Autofocus' for automatic focal depth adjustment.

- **Terrain Databases in VR-Forces:**
  - Terrain databases provide 3D information, enabling height, intervisibility calculations, and simulation object functionality.
  - Supported formats: FLT, DTED, GDB. Can load terrains from elevation, imagery, feature data, MTF files, or stream from local files/servers like VR-TheWorld Online.
  - Recommended workflow:
    1. Create an earth file.
    2. Connect to the earth file.
    3. Save the terrain as an MTF file.
    4. Create a scenario and choose the MTF file as the scenario database.

- **Terrain Databases Provided with VR-Forces:**
  - Table 47 lists provided terrains, some with variants indicating coordinate systems or other differences.

- **Internet Connection Requirements:**
  - Terrains with "(online)" in the title require an internet connection to connect to VR-TheWorld Server or another online server.
  - Local terrains do not require an internet connection as they are stored locally on the user's machine.

- **Examples of Terrains:**
  - Online Terrains: Bakersfield Topo Map, Brooklyn (online), MAK Earth (online), etc.
  - Local Terrains: Ala Moana.mtf, ArrivalsHall.mtf, DestructibleTerrain.mtf, etc.

- **Terrain Variations & Features:**
  - Some terrains have variations that emphasize specific features or data.
  - Certain terrains include feature data useful for aggregate-level scenarios (e.g., Bakersfield Topo Map contains topographical maps).
  - High-resolution insets are available for some online terrains (e.g., MAK Earth (online) includes high resolution insets for California, Honolulu, Hawaii, and other cities).
  - Procedurally generated earth with high-resolution imagery and elevation is available in MAK Earth Bing Maps.

- **Additional Terrains:**
  - Additional terrains can be found in a supplemental data package provided by VR-Forces.
  - Contact your MAK salesperson for download details of these additional terrains.

- **Special Purpose Terrains:**
  - DestructibleTerrain.mtf is designed to demonstrate destructible terrain based on switch nodes.
  - MAK Proving Ground.mtf is a non-realistic terrain designed specifically for testing various environments.
  - NTC (online).mtf provides a high-resolution area of the National Training Center at Fort Irwin in California, U.S.A.
  - Sadr City.mtf offers an urban geotypical Middle Eastern terrain in Sadr City, Iraq, ideal for urban scenarios.
  - Truman Carrier.mtf is a model of an aircraft carrier as a terrain object rather than a simulation object.
  - VR-Village.mtf is a fictional database with a highly detailed small town in a larger desert environment.

- **Terrain Databases:**
  - MAK Earth Air and Space (online).mtf is designed for airspace simulation using the 2D projection (plan view) and includes US Sectional Air Charts for IFR.
  - MAK Earth Base (online).mtf provides VR-TheWorld Server MAK Earth terrain with high-resolution insets for Honolulu, Hawaii, and Boston, Massachusetts.
  - Test terrains are multiple terrains used for testing models and different terrain database capabilities.

**Terrain and Data Support in VR-Forces:**

1. **Supported File Formats:**
   - Terrain Data: MAK encrypted (.medf), OpenFlight (.flt), MetaFlight (.mft), Shape (.shp), TerraPage (.txp), CDB (via earth file), FBX.
   - Image Formats: Supported, but not explicitly listed.
   - Feature Data Formats: Supported in the front-end, but not explicitly listed.

2. **Terrain Composition Methods:**
   - Load individual files for small terrains (supports all VR-Forces coordinate systems).
   - Use osgEarth format earth file to stream large terrain data.

3. **Terrain File Saving:**
   - Save composed terrains as MAK terrain files (.mtf) for quick loading.
   - Save terrains in cached format for faster loading.

4. **Coordinate Systems:**
   - Supports UTM and geocentric systems.

5. **Large Terrain Databases:**
   - Terrain paging and streaming are supported for handling large databases.

6. **Ground Clamping:**
   - Configurable ground clamping is available to keep objects on the terrain surface.

7. **Support and Limitations:**
   - VR-Forces can load osgEarth-supported formats via earth files, but not all formats have dedicated drivers.
   - Geocentric terrains are supported when using osgEarth.
   - Contact MAK support for uncertain format compatibility.

VR-Forces supports various types of elevation and image data, as well as feature data:

- **Elevation Data:**
  - DTED (.dt0, .dt1, .dt2, .dted)
  - GeoTIFF
  - DEM
  - Arc/Info Binary Data (.adf)
  - Other formats supported by osgEarth

- **Image Formats:**
  - GeoTIFF (.tif, .tiff)
  - JPEG (.jpg, .jpeg)
  - PNG
  - RGB
  - Windows bitmap (.bmp)
  - GIF
  - ECW (Windows only)
  - Other formats supported by GDAL

- **Feature Data Formats in the Front-end:**
  - Shape files
  - S-57
  - OGR vector formats referenced in earth files

**Feature Layers and Props:**

- Terrain objects can be extracted as props, which are separate manipulable objects.
- Feature layers contain point features (e.g., buildings, trees) that can be extracted as props from:
  - MAK Terrain Format (GDB)
  - Shapefiles (SHP)
  - DFAD data (DFD)

- Point features are rendered differently in the front-end and back-end:
  - Front-end: Renders point features based on feature layer data, with buildings or trees represented as geometric objects.
  - Back-end: Treats point features as bounding volumes for collision avoidance and line-of-sight calculations.

**Back-end Supported Feature Data Types:**

- MAK terrain database (.gdb)
- Shape terrain data (.shp)
- S-57
- WFS
- OGR vector formats referenced in earth files
- VMAP

The preferred format for adding features is shapefiles.

- **Feature Data Extraction:**
  - GDB, DFD, VMAP: Use `vectorNetworkToShapeFiles` utility to extract feature data into shapefiles.
  - S-57 files: Use `ogr2ogr` tool to convert feature data into shapefiles.

- **Supported Coordinate Systems (VR-Forces):**
  - UTM (Universal Transverse Mercator):
    - Suitable for small areas; accuracy decreases over large distances.
    - Uses easting, northing, and height above an ellipsoid. Default is offset UTM with configurable origin.
  - Geocentric:
    - Origin at Earth's center; X-axis through prime meridian, Y-axis through 90E longitude, Z-axis through North Pole.
    - Suitable for large play areas.

- **Terrain Database Loading:**
  - Preferred method: MTF files referencing elevation, image, and feature files processed by VR-Forces.
  - Alternative method: Load non-MTF terrains directly (less efficient, repeated each time).
  - Terrain format choice available when creating a scenario; only MTF files can be opened via menu.

- **Large Terrain Databases:** VR-Forces supports large databases (high polygon count or large geographic area) using two methods:
  - **Terrain Paging:**
    - Breaks up a database into independent cells for loading.
    - Front-end loads terrain based on zoom level, simulation engine at highest detail.
    - Simulation engine loads terrain only when needed to support objects in the scenario.
    - Predictive terrain paging: anticipates and loads required pages before objects need them; removes unused pages if total polygon count exceeds configured maximum.
    - Manual paging-in is possible using terrain page-in areas.
    - Paging priorities:
      - Moving simulation objects > predictive paging
      - Blocking terrain calls > non-blocking calls

  - **Streaming Terrain:** VR-Forces can stream terrains accessed through a terrain server, such as VR-TheWorld Server.

- **Terrain Management:**
  - **Paging & Streaming:**
    - Paging out terrain (based on polygon count) is prioritized over paging in.
    - Static local terrains use 'terrain paging'.
    - Large areas can be streamed from a terrain server supporting multiple resolutions and data types (elevation, imagery, map, features).
    - VR-Forces supports connections to terrain servers like MAK's VR-TheWorld Server.

- **Entity Terrain Interaction:**
  - **Ground Clamping:**
    - Keeps entities on the terrain surface despite altitude data.
    - Can reduce frame rate but is useful when simulation and visualization databases differ.
    - Configurable aspects:
      - Enable/disable ground clamping.
      - Enable/disable orientation clamping.
      - Force lifeforms to remain upright relative to their location's plane while moving up slopes or steps.
      - Set the distance from the terrain within which entities are clamped (max 100m).
    - Accessible via Display Settings or a dedicated menu option.

- **Terrain Display Customization:**
  - Chapter 60 describes how to change terrain display for useful information, including:
    - Displaying grid lines.
    - Displaying models and terrain in wireframe mode.
    - Filtering Earth file layers.

The text discusses how to display terrain information and feature data in a 2D view using VR-Forces software:

1. **Terrain Information Display:**
   - Customize terrain appearance for better realism.
   - Enable/disable grid lines:
     - Settings > Display > Observer Settings or Observer > Grid Lines.
   - Configure grid lines:
     - Choose coordinate system, unit type, and precision.
     - Set spacing (fixed or auto) and offset.
     - Customize labels and colors.

2. **Feature Data Display:**
   - List vector features.
   - Change feature data colors.
   - Adjust map colors using the display settings toolbar.
   - Select 2D view layer.
   - Show coordinates and soil type at a location.
   - Use map scale overlay.
   - Configure visible surfaces (GDB soil types).

3. **Additional Notes:**
   - Grid lines are observer-specific and configurable.
   - Auto spacing for grid lines avoids issues with fixed spacing but requires constant recalculation during zoom.
   - For terrain composition details, refer to the "Composing Terrains" chapter in the MAK ONE Applications Reference Manual.

1. **Grid Line Coordinate System:**
   - Show grid line type on toolbar: Check 'Show Grid Line Type On Toolbar' checkbox.

2. **Wireframe Mode for Models and Terrain:**
   - Enable/Disable:
     - Via Display Settings dialog box (Settings > Display > Render Settings page).
     - Or, via quick menu (Settings > Wireframe Rendering).

3. **Filter Earth File Layers:**
   - Hide/unhide layers globally or by observer mode.
   - Affects all open windows; changes are saved in MTF file.
   - Use Terrain Settings dialog box (Settings > Terrain > Earth Layers page).
   - Filtering only affects front-end display, not back-end loading.

4. **Display 2D Feature Data:**
   - Show/hide 2D features imported from GDB files or shapefiles.
   - Does not affect features streamed from a terrain server.
   - Use Display Settings dialog box (Settings > Display > Observer Settings page, select Plan View observer mode).
   - Enable/disable via quick menu (Observer > Features).

- **Vector Features Display:**
  - Vector features are listed on the 'Vector Network' tab in the Terrain Information Panel.
  - Selecting a feature highlights it in the display and vice versa.
  - To view the list:
    - Choose `View > Terrain Information Panel`.
    - Select the 'Vector Network' tab.

- **Changing Feature Data Colors:**
  - Change colors of feature data using the following steps:
    - Choose `Settings > Terrain`.
    - Select the 'Feature Settings' page.
    - Click on a feature's color swatch to open a color picker dialog box.
    - Select the desired color and click OK.

- **Adjusting Map Colors:**
  - Change terrain colors via the following methods:
    - Using the settings menu: `Settings > Display` > 'Observer Settings' page > 'Map Color Control'.
      - Options include enabling/disabling, inverting grayscale, adjusting contrast, brightness, or color mix.
    - Alternatively, use the 'Map Color Control' button on the Display Settings toolbar.

- **2D View Layer Selection:**
  - osgEarth terrains can have different visible layers for display in 2D view (e.g., contour lines, annotations).
  - Select a layer using the '2D View Layer' toolbar.

- **Displaying Coordinates and Soil Type:**
  - Display coordinates and soil type (if defined) of features or any point in the terrain.
  - Soil type data must be provided by the simulation engine. If not queried, only front-end coordinate data is displayed.

- **Last Clicked Location Panel:**
  - Becomes unavailable if querying the simulation engine takes more than 0.5 seconds.
  - Displays coordinates and soil type of a feature or location when clicked, if 'Query Sim Engine' is selected.

- **Map Scale Overlay:**
  - Displayed in Plan View Observer mode by choosing 'Observer > Map Scale'.

- **GDB Soil Types Visibility:**
  - Configured via 'Settings > Terrain' > 'Visible Surfaces' page.
  - Select or deselect soil types to make them visible or hidden on the terrain.

- **Terrain Profiles:**
  - Displayed for line objects with height (routes, lines), intervisibility lines, and simulation object tracks.
  - Show a graph of the line against the terrain, nearby simulation objects, cursor location, and one point's location along the line.
  - Viewed by right-clicking on a line and selecting 'Terrain Profile' from the shortcut menu.

- **Accessing Terrain Profile:**
  - Open Edit dialog box for a line and click 'Terrain Profile'.
  - Alternatively, follow procedure in "46.2.4 Displaying a Terrain Profile for a Track History" on page 1026.

- **Configuring Terrain Profiles (Display Settings > Terrain Profile Settings):**
  - **Sampling:**
    - Frequency of terrain height sampling.
    - Maximum number of sample points along a line.
  - **Data Source:**
    - Use back-end for terrain's height data (default after line creation).
  - **Display Options:**
    - Show nearby simulation objects and their distance from the line.
    - Show line vertices.
    - Automatically display terrain profiles when editing lines.

- **Creating a Terrain Profile Line:**
  - Choose 'Intervisibility > Create Terrain Profile Line'.
  - Click on terrain to place vertices, double-click to finish.
  - Edit like any other line (see "43.9.1 Editing Vertices" on page 999).

- **Purpose:** Generate navigation data for VR-Forces using terrain profiles.
- **Key Steps:**
  - Load the desired terrain or scenario.
  - Create a navigation area.
  - Generate navigation data:
    - VR-Forces analyzes the terrain and creates a navigation mesh (NavMesh).
    - Based on the NavMesh, it generates a graph of accessible locations for the entity type.
  - Save the terrain.
  - Start a new scenario or reload the existing one to use the newly generated navigation data.
- **Navigation Data Generation Details:**
  - VR-Forces creates separate sets of navigation data at various levels of detail for specified profiles (like lifeforms and ground vehicles).
  - Navigation data is stored in separate directories, accessible by multiple terrains if needed.
- **Path Finding Process:**
  - Entities plan a path using the A* algorithm with a given heuristic on the generated navigation data.
  - Path planning occurs every time an entity decides to move, either autonomously or due to a task assignment.

- **Pathfinding Cost Measurement:**
  - Factors: distance, time, danger.
  - A* algorithm's heuristic (e.g., Euclidean Heuristic) calculates cost based on these factors.

- **Path Following & Smoothing:**
  - Entities move along a series of vertices and edges.
  - VR-Forces smooths movement by setting subgoals as nearest reachable vertices:
    - Entity checks if it can move directly to the next vertex using AI mesh.
    - If reachable, it becomes the new subgoal; otherwise, entity moves towards the current subgoal.
    - Final trajectory connects these subgoals for a smoother path.

- **Dynamic Avoidance:**
  - Entities detect potential collisions and adjust trajectories using navigation data:
    - Realistic behavior in complex scenarios with minimal manual route coordination.

- **Navigation Areas & Sectors:**
  - Navigation areas define terrain regions (max size 20km x 20km) for generating navigation data.
  - Can be divided into sectors for separate navigation data generation, allowing for more granular control.

- **VR-Forces' Navigation Data Generation:**
  - Adapts to changes in terrain and obstacles at runtime.
  - Sectorizing areas speeds up regeneration, limiting it to affected sectors.
  - Disadvantages of using sectors: increased generation time with more sectors, potential failure if a sector is too large/complex, slower long-distance path planning.

- **Creating Navigation Areas:**
  - Created on the simulation engine's terrain (usually same as GUI).
  - If terrains differ:
    - GUI displays areas only if they're in the simulation terrain.
    - Coordinates are based on GUI's system but saved in simulation's system.
    - GUI must access simulation terrain for area creation.

- **Steps to Create a Navigation Area:**
  1. Open scenario/terrain.
  2. Access Terrain Settings > Navigation Areas page.
  3. Click 'New' (default size: 500m x 500m).
  4. Place lower left corner.
  5. Edit properties: name, dimensions, southwest corner coordinates.

- **Limitations:**
  - Maximum area size is 20km by 20km without changing raster precision.

- **Terrain Size & Sectorization:**
  - Large terrains may disable automatic sectorization.
  - Sectorize large terrains to prevent generation failures.

- **Sector Size Selection:**
  - Automatic: VR-Forces chooses sector size based on navigation area size.
  - Manual: Adjust using a slider; displays sector size and number of sectors.

- **Navigation Data Generation:**
  - Exclude no-go terrain areas from calculation (Prune No-Go Terrain Areas).
  - Control raster precision for navigation graph density.
  - Specify root path, output location, and select navigation profile(s).

- **Editing Navigation Area:**
  - Open scenario/terrain, access Terrain Settings > Navigation Areas, select area, click 'Edit'.
  - Revert edits by clicking 'Revert'.

- **Display & Remove Navigation Area:**
  - Display: Access via Settings > Navigation Areas or Show Navigation Areas checkbox.
  - Remove: Select area and click 'Remove'.

- **Navigation Area Information:**
  - Access via Terrain Settings > Navigation Areas, select area, click 'Info'.
  - Displays port (enable debugging in `./appData/settings/vrfSim/vrfSim.mtl`).

- **Performance Note:**
  - Navigation data loads only when a simulation object uses it.

- **Navigation Modes:**
  - Entities use:
    - Advanced navigation within areas.
    - Standard navigation when moving between areas.

- **Navigation Data Generation:**
  - Time varies based on:
    - Terrain complexity.
    - Detail level.
    - Computer processing power.
  - Saved in `./userData/navData` with the terrain name as the directory.
  - Factors affecting generation time:
    - Sectorizing ("62.2.1 Sectorizing Navigation Areas").
    - Cover points calculation (default for lifeforms, can be disabled).
      - Disabling may impact tasks using cover points.

- **Navigation Profiles:**
  - VR-Forces uses profiles (lifeforms, ground entities) with default values.
  - Customizable in `./appData/settings/vrfSim/navigationProfiles.mtl`.
  - Control:
    - Navigation data regeneration priority.
    - Triggers for regeneration.
  - Advanced features:
    - Nav-edges block: Connects points not normally connected by generation process.
    - Min-navigable-surface: Minimum size (in meters squared) for navigation data generation.

- **Entity Navigation Profile:**
  - Specified in the entity's OPE file (e.g., Human.ope uses "lifeform" profile).

- **Navigation Area Generation:**
  - Status displayed on Navigation Areas page:
    - Generated.
    - Needs Generation.
    - Scheduled Generation.
  - Can generate data for:
    - Selected navigation areas.
    - All areas needing generation.
    - All navigation areas (including those already generated).

1. **Generating Navigation Data:**
   - Use separate terrain version from simulation engine/GUI.
   - Save changes (e.g., added props) before generating navigation data.
   - Steps:
     - Open scenario/terrain.
     - Access Terrain Settings.
     - Select Navigation Areas page.
     - Choose areas for generation.
     - Click 'Generate'.
     - Save terrain when prompted.
     - Reload scenario.

2. **Managing Generation Queue:**
   - Remove area from queue to change status:
     - To 'Need Generation' if not yet generated.
     - To 'Generated' if previously generated.
   - Cancel generation while in progress to change status back to 'Needs Generation'.

3. **Using Generated Navigation Data:**
   - Open or reload scenario using the terrain.

4. **Automatic Regeneration of Navigation Data:**
   - VR-Forces automatically regenerates data for dynamic changes.
   - Faster with sectorized navigation areas.
   - Time varies (seconds to 20-30 seconds) based on factors like sector size and terrain complexity.

- **Temporary Navigation:** Entities may continue using old navigation data briefly until updated.

- **Regeneration Configuration:**
  - Configured in `./appData/settings/vrfSim/navigationProfiles.mtl`.
  - Specify dynamic terrain changes that trigger regeneration.
  - Set priority levels for regeneration relative to other profiles.
  - Example: Lifeform profile regenerates for 'entity', 'damage', and 'damage_structure' types with high priority (1).

- **License Requirement:** Regeneration due to terrain changes doesn't require an additional license.

- **Entity Navigation Data Generation:**
  - Generate for entities with object geometry (e.g., human, ground entities on surfaces like aircraft carriers).
  - Save location: `./data/simulationModelSets/<model_set>/vrfSim/navData`.
  - Steps to generate:
    - Start Simulation Object Editor.
    - Load SMS for the entity.
    - Select entity and go to Movement tab.
    - Check 'Use Detailed Geometry in Simulation Engine'.
    - Select geometry file if not specified.
    - Click 'Generate', specify platform types, then click 'Generate' again.

- **Navigation Area Importing:**
  - Configuration files and data saved to `./userData/navData` when generating navigation data for a navigation area.
  - Import process:
    - Go to Settings > Terrain.
    - Select Navigation Areas page.
    - Click 'Import Navigation Area'.

- **Importing Navigation Area:**
  - Open file browser, navigate to the directory containing the `.navRuntimeConfig` file for the desired navigation area.
  - Select the file and click 'Open' to add it to the terrain.
  - Save the terrain.

- **Displaying Navigation Data using Autodesk Gameware Navigation Lab (not supported on Linux):**
  - Open Navigation Lab from Start menu or Information dialog box.
  - Browse to `./userData/navData` for terrain data, or `./data/simulationModelSets/EntityLevel/vrfSim/navData` for entity data.
  - Select a `.NavData` file to view navigation data.

- **Viewing Simulation Object Movement in Navigation Lab:**
  - Connect to Navigation Lab and run the scenario.
  - Look for volumetric objects representing simulation objects.

- **Aerodromes**:
  - Represent airports and airbases using data from shape files.
  - Enable aircraft take-offs and landings on runways or route tactical graphics.

- **Managed Aerodromes & Runways**:
  - Promote aerodromes to control lighting, runway conditions, and activate runways for use in simulations.
  - Changes made affect connected exercises.

- **Promoting Aerodromes**:
  - **Specific Aerodrome**:
    - Quickly promote an aerodrome using the Aerodromes Toolbar.
    - Makes it a managed aerodrome with one active runway.
    - Steps: Open Aerodromes Toolbar > Select aerodrome > Click 'Create Selected Aerodrome'.
  - **Aerodromes in a Terrain**:
    - Promote specific or all aerodromes within a terrain area.

- **Aerodrome Data & Editing**:
  - MAK terrains include aerodromes, primarily for fixed-wing aircraft.
  - Aerodromes are part of vector files (originally from X-Plane) and can be edited using GIS tools to change, add, or remove features.

- **Checking a Terrain for Aerodromes**:
  - Verify if a terrain includes aerodromes by checking the Aerodromes Toolbar list.

- **Promoting Aerodromes:**
  - Open the 'Promote Aerodrome' dialog box via 'Create > Promote Aerodrome'.
  - Select the force for the aerodromes.
  - Choose either ICAO Code or Area Selection to specify aerodromes:
    - **ICAO Code:** Select from a list, filterable by name or code.
    - **Area Selection:** Draw an area on the terrain; select/deselect aerodromes within that area.
  - Click 'Create' for a single aerodrome or 'Promote' for multiple aerodromes.
  - Promoted aerodromes appear in the Objects List as managed aerodromes.

- **Managed Aerodromes and Runways:**
  - View aerodrome/runway information, including lighting and conditions, in the Information dialog box.
  - Center on an aerodrome using:
    - 'Center on Aerodrome' button in Last Selected Object Panel/Information dialog box.
    - Aerodromes Toolbar (view > toolbars > Aerodromes).
    - Double-clicking on an aerodrome in a list.

- **Aerodrome and Runway Set Data Requests:**
  - Control settings for managed aerodromes/runways using set data requests in global or individual plans.
  - Lighting support varies by aerodrome; Edwards Air Force Base (KEDW) is fully configured as an example.
  - **Aerodrome Light Conditions:** Set light conditions for all lights at an aerodrome, including runways. Changes are visible in Stealth observer mode and update managed objects' state, publishing to the network.

**Key Points Added:**
- None

- **Aerodrome Light Conditions:**
  - View and set lighting conditions (day, night, etc.) for an entire aerodrome.
  - Accessible via: Objects List > Select managed aerodrome > Set > Aerodrome Light Conditions.

- **Aerodrome Undercarriage Inspection System:**
  - Set undercarriage inspection system to on or off; no simulation effect.
  - Accessible via: Objects List > Select managed aerodrome > Set > Aerodrome Undercarriage Inspection System.

- **Lights (Advanced):**
  - Control intensity of various lights (aerodrome, runway) using a slider or value entry (0-100%).
  - Visualize changes in Edwards Air Force Base (KEDW) and other configured aerodromes.
  - Accessible via: Objects List > Select managed aerodrome > Set > Lights (Advanced).
  - Light types include: Aerodrome, Apron, Approach, Center Line, Displaced Threshold, etc.

- **Runway Active:**
  - Specify whether a runway is active or inactive; no simulation effect.
  - Accessible via: Objects List > Select managed aerodrome > Set > Runway Active.
  - Can set active state for all runways or specific ones.

- **Runway Arrestor Gear:**
  - Set arrestor gear on a runway to up or down for one or more runways.
  - Accessible via: Objects List > Select managed aerodrome > Set > Runway Arrestor Gear.

To manage aerodrome settings in VR Forces without affecting simulation:

- **Runway Arrestor Gear:**
  - Select aerodrome, then 'Set > Runway Arrestor Gear'.
  - Specify arrestor gear state (up/down) for all or specific runways.
  - Click 'OK' to apply and publish changes.

- **Runway Condition:**
  - Select aerodrome, then 'Set > Runway Condition'.
  - Set runway surface condition (e.g., Snow) for desired runways.
  - Changes affect managed objects and are published; visible in aerodrome's info dialog box.
  - Visualization requires additional weather settings.

- **Runway Damaged:**
  - Select aerodrome, then 'Set > Runway Damaged'.
  - Specify damaged state for desired runways.
  - Changes affect managed objects and are published; visible in aerodrome's info dialog box.

- **Runway Light Conditions:**
  - Select aerodrome, then 'Set > Runway Light Conditions'.
  - Set light conditions for all or specific runways.
  - Changes are visible in Stealth observer mode, affect managed objects, and are published; visible in aerodrome's info dialog box.

The VR-Forces User Guide outlines the functionality of the **Simulation Object Editor**, a standalone tool for managing simulation objects, tactical graphics, and creating new simulation model sets (SMSs). Key features include:

1. **Object Editing**:
   - Edit object characteristics like weapon systems, parameters, sensors, 2D/3D models, and formations.
   - Add or remove components, change models, and edit properties.

2. **Simulation Model Sets (SMSs)**:
   - Include SMSs in others, manage read-only status, set priorities, use Lua scripts, application-level files, and search paths for referenced files.
   - Upgrade old SMSs by including standard SMSs, copying from standard SMSs, or migrating to new releases. Copy visual data during upgrades.
   - Open, create, import .entity files, apply variables, and import/export object information.

3. **Tags**:
   - Manage tags list by adding, removing, renaming, undoing changes, using auto-tags, assigning based on visual model characteristics, exporting/importing, and managing via object information file.

4. **Forces List**:
   - Add, edit, or remove forces from the SMS.

5. **Object List**:
   - Copy the object list to the clipboard for external use.

The Simulation Object Editor focuses on simulation behavior edits, while visualization models are configured separately using Visual Model Editors and Simulation Object Type Mappings dialog boxes.

- **Simulation Object Editor (SOE) Capabilities:**
  - Configures 3D models and 2D icons for displaying simulation objects.
  - Edits particle systems; see 'Special Effects (Particle Systems)' chapter in the MAK ONE Applications Reference Manual.
  - Does not support adding/removing individual components or editing detailed entity parameters; requires manual configuration file editing for advanced tasks.
  - Expert menu contains unsupported features for highly knowledgeable users.

- **Starting the Simulation Object Editor:**
  - Windows: Launch from MAK Technologies > Simulation Object Editor.
  - Command-line (Windows/Linux):
    - Navigate to ./bin64.
    - Run `simulationObjectEditor options`.
    - Available command-line arguments include:
      - Specifying application data and data directories (`--appDataDir`, `--dataDir`).
      - Setting GUI language and layout (`-G/--locale`, `--gui`, `--layoutSettingsFile`).
      - Limiting entity textures (`--limitEntityTextures`, `--limitEntityTexturesExclusions`).
      - Setting GPU memory percentage (`--limitGpuMemoryPercentage`).

- **Preventing Crashes with High VRAM:**
  - Using `--limitEntityTextures`, `--limitTerrainTextures`, and `--limitGpuMemoryPercentage` can help prevent crashes due to high VRAM usage.

- **Memory Usage:** VR-Forces limits texture and buffer creation to a specified percentage of available video RAM.

- **Command Line Arguments:**
  - `--loadPlugin`: Loads a specific Simulation Object Editor plugin or XML file.
  - `-n`, `--notifyLevel` (0-4, default is 2): Sets the notification level for application messages.
  - `--settingsDirectory`: Specifies the directory to load UI and settings files from.
  - Shared data and settings directories:
    - `--sharedDataDir`: Specifies the shared data directory path.
    - `--sharedDataRoot`: Specifies the shared data root location.
    - `--sharedDataStem`: Specifies the shared data stem location.
    - `--sharedSettingsDirectory`: Specifies where shared settings are stored.
  - `-c`, `--showConsole`: Displays the console.
  - `--smsFile`: Loads a specific Simulation Model Set (SMS) file.
  - `--useUserSettingsDirectory`: Stores user settings in the user's login directory instead of the application's default.
  - `-v`, `--version`: Shows version information and exits.
  - `--visualTerrain`: Specifies the terrain used when displaying simulation objects.

- **Simulation Model Sets (SMSs):**
  - SMSs define simulation objects, tactical graphics, and other object models for VR-Forces simulations. Each scenario references one or more SMSs.
  - Base SMSs provided:
    - `base.sms`: Defines platforms and graphics used by other SMSs.
    - `EntityLevel.sms` (includes base): Defines entities, units, and other objects for entity-level scenarios.
    - `AggregateLevel.sms` (includes base): Defines units and other objects for aggregate-level scenarios.
  - Recommendations:
    - Keep default SMSs as reference model sets and avoid editing them directly.
    - Create new SMSs for editing entity models by including one of the provided SMSs, promoting desired objects to the new SMS.

VR-Forces provides three Simulation Model Sets (SMSs): `base.sms`, `EntityLevel.sms`, and `AggregateLevel.sms`. Both `EntityLevel.sms` and `AggregateLevel.sms` include `base.sms`, which contains essential platform files and graphics.

1. **Creating Custom SMSs:**
   - A custom standalone SMS for a new or enhanced object must contain all necessary files (e.g., OPE, entity, system, damage files).
   - This process can lead to file duplication and potential debugging issues if not done correctly.
   - Incorrect loading order of SMSs can cause customizations to be overridden.

2. **Using Included SMSs:**
   - Including one SMS within another gives the included SMS a higher priority.
   - Higher priority SMSs override parameters or files in lower priority ones, reducing file duplication and total footprint.
   - To include an SMS in another:
     - Open Simulation Object Editor
     - Go to File > Open Simulation Model Set
     - Select the parent SMS
     - Go to File > Properties
     - Click Add, then Browse for the SMS to include

3. **Read-Only Status for SMSs:**
   - Default VR-Forces SMSs are read-only to encourage users to create new SMSs for customizations.
   - To enable editing of objects in an SMS:
     - Click the "Enable Editing" button
     - Or, use the context menu

- **Editing Simulation Model Sets (SMS):**
  - To edit an SMS:
    - Create a new SMS that includes the current one to enable editing for this and future sessions.
    - For basic VR-Forces provided SMSs, it's recommended to create a new SMS.
    - Enable editing by clearing the 'Read Only' checkbox in the SMS Properties dialog box (File > Properties).

- **SMS Priority:**
  - Conflicts between multiple SMSs are resolved based on priority.
  - Included SMSs:
    - Higher level SMS has higher priority.
    - Objects in higher priority SMS override those in lower priority SMSs with the same object type.
  - Multiple SMSs (not included):
    - Order of loading determines priority. Later loaded SMS takes precedence for same object types.

- **Lua Scripts in Included SMSs:**
  - System scripts follow the same priority rules as objects.
  - Higher priority SMS's scripts supersede lower priority ones, affecting all simulation objects regardless of their SMS origin.

- **Lua Scripts in Included SMSs:**
  - Promoted scripted tasks go to highest-priority SMS.
  - Editing an included SMS's script saves it to the highest-priority SMS, keeping original version intact.
  - Edit scripts in their own SMS for global changes.

- **Application-Level Files in Included SMSs:**
  - One copy of application-level files (e.g., commModelParams.mtl, gui/initialCreateMenuConfiguration.xml) needed per child SMS.
  - Every SMS requires `vrfSim.opd`.

- **Search Paths for Referenced Files in an SMS:**
  - Search paths follow SMS priority; lower-priority SMSs search higher ones.

- **Promoting a Model to the Parent SMS:**
  - Included objects are listed but not editable. Promote using 'Model > Promote' or button.
  - Promoted objects override included ones and become fully editable in parent SMS.

- **Viewing and Promoting Included Objects:**
  - Use 'Preferences > Show Included Simulation Objects' to view and promote objects from included SMSs.

- **Promoting a System:**
  - To edit a system from an included SMS, promote it to the loaded SMS.
  - Steps:
    - Load the parent SMS.
    - Show included objects (Preferences > Show Included Simulation Objects).
    - Select the system you want to promote.
    - Click 'Promote' (Figure 543) or choose 'System > Promote'.

- **Hiding Included Objects:**
  - By default, the editor shows objects from included SMSs. You can hide them for a cleaner view.
  - Toggle visibility of included objects: Preferences > Show Included Simulation Objects.

- **Visual Model Definitions:**
  - VR-Forces stores visual model definitions in different directories based on the loaded SMS:
    - Base, EntityLevel, or AggregateLevel SMSs use `./SharedData/18/latest/ModelData/Configuration/Definitions`.
    - New SMSs save definitions in `./data/simulationModelSets/<sms>/gui/visuals`.

- **User-Created Visual Definition Files:**
  - While using the Simulation Object Editor is recommended, you can create new model/element definitions using Visual Model Editors and save them to separate files.
  - When loading default SMSs, all definition files (including user-created) are loaded. However, changes are only saved back to default files, not user-created ones.
  - Recommended workflow for reconciling new definitions:
    - Save new definitions in default directories.
    - Open the affected SMS in the Simulation Object Editor.

1. **Adding New Definitions to SMS:**
   - Confirm new model/element definitions are loaded by the Simulation Model Set (SMS).
   - Save the SMS to store new definitions in default definition files.
   - Delete individual definition files created earlier to avoid conflicts.
   - Open a scenario using your SMS, then load the .hier file for your SMS in Visual Model Editors dialog box.
   - Import the model/element definition file you want to add new definitions to, from the `/data/simulationModelSets/<sms>/gui/visuals` directory of your SMS.
   - Add new definitions, export them to the imported definition file, and confirm they're available in the Simulation Object Editor.

2. **Upgrading Old Simulation Model Sets:**
   - The Simulation Object Editor has an upgrade tool for SMS created in VR-Forces 4.4 or later.
   - Upgrade process varies based on how the old SMS was created:
     - If it includes a standard SMS (EntityLevel.sms or AggregateLevel.sms), the upgrade tool copies all files from the old SMS, including visual data if specified.
     - If it was copied from a standard SMS, or is a new SMS that didn't copy/include standard SMS, the upgrade process considers these possibilities and handles them accordingly.
   - For SMS created in VR-Forces 4.3.x or earlier, manual migration may be required.

**Key Points:**
- Save SMS after adding new definitions to store them in default definition files.
- Delete individual definition files created earlier to avoid conflicts with the SMS.
- Use the recommended workflow for adding new definitions to an SMS.
- The upgrade tool considers different scenarios based on how the old SMS was created.
- Manual migration may be required for SMS created in VR-Forces 4.3.x or earlier.

**Additional Points Merged into Summary:**
- Ensure you only edit one element definition file at a time when adding new definitions.
- When creating a new SMS, load previously created definition files; additional files must be imported manually.
- The upgrade tool assumes no changes were made to the included standard SMS if the old SMS was created by including it.

  - Identical files across all three are copied to the new SMS.
  - Changes exclusive to the old SMS or new standard SMS are retained.
  - Old SMS-exclusive files are copied over. If removed from the new standard SMS but changed, it's copied; otherwise, it's removed.
  - New files in the new standard SMS are added to the new SMS.
- **Complex Upgrades:** Upgrading copied SMSs (from EntityLevel.sms or AggregateLevel.sms) is complex. The tool preserves old SMS changes but may require manual file comparison for new standard SMS improvements.
- **Platform Changes:** Use "Apply Platform Changes" in the Simulation Object Editor to capture platform file changes.
- **Visual Data Copying:** For VR-Forces 4.5 or later, visual data can be copied if specified during upgrade.
- **Reporting:** The tool provides a post-upgrade report of conflicted, added, and removed files.

**Key Points:**
1. File comparison and handling based on changes across SMSs and standard SMSs.
2. Complexity in upgrading copied SMSs.
3. Handling of platform file changes.
4. Optional visual data copying.
5. Post-upgrade reporting.

The provided text outlines the process of upgrading Simulation Model Sets (SMS) in VR-Forces software:

1. **Purpose of the Report:** Identify files requiring manual upgrades.

2. **Handling Special SMS Cases:**
   - If an SMS was created by copying or including only `base.sms`, selectively copying from standard SMSs, or creating all files, no upgrade reference exists.
   - The upgrade tool copies non-visual data files to the new SMS.

3. **Copying Visual Data:**
   - In VR-Forces 4.5 and later, visual data can be SMS-specific.
   - During upgrade, choose to copy old SMS's visual data or use the new version's visual data.
   - Copying visual data may increase load time.

4. **Upgrade Process:**
   - Open the Simulation Object Editor, select "File > Upgrade Old Simulation Model Set", and follow prompts.
   - The process varies based on how the old SMS was created (copying standard SMSs, including them, or creating original files).
   - If the old SMS was created with VR-Forces 4.5 or later, decide if you want to copy visual data.

5. **Report Generation:** After upgrading, a report is generated for manual review (e.g., system definitions and OPE files).

1. **Manual SMS Migration (VR-Forces 4.3.x or earlier):**
   - Copy customized files or recreate changes in a new SMS.
   - Simulation Object Editor manages:
     - .entity files for edited simulation objects.
     - Visual definition files and entity type mappings.
   - Other customizable files (system definitions, damage/ammo select files, scripts) require manual handling.

2. **Upgrading Old Simulation Model Sets (SMSs):**
   - Copy .entity files to new SMS for simulation object availability in the engine.
   - Edit 2D/3D models and copy changed files to the new SMS.
   - Export/import scripts between releases using provided processes.
   - Review release notes for migration challenges, especially for older legacy SMSs.

3. **Major SMS Divergence Points:**
   - VR-Forces 4.2: Default.sms reorganized as base.sms and EntityLevel.sms.
   - VR-Forces 4.5: Visual model files restructured.
   - VR-Forces 4.7: Weapon system and damage system file changes for SOE editing.

4. **Migrating Pre-4.7 Weapon and Damage Systems:**
   - Options:
     - Copy old system files (incompatible with SOE editing).
     - Use SOE to edit/create new systems matching older customizations.
   - Refer to VR-Forces Migration Guide for more details on weapon and damage system changes.

5. **Additional Considerations:**
   - When upgrading, a report is generated after the upgrade process runs.
   - The SMS upgrade tool does not migrate weapon and damage systems from pre-4.7 format to 4.7 or later due to file structure changes.

- **Articulated Parts Enhancement (VR-Forces 4.8):**
  - Entities' articulated parts can be added/adjusted in the Simulation Object Editor.
  - Appearance of unmanaged articulated parts can be set using the 'Set' menu.
  - To use this feature, update .entity, .sysdef, and .ope files as per VR-Forces Migration Guide.

- **Upgrading Old Simulation Model Sets (SMSs):**
  - Learn about editing articulated parts in the Simulation Object Editor from "66.3. Editing a Model's Articulated Parts" on page 1353.

- **Opening and Creating New SMSs:**
  - To open an SMS:
    - Choose 'File' > 'Open Simulation Model Set'.
    - Select the desired SMS.
    - Click 'Open'.

  - To create a new SMS:
    - Recommended method: Create a new SMS based on an existing one (includes models working in VR-Forces) and customize it.
      - Steps:
        - Choose 'File' > 'New Simulation Model Set'.
        - Select 'New Simulation Model Set'.
        - Click 'Next', then select 'Extend Existing Simulation Model Set'.
        - Click 'Next', select the base SMS, and click 'Next' again.
        - Enter a name for the new SMS in the 'File name' box.
        - Click 'Finish'.
        - Edit the SMS as desired.
        - Choose 'File' > 'Save Simulation Model Set'.

    - Alternative method: Create a new SMS with minimal objects using 'base.sms'.
      - Steps:
        - Choose 'File' > 'New Simulation Model Set'.
        - Select 'Minimal Objects'.
        - Click 'Next', then select 'Extend Existing Simulation Model Set'.
        - Click 'Next', select 'base.sms', and click 'Next' again.
        - Enter a name for the new SMS in the 'File name' box.
        - Click 'Finish'.
        - Edit the SMS as desired.
        - Choose 'File' > 'Save Simulation Model Set'.

- **Creating a New Simulation Model Set (SMS):**
  - Open the 'New Simulation Model Set' dialog box via `File > New Simulation Model Set`.
  - Select 'New Simulation Model Set', then choose 'Minimal Simulation Model Set'.
  - Enter a name for the new model set and click 'Finish'.
  - Load basic object information, edit as desired, then save using `File > Save Simulation Model Set`.

- **Creating a New SMS by Copying an Existing SMS:**
  - Open the 'New Simulation Model Set' dialog box via `File > New Simulation Model Set`.
  - Select 'Copy Existing Simulation Model Set', choose a model set to copy.
  - Enter a name for the new model set and click 'Finish'.
  - Load information from the source model set, make changes as needed, then save using `File > Save Simulation Model Set`.

- **Importing .entity Files into an SMS:**
  - Open the 'Add Entity File' dialog box via `File > Add Entity File`.
  - Select the desired file and click 'Open' to copy it into the SMS.

- **Applying New/Updated Variables in SMS:**
  - Open the 'Regenerate SMS Files' dialog box via `File > Regenerate SMS Files` to apply updates automatically.
  - Check boxes for 'Entity File Updates' (adds new variable bindings to .entity files) and/or 'OPE File Updates' as needed.

- **System File Updates:** Applies changes to platform file descriptors and updates system files with new variables.
- **Object Information Export/Import:**
  - Exports all simulation objects in an SMS to a CSV file for editing:
    - Object type enumeration (not recommended to edit)
    - Name
    - Short name
    - Filtering tags
  - Imports updated object information back into the SMS using the Model > Import Object Information menu.
- **Editing Tags List:**
  - Adds, removes, and renames tags for organizing simulation objects and systems:
    - Stores tags in specific CSV files under ./data/simulationModelSets/<sms>/gui/.
    - New tags can have ranks to determine display order and preference:
      - Top-level tag rank orders listing
      - Non-top-level tag rank determines inclusion preference
      - Maximum displayed tags (default: 15) configurable by changing 'myShowTopCategories' value in ./appData/settings/vrfGui/default_PaletteInformationSettings.pisx.

- **Adding a Tag:**
  - Open 'Select Tag Icon' dialog.
  - Select an icon file and click 'Open'.
  - Click 'OK'.
  - If not assigned to a simulation object, it won't be saved with the simulation model set.

- **Removing a Tag:**
  - Open Tags Editor (Model > Tags).
  - Select the tag and click 'Remove'.
  - Click 'OK' to confirm.
  - Save changes to make them permanent.

- **Renaming a Tag:**
  - Open Tags Editor (Model > Tags).
  - Select the tag and click 'Edit'.
  - Enter the new name and click 'OK'.
  - Click 'OK' again to close the editor.
  - The old name remains until the simulation model set is saved. Assigning an object to the old name retains it.

- **Undoing Tag Changes:**
  - Choose Model > Revert Tags.
  - Confirm with 'Yes'. This reverts changes made since the last save of the simulation model set.

- **Using Auto Tags:**
  - Automatically assigns tags based on object type from `./appData/settings/simulationObjectEditor/autoTagInformation.csv`.
  - Apply to entire SMS: Model > Apply Auto Tags.
  - Apply to specific model: Select the model and click 'Apply Auto Tags' button above the Tags window.

- **Assigning Tags Based on Visual Model Characteristics:**
  - Choose Model > Assign Tags Based on Visuals.
  - Process can take a long time. Use filters/check boxes to limit models processed.

- **Tag Management:**
  - **Initiate Process:** A message explains the process; click 'Yes' to open 'Select Visual Models' dialog.
  - **Select Objects:** Choose objects (not inherited from parent SMS); use filter or checkboxes ('Select All', 'Clear All') for selection.
  - **Process & Confirmation:** SOE processes selected objects and assigns tags, displaying a message during processing until completion.
  - **Export Tags:**
    - Open Tags Editor, click 'Export'.
    - Specify file name, save. Exported CSV includes tags, priorities, icons (no object info).
  - **Import Tags:**
    - Open Tags Editor, click 'Import'.
    - Select tag file, open. Imported tags do not include any information about simulation objects.
  - **Manage Tags via Object Information File:**
    - Export object list as CSV.
    - Edit tags in spreadsheet.
    - Import edited object information file into the SMS.

- **Force Management:**
  - **Add Force:**
    - Open Forces Editor, click 'Add'.
    - Set force name, color, country (optional), hostile forces, and include in dialogs checkbox. Click OK, then Close.
  - **Edit Force:** Similar to adding a force; can also change hostility at runtime via Hostility Matrix.

The VR Forces User Guide provides instructions on managing forces and editing simulation object parameters using the Simulation Object Editor.

**Managing Forces:**
- Each force has a unique number.
  - **Editing:** Open 'Forces Editor', select force, click 'Edit', then modify:
    - Name
    - Color (using color picker)
    - Hostility relationships (select forces to be hostile towards)
    - Dialog list inclusion (check/uncheck 'Include in Dialogs')
  - **Removing:** Open 'Forces Editor', select force, click 'Remove'
- Removed forces remain assigned to simulation objects but are not colored and cannot create new objects.

**Copying Object List:**
- Copy object list to clipboard for use in word processing applications: 'Edit > Copy Names in List to Clipboard'

**Editing Simulation Object Parameters (Generic):**
  - Select an object, then edit:
    - Tags
    - Object type enumeration
    - Name
    - Description
    - Creation settings:
      - Whether the object can be created
      - Object creation palette
      - Default user-created overlay
    - Platform
    - Country list
    - Icon lists
  - **Undoing Changes:** Use 'Undo'
  - **Reverting Inherited Parameters:** Available for inherited objects

**Editing Simulation Object Visual Model:**
  - Change:
    - 3D/colorized model
    - 2D icon (using font/image)
    - Spot report model
    - Add new visual models/images
  - Display details about the visual model
  - Use render settings

- **Editing Common Parameters:**
  - Applies to various object types like simulation objects, tactical graphics, cultural features, etc.
  - Default Simulation Model Sets (SMSs) are read-only; create copies or new ones for editing.
  - Unapplicable object parameters are blank or uneditable in the Simulation Object Editor.

- **Object Selection and Editing:**
  - Select an object from the list, optionally filtering by tags.
  - Edit object's tags using the 'General' tab and 'Add/Remove' button on the Simulation Object Editor.
  - Change object type (DIS/RPR enumeration) and matching type.

- **Visual Models Management:**
  - Change visual model type.
  - Specify visual markings.
  - Import, prune, export, or reload visual models in the VR-Forces GUI.

- **Simulation Object Creation and Management:**
  - Create a new simulation object by copying or inheriting from an existing model.
  - Delete an object model.
  - Create a simulation object group (SOG) with specified connection settings.

- **Tactical Graphics Editing:**
  - Edit menu icon, default values, editable properties, and visual model for tactical graphics.

- **Template Creation and System Editing:**
  - Create a template.
  - Edit systems in the simulation object editor by performing actions like creating new ones, editing probability tables, deleting or reverting systems.

- **Model Enumeration:**
  - When creating a new model from an existing one, the editor automatically increments its enumeration.
  - You can manually change or use a different enumeration via the 'Change Object Type' dialog box.
  - The displayed enumeration is a 7-digit DIS or RPR FOM value used by VR-Forces.
  - Wildcards are not permitted in object types but can be used in matching object types.
  - Changing an object's enumeration affects all subordinate types unless the 'Apply Changes to All Matching Subordinate Types' box is cleared.

- **Object Name and Description:**
  - Change an object's name by editing the 'Long Name' field on the General tab.
  - The marking text next to a 2D icon is based on the 'Short Name'.
  - An optional description field for objects is available in VR-Forces.

- **Object Creation Control:**
  - You can control whether a simulation object appears on an object creation palette.

- **Object Creation Control:**
  - Certain objects, such as missiles, aren't created via the palette; they're dynamically added.
  - Enable/disable creation of an object:
    - Select the object in the object list.
    - Go to the General tab.
    - Check or uncheck the "Can Create Object" box.

- **Object Creation Palette Specification:**
  - Assign an object to a specific creation palette:
    - Select the object in the objects list.
    - Go to the General tab.
    - Choose the desired palette from the Palette list.

- **Default Overlay Assignment:**
  - Objects are initially placed on overlays based on their type. You can assign a user-created default overlay:
    - Select the object in the objects list.
    - Go to the General tab.
    - In the Keywords box, enter "overlay=name" (replace 'name' with your custom overlay).

- **Platform Specification:**
  - The platform for existing or copied objects cannot be changed.
  - Specify a platform only for new models not created from existing ones.

- **Country List Editing:**
  - Assign countries to vehicles, humans, and cultural features for scenario-specific palettes:
    - Select the object in the object list.
    - Go to the General tab.
    - In the Countries pane, click the Add button and select desired countries via the "Select Countries" dialog.
  - Quickly clear the country list when copying a model.

- **Clearing Countries from an Object:**
  - On the General tab, click the 'Clear' button above the Countries window.

- **Creating and Managing Custom Icon Lists:**
  - **Creation:** Edit > Icon Lists, then follow these steps:
    - Click 'Add'.
    - Enter a name for the new list.
    - Click 'OK'.
    - Click 'OK' in the Icon Lists Editor.
  - **Renaming:** Edit > Icon Lists, then follow these steps:
    - Select the icon list to rename.
    - Click 'Edit'.
    - Enter a new name.
    - Click 'OK'.
    - Click 'OK' in the Icon Lists Editor.
  - **Removal:** Edit > Icon Lists, then follow these steps:
    - Select the icon list to remove.
    - Click 'Remove'.
    - Click 'OK'.

- **Assigning Icons to Objects in an Icon List:**
  - For each object:
    - Select it in the objects list.
    - Go to the General tab.
    - Choose the desired icon list from the drop-down menu.
    - Click the 'Browse' button, select an image (PNG, SVG, JPG, BMP), then click 'Open'.
  - Save the Simulation Model Set.

- **Using an Alternative Icon List:**
  - Go to Settings > Application, then follow these steps:
    - Select the 'GUI Settings' page.
    - Choose the desired icon list from the 'Default Icon List' drop-down menu.

- **Force Color Display:** Optionally show a colored square behind an image to indicate its force.

- **Undoing Changes to an Object:**
  - Revert changes to an object's original configuration before saving the simulation model set (SMS).
  - Can be done at any time, regardless of other changes made.
  - Steps:
    - Select the object in the object list.
    - Choose Model > Revert Model.

- **Reverting Inherited Objects' Parameters:**
  - Create a copy (child) from another object (parent) with inherited parameters.
  - Reset child's parameter to parent's original value, not current value.
  - Steps:
    - Select the object in the model list.
    - Click 'Revert to Parent' button next to the desired parameter.

- **Editing Simulation Object Visual Model:**
  - Change 2D icon or 3D model using the Simulation Object Editor.
  - Edit visual model parameters on the Visual Models Panel, which includes features like:
    - Edit Visual/Wake Model
    - Visual Effects
    - Switch Node States
    - Environment Settings
  - Steps:
    - Select the object in the object list.
    - Make changes in the Visual Model Panel.

- **Select Model Set**: Choose the model set you want to edit from the Visual Model group box.

- **Edit 3D Model/Colorized Model**:
  - Click 'Edit' in the Visual Model panel.
  - Select 'Use 3D Model'.
  - Choose your desired 3D model from the list, filtering by entity type if needed.
  - Click 'OK' to apply changes.

- **Change 2D Icon using Font**:
  - Select the object, choose '2D Icons', then click 'Edit'.
  - Select 'Use MIL-STD Font', pick an icon glyph, and optionally adjust parameters.
  - Click 'OK'.

- **Regenerate Spot Report Definitions**: After changing a 2D icon, manually update spot report definitions via `File > Regenerate Spot Report Definitions`.

- **Change 2D Icon using Image**:
  - Select the object, choose '2D Icons', then click 'Edit'.
  - Select 'Use Image', pick an image for the desired force(s), and apply changes.

- **Add New Models/Images**: You can add new models or images (see "65.2.5 Adding a New Visual Model or Image" on page 1317).

- **Adding a New Visual Model or Image:**
  - Select the desired image.
  - Click 'OK' to confirm the selection.
  - Click 'OK' again to close the 'Modify Visuals' dialog box.

- **Editing Common Parameters of Simulation Objects:**
  - **Spot Report Model:**
    - Select the simulation object.
    - Choose a spot report option in the Model Sets list.
    - Click 'Edit' to open an appropriate dialog box for the model type.
    - Change the model (3D/2D) as described in the provided links.

  - **Adding a New Model or Image:**
    - Select the object and the desired model set.
    - For 3D models:
      - Click 'Edit' to open the 'Set 3D Models Visuals' dialog box.
      - Click 'Add' to open the 'Model Definition' dialog box.
      - Choose the file for the new model.
      - Enter a name for the model definition in the 'Model Definition Name' dialog box.
      - Click 'OK' twice to close both dialog boxes.

    - For 2D icons (images):
      - Click 'Edit' to open the 'Set 2D Icons Visuals' dialog box.
      - Select the 'Use Image' option.
      - Edit the desired force by clicking its 'Edit' button, which opens the 'Select Model Definition' dialog box.
      - Choose the file for the new image.
      - Enter a name for the model definition in the 'Model Definition Name' dialog box.
      - Click 'OK' twice to close both dialog boxes.

- **Supported File Types:** Models or images that VR-Forces supports.

- **Adding Model Definitions Independently:**
  - Open "Add Model Definition" dialog via "Edit > Add Model Definition".
  - Select a supported model/image file, which sets the filename attribute.
  - Enter a name for the model definition and confirm.

- **Displaying Details about the Visual Model:**
  - View selected simulation object's model in Visual Models Panel.
  - Customize display:
    - Bounding volumes: Show/hide using preferences.
    - Environment settings: Adjust time of day, view magnification, wind speed, water quality.
    - Markers and labels: Display sensor/weapon position markers, show as 2D only.
    - Visual effects: Enable/disable shadows, trailing effects, smoke, flames.
    - Model sets: Choose primary or spot report model set for display.
    - Switch node states: Display different switch nodes, including articulated parts.

- **Editing Common Parameters:**
  - Change view of a model:
    - Perspective view: Default.
    - Specific sides: Select from View list (left, front, top).
  - Select model sets for display: Choose from Model Sets list.
  - Display bounding volume: Enable via Preferences > Show Bounding Volumes.
  - Display switch node states: Use "View > Switch Nodes States" or button, select desired damage/articulated part states.

- **Markers and Marker Labels:**
  - Display model support points as markers in 2D or 3D.
  - Add text labels to identify markers.
  - Toggle markers on/off: Preferences > Show Markers.
  - Toggle marker labels on/off: Preferences > Show Marker Labels.
  - Switch between 2D and 3D markers: Preferences > Show Markers as 2D.

- **Environment Settings:**
  - View how changes in environment (time of day, view magnification, wind, choppiness, ocean quality) affect models.
  - Access Environment Settings via View menu or button.

- **Visual Effects for Models:**
  - Display various effects like dust clouds, contrails, shadows, etc. based on model type.
  - Adjust speed of moving models using Speed slider in Visual Effects dialog box.
  - Access Visual Effects via View menu or button.

- **Render Settings:**
  - Access render settings via System > Render Settings.
  - Options include:
    - Wireframe rendering mode: displays polygons making up the simulation object.
    - Performance statistics overlay: shows information about the simulation object.
    - Developer debug overlay: tests changes to visual features using ImGui API.
    - Channel projection resize policy (fixed, horizontal, vertical): determines channel behavior during window resizing.
    - Occluded symbol opacity.
    - Crepuscular rays: simulates sunbeams beaming through clouds.
    - Depth of field autofocus.
    - Droplets scale.

- **Water Droplet Size:**
  - Adjustable to control splash effects and sea spray.

- **Horizon-Based Ambient Occlusion (HBAO):**
  - Enhances realism by approximating ambient light's impact on objects.
  - Parameters:
    - Radius: Distance from occluding objects where the effect is visible. Higher values extend the effect further.
    - Bias: Reduces artifacts caused by thin geometry when set to higher values.
    - Exponent: Controls the intensity of the HBAO effect. Higher values create a more intense effect.
    - Scale Small AO & Large AO: Adjusts the intensity of the HBAO effect on close and distant objects, respectively.
    - Depth Clamp Mode: Border or Edge (reduces false occlusion along screen edges).

- **Occlusion Queries:**
  - Improves frame rate in complex terrain simulations by checking object visibility.

- **Alpha to Coverage:**
  - Enhances rendering of transparent objects like grass, trees, and fences.
  - Slight performance improvement with dither shader option available.

- **Debug Visuals:**
  - Shader debugging capabilities within lighting shaders for parameter-based fragment color changes.

- **Changing Visual Model Type:**
  - Alters the 3D model display for generic models in simulation objects. Specific models are unaffected but may change how they're displayed.

- **Surface Models Display:**
  - Background enables viewing wakes and other effects.

- **Editing Common Parameters (Simulation Object's Visual Model):**
  - Change visual model type using Advanced Visual Model Editing dialog box.
  - **Visual Markings:**
    - Applied via texture mapping, altering colors, logos, designs, or markings on vehicles.
    - Options:
      - Specific: Use one of the configured markings.
      - Random (Simple/Weighted): Choose randomly from available markings. Weighted options prioritize based on metadata file order.
      - Variant: Apply a specific pattern, like country, for subvariant markings.
      - Subvariant: Define how the variant is displayed, e.g., insignia.
      - Unused: Do not show the option in VR-Forces.
    - Run-time marking changes and texture map configuration detailed separately.

- **Viewing Visual Markings:**
  - Simulation Object Editor displays available visual markings on a selected simulation object.

The VR-Forces User Guide outlines procedures for managing visual markings and visual models in a simulation object editor (SOE). Here's a concise summary:

1. **Visual Markings:**
   - Open the Visual Markings dialog box to select specific marking options for each supported type.
   - Choose between using a specific marking or assigning markings randomly, with weighted random options favoring those at the top of the list.
   - Apply changes by clicking OK; canceling discards modifications.

2. **Setting Visual Markings:**
   - Select the simulation object and click the 'Visual Markings' button in the Visual Model panel to open the dialog box.
   - For each marking type, choose a specific marking or random assignment.
   - Click OK to apply changes.

3. **Importing Visual Models:**
   - Import visual models (element definitions, model definitions, and object type mappings) from a directory into an SMS.
   - The import operation replaces matching definitions in the SMS and imports all leaf files in the selected directory.

4. **Pruning Visual Models:**
   - Prune visual models to remove duplicates, improving SOE load time and scenario loading speed.
   - Only SMS-specific definition files are affected; additional definition files saved from the Visual Model Editors dialog box remain untouched.

5. **Exporting Visual Models:**
   - Export updated visual models (element definitions, model definitions, and object type mappings) to a specified directory for archival purposes.
   - Only SMS-specific definition files get exported; user-created leaf files are not restored but included in the exported SMS-specific files.

- **Reloading Visual Models:**
  - Update visual models associated with simulation objects in open scenarios.
  - Refresh models without shutting down VR-Forces by choosing Settings > Reload Visuals.

- **Creating a New Simulation Object:**
  - Use an existing object as a template or build a new one.
  - Choose Model > New Model, then:
    - Select platform type.
    - Optionally, choose a template specific to the selected platform type.
    - Name the entity.
    - Select visual models (specific model or Closest Match).
  - The Simulation Object Editor adds a new entry with default values for fields.
  - Edit enumeration if needed.
  - Specify 2D and/or 3D visual models.
  - Set appropriate values for object parameters.
  - Type a name for the object's label in the Short Name text box.
  - Optionally, add movement systems, damage models, weapon systems, or sensors.
  - Save the simulation model set.

- **Creating a Copy of an Existing Model:**
  - Select the source object and choose Model > New Model from Existing (Copy).
  - Enter a name for the new model and optionally edit the enumeration.
  - The new model is added to the list with the original's characteristics, incremented enumeration if not edited.
  - Edit parameters to customize the new simulation object.
  - Save the simulation model set.

- **Inheriting a New Model from an Existing Model:**
  - Create a new model that inherits behavioral characteristics and systems from an existing one (parent model).
  - The child model starts with the parent's properties, allowing for customization without duplicating all features.

- **Customizing and Reverting Object Parameters:**
  - Customize object parameters as required.
  - Revert changes to inherited settings using "65.1.13 Reverting an Inherited Objects Parameters" on page 1311.

- **Creating a New Simulation Object Model by Inheritance:**
  - Select the source object in the list.
  - Choose "Model > New Model from Existing (Inherit)" to open the Create New Model dialog box.
  - Enter a unique name, optionally edit enumeration, and click OK.
  - Edit parameters for the new object's characteristics.
  - Save the simulation model set.

- **Deleting an Object Model:**
  - Select the object in the list (multiple selection allowed).
  - Choose "Model > Delete Model" or press Delete.

- **Creating a Simulation Object Group (SOG):**
  - Start the Simulation Object Editor, load the SMS.
  - Choose "Model > New Object Group", enter a name, and click OK.
  - Specify tag, creation palette options, and other generic information.
  - Optionally, change creation options and altitude offset.
  - Click "Launch Object Group Editor" to open VR-Forces with a green terrain grid.
  - Add objects to the SOG using palettes, save (File > Save Object Group), or save and exit (File > Save Object Group and Exit).

- **Setting Simulation Connection when Creating an SOG:**
  - Default connections: DIS localhost for EntityLevel.sms, HLA 1516 Evolved RPR 2.0 with MAK extensions for AggregateLevel.sms.
  - Change connection if needed (Aggregate-level scenarios must use the latter).

- **Setting Simulation Object Group Connection:**
  - Open 'Choose Connection' dialog box from Edit > Object Group Connection.
  - Select desired connection and click OK.

- **Editing Tactical Graphics:**
  - Add/Edit tactical graphics like simulation objects; create new using basic types (point, route, area, symbol, box, or circle).
  - Change default characteristics; VR-Forces users can edit specific characteristics in the front-end.
  - Specific procedures for tactical graphics are detailed in this section.

- **Editing Tactical Graphics Menu Icon:**
  - On General tab, use Browse button to select icon or Delete button to remove it.

- **Setting Default Values for Tactical Graphics Properties:**
  - Select graphic, click Edit button, set default values for enabled properties.
  - Disabled properties are not applicable to the selected graphic.

- **Specifying Tactical Graphic Properties Editable in Front-End:**
  - Use keywords (arrow, arrowsize, canorient, defaultlength=<num>, defaultwidth=<num>) to determine editable properties.

- **Tactical Graphic Properties (Edit Style Dialog Box):**
  - *Size*: Specify starting length with 'l' keyword, and allow extrusion of width and height.
  - *Appearance*: Change fill with 'fill' keyword and line style with 'penstyle'.
  - *Altitude*: Set initial altitude with 'initialaltitude=<num>', maximum points with 'max=<num>', minimum points with 'min=<num>', or disable altitude setting with 'noaltitude'.
  - *Overlay & Style Editing*: Define default overlay with 'overlay=<name>' and allow/disallow style editing with 'nostyle'.
  - *Drawing Mode*: Enable freehand drawing with 'freehand' keyword.

- **Editing Visual Model for Tactical Graphic:**
  1. Select the graphic, then choose the model set.
  2. Click 'Edit' to open the respective dialog box (Edit Tactical Graphics or Select Schema/Texture).
  3. For schemas (vector graphics), select schema and click OK.
  4. For textures (raster images), browse for model definition, specify width & height in pixels, then click OK.

- **Editing Limitations**: Style properties cannot be edited if a texture is used for the graphic.

- **Areal Graphic Outline:** Specify texture usage for area outline; default is regular line.
- **Templates:**
  - Base new simulation objects on existing ones or templates.
  - Templates are generic, broadly applicable, and useful for complex units.
  - Create template: select object > Model > Make Template. Edit as needed.
- **Simulation Object Editor (SOE) Systems:**
  - Create/edit systems with varying support types.
  - General tab shows:
    - Name & description
    - Supported entity kinds
    - Used objects (read-only)
    - Parameters (read-only)
    - Tags
  - Additional tabs for specific system parameters, e.g.:
    - Weapon: Targets (hit probabilities, ammunition)
    - Damage: Damage (damage types, power types)
    - Munitions: Detonation (supported power types)
- **New Systems:**
  - Create by copying existing systems or using templates.
  - Templates represent system types with common parameter sets.
  - Choose method based on estimated post-creation editing needed.

- **Copying an Existing System:**
  - *Similar to existing system:* Copy and edit parameters.
  - *Steps:*
    - Select the 'Systems' tab, then choose the system to copy.
    - Go to 'System > New System from Existing'.
    - Enter a new system name and filename, then click OK.

- **Creating a New System from a Template:**
  - *Not similar to existing systems:* Create from template.
  - *Steps:*
    - Choose 'System > New System'.
    - Select the desired system type and template.
    - Enter a new system name and filename, then click OK.
    - Edit the parameters of the new system.

- **Editing Probability Tables:**
  - Some systems (weapon/damage) use probability tables: range lists (step functions) or coefficient lists (continuous functions).
  - *Steps:*
    - Create a table for probabilities.
    - Edit it directly or graphically.

- **Hit Probability Curve:**
  - Decreases smoothly along a curve, not at fixed intervals.
  - Displays as a straight line if only two points are provided.

- **Editing Range List Probability Table:**
  - Add new range values using the 'Add' button above the table.
    - Enter the new range value in the 'New Range' dialog box and click OK.
  - Edit existing range values using the 'Edit' button or double-clicking the range.
    - Modify the range value in the 'Edit' dialog box and click OK to update the entire column. The table is automatically resorted if necessary.

- **Editing Range List Graph:**
  - Change range values and percentages by dragging the corresponding lines on the graph.
    - Hover over the graph with the mouse cursor, which changes to cross-hairs, then hold down the mouse button and drag the line to the new value. The table updates accordingly.
  - Each parameter type has its own graph, distinguished by color.
    - Overlapping graphs may occur depending on range settings.

- **Editing Coefficient List Probability Table:**
  - Add a new coefficient column using the 'Add' button above the table.
    - A new column with a predetermined coefficient value (e.g., r^4) is inserted into the table.
  - Edit probabilities for existing coefficients by selecting the probability value and typing in the new value.

- **Changing Color of Probability Graph Line:**
  - Select the parameter label below the graph to open the color picker dialog box.
    - Choose a desired color from the palette to change the line's color on the graph.

- **Changing Probability Table Type:**
  - Switch to Coefficient List: Click 'Coefficient List' button, confirm.
  - Switch to Range List: Click 'Range List' button, confirm.

- **Managing Systems:**
  - Delete a system: Select it, choose 'Delete System', save SMS.
  - Revert changes: Select system, choose 'Revert System', save SMS.

- **Editing Simulation Object Parameters (EntityLevel.sms):**
  - Edit Bounding Volume (Size), Display Bounding Volume, Specify Support Points.
  - Exclude Entities from Batch Updates, Edit Behavioral Parameters, Add/Configure Geometry.
  - Configure Cultural Features, Ground Clamp them, Set Entity Properties for Front-End Editing.
  - Edit Lifeform's Visual Model and Animation, Set Default Appearance.

- **Editing Additional Object Details:**
  - Edit Sensor Signatures, Articulated Parts (Add, Edit, Animate, Display Muzzle Flashes, Remove).
  - Manage Systems (Add, Select Damage/Movement Models, Edit Properties, Remove, Replace).
  - Create/Edit Munitions, Configure Wakes, Create Randomized Objects, Script Entity Movement.

- **Bounding Volume Setup:**
  - Set manually, calculate for a specific entity/model, or all entities.
  - Used by the simulation engine, not the same as the selection box.
  - Option to exclude individual entities from global updates.

- **Manual Bounding Volume Change:**
  - Select entity > Go to 'Physical' tab > Modify values in 'Size/Supports' section.

- **Bounding Volume Calculation:**
  - For an entity: Click respective buttons ('Calculate Support Points and Bounding Volume', or 'Calculate Bounding Volume') in the 'Size/Supports' section.
  - For all entities: Use 'Model' menu > 'Check Bounding Volume and Support Points'.

- **Displaying Bounding Volume:**
  - Run VR-Forces at least once > Select entity > Choose '3D Models' from Model Sets list > Preferences > 'Show Bounding Volumes'.

- **Support Points (Ground Contact Locations):**
  - Set manually, calculate based on the model, or for all entities.
  - Manual: Select entity > Go to 'Physical' tab > Enter values in 'Size/Supports' section.
  - Calculation: Click respective buttons ('Calculate Support Points and Bounding Volume', or 'Calculate Support Points') in the 'Size/Supports' section.

- **Exclude Entities from Batch Updates:**
  - Select entity > Go to 'Physical' tab > Check 'Exclude From Batch Update' box in 'Size/Supports' section.

- **Behavioral Parameter Editing (Sensor Signature):**
  - Edit parameters affecting simulation object behavior, specifically its sensor signature distance.

- **Sensor Systems:** Control simulation object sensing capabilities. Edit parameters via Physical and Movement tabs.
- **Object Geometry:**
  - Essential for entity movement on/within simulation objects (e.g., planes taxiing on an aircraft carrier).
  - Must be in OpenFlight, MEDF, or GDB format; converted to GDB upon adding.
  - Added in the Simulation Object Editor.
- **Multiple Main Models:** VR-Forces can identify relevant object geometry files automatically if an entity has multiple main models.
- **Editing Parameters:**
  - Changes to embarkation points and slots use the visual model, not necessarily aligning with object geometry.
- **Adding Object Geometry:**
  - Select simulation object in Object List.
  - Go to Movement tab.
  - Choose 'Use Detailed Geometry in Simulation Engine'.
  - Select appropriate option for main models ('Use Object Visuals' or specific MEDF file).
  - Optionally, change object geometry file via 'Select' button.
- **Cultural Features Embedding:**
  - Allows entities to walk around/inside buildings as part of the terrain.
  - No need to generate navigation data in editor; done when placed in a scenario.
- **Configuring Cultural Features:**
  - Select cultural feature in Objects List.
  - Go to Movement tab.
  - Choose 'Use Detailed Geometry in Simulation Engine'.
  - Click 'Select' to confirm.

- **Selecting Object Geometry:**
  - Open 'Select Object Geometry' dialog.
  - Click 'Browse', select object geometry file, then click 'Open'.
  - Click 'OK'.

- **Ground Clamping Cultural Features (Gravity Alignment):**
  - On the Movement tab, check 'Is Gravity Aligned' to align cultural features with terrain.

- **Editing Simulation Object Parameters:**
  - Edit properties using keywords in General tab's Keywords text box:
    - `canbeairborne`: Object can be airborne.
    - `cansetpitch`: User can change object's pitch.
    - `no-orbat`: Object cannot be added to Order of Battle panel.
    - `nocopy`: Entity cannot be copied once placed.
    - `noedit`: User cannot edit the object once placed.

- **Editing Lifeform Visual Model and Animation (DI-Guy):**
  - Select Human or Animal tag, then a lifeform in the object list.
  - In the Visual Model Panel, click 'Edit' to open 'Set 3D Models Visuals' dialog.
  - Choose DI-Guy character and default appearance. Optionally, filter options using DI-Guy Filters.
  - If random appearance is selected, specify the list of appearances to choose from.

**Key Points Added:**
- Detailed explanation of keywords for editing simulation object properties.
- Clarification on selecting a lifeform in the object list before editing visual model and animation.

- **Default Hand/Head Item Selection:**
  - Optionally select a hand item or head from their respective lists.
  - If 'Random' is chosen, use the 'Random Hand/Head List' button to specify the list of items that can be selected.

- **Default Animation Selection:**
  - Select the default animation for an entity from the 'Default Animation' list. This animation is used when the entity has no specific task and appropriate posture/speed.

- **Configuring DI-Guy Characteristics Lists (Random Appearance, Hand Item, Head):**
  - After selecting a Human/Animal tag, choose a lifeform in the object list.
  - Open the 'Set 3D Models Visuals' dialog by clicking the 'Edit' button in the 3D display.
  - Click the random list button for the characteristic you want to configure (Appearance, Hand Item, Head).
  - In the opened dialog box, select or clear options to include/exclude them from the random list.
  - Click 'OK' twice to save changes.

- **Specifying a Default Appearance:**
  - Select an entity and go to the Physical tab.
  - Click the 'Edit' button next to the Appearance box, set desired values in the 'Set Appearance' dialog, then click 'OK'.

- **Editing Sensor Signatures:**
  - Predefined sensor signatures are located in `./data/simulationModelSets/EntityLevel/extra/sensor-signatures.csv`.
  - To specify sensor signatures for an entity, update the respective values in the Simulation Object Editor.

- **Edit Sensor Signatures:**
  - Select simulation object.
  - Go to 'Physical' tab.
  - In 'Sensor Signatures' section, specify values or select predefined signatures for each sensing domain.

- **Manage Articulated Parts (Propellers, Rotors, Doors, etc.):**
  - Override or add settings at the entity level using Simulation Object Editor.
  - Defaults come from sim components and entity visual models.

- **Add & Edit Articulated Parts:**
  - Select object > 'Physical' tab > 'Articulated Parts' section.
  - Click 'Add Part' to open dialog box, select part, and click OK.
  - Hover cursor over part for source file info.
  - Click 'Edit Part Properties', make changes in properties dialog box, then click OK and save model set.

- **Animate Articulated Parts & Preview Muzzle Flashes:**
  - Select object > 'Physical' tab > 'Articulated Parts' section.
  - Check 'Animate' box to see part animation in Visual Model Panel.
  - Preview particle system for weapon systems by selecting part type.

- **Muzzle Flash Display:**
  - Not applicable for lifeforms with weapons.
  - To display muzzle flash:
    - Select the simulation object.
    - Go to the Physical tab.
    - In the Articulated Parts section, click 'Fire' for the weapon that you want to see.

- **Removing Articulated Parts:**
  - Custom added parts can be removed, not built-in ones.
  - To remove a custom articulated part:
    - Select the simulation object.
    - Go to the Physical tab.
    - In the Articulated Parts section, select the part you want to remove.
    - Click 'Remove Selected Part'.

- **Editing Entities & Systems:**
  - Simulation objects have systems (like movement, damage, sensors, weapons) that can be managed (added/removed/changed).
  - Some systems are interdependent (e.g., a weapon system may require a sensor system to function).
  - System components have parameters that can be edited via the Simulation Object Editor.

- **Adding a System:**
  - There's no specific limit on the number of systems per simulation object.
  - To add a system:
    - Select a simulation object in the list.
    - Add the desired system.

- **Adding a System:**
  - Navigate to the 'Systems' tab.
  - Click the 'Add System' button for the desired system type.
  - In the opened dialog box, select the system and view its description (if available).
  - Click 'OK' to add the selected system to the simulation object's list.

- **Damage & Movement Models:**
  - Only one damage model or movement model can be specified per simulation object.
  - To set a damage model: On the 'Systems' tab, select an option from the 'Damage' list.
  - To set a movement model: Go to the 'Movement' tab and select an option from the 'Movement Dynamics' list.

- **Editing System Properties:**
  - Select the desired simulation object and system (excluding damage or movement models).
  - If the 'Edit Properties' button is enabled, click it to open the properties dialog box. A red dot will appear on the 3D model where the system is located.
  - Edit the properties as needed, then click 'OK'.

- **Removing a System:**
  - On the 'Systems' tab, select the system you want to remove.
  - Click the 'Remove System' button. Be cautious of dependencies between systems.

- **Replacing a System:**
  - Select the simulation object and the system you want to replace.
  - Click the 'Replace System' button. In the opened dialog box, select the new system and click 'OK'. The replaced system will be removed from the list.

- **Munitions:**
  - Munitions are categorized into simulated (e.g., missiles, bombs) and non-simulated types.
  - Simulated munitions are treated as individual objects in the simulation.

- **Simulated Munitions:**
  - **Features:** Visual and 2D models, configuration tabs (Firing for accuracy, Detonation for damage power).
  - **Creation:** `Model > New Munition`, select 'New Munition', choose platform type, template, name; optionally edit object type or visuals.
  - **Post-Creation Editing:** Target types and detonation power can be edited.
  - **Detonation Preview:** Use 'Detonate' button in 3D display to preview different environments.

- **Non-Simulated Munitions (Ammunition):**
  - **Features:** Not simulated individually, fired by direct fire weapons; General tab for basic info, Detonation tab for damage power.
  - **Creation:** `Model > New Munition`, select 'New Ammunition', specify object type; optionally set tracer type.

- **Wake Configuration:**
  - **Surface Entities:** Configure wake parameters in Simulation Object Editor by varying wind speed, entity speed, and choppiness to see different appearances.
  - **Process:** Select surface entity, click 'Edit Wake' on Visual Models Panel.

1. **Editing Wakes:**
   - Open 'Edit Wake Model' dialog (Figure 580).
   - Modify wake parameter values.
   - Adjust environment settings:
     - Wind speed
     - Wind direction
     - Choppiness
     - Ocean quality
   - View wakes and propeller wash in Visual Models Panel by adjusting the speed.

2. **Creating Randomized Simulation Objects:**
   - Open Simulation Object Editor, load SMS.
   - Create new 'Randomized Simulation Object':
     - Define attributes: name, tag, palette.
     - Add specific simulation objects to list:
       - Double-click or select and click 'Add'.
       - Increase probability by adding multiple instances of the same object.
   - Save the SMS.

3. **Configuring Scripted Entity Movement:**
   - Entities move based on built-in intelligence, but exceptions include:
     - Ballistic missiles: Fly based on script parameters when launched.
     - Animated movement tasks: Move as prescribed in the script.

- **Movement Configuration:**
  - Ballistic missiles and animated entities use CSV files (movement files) for movement tasks.
  - Movement files specify time sequences and parameters defining entity movement:
    - Ballistic missile files: lateral-distance, altitude, range.
    - Animated entity files: lateral distance, altitude, range, heading, pitch, roll.

- **Configuration Process:**
  - Access the 'Ballistic Missiles' dialog box via Edit > Ballistic Missiles.
  - Select a missile type and stage to configure:
    - For single-stage missiles, configure Stage 1.
    - For multi-stage missiles, add or delete stages as needed.
  - Specify details for each stage:
    - Movement File: Choose a CSV file from the list or add a new one.
    - File Configuration: Select a configuration specifying column values in the movement file.
    - Munition Type: Choose the missile to use.
    - Clamp Type: Determine how to calculate altitude for the animation (options include None (Geodetic), None (Topographic), and High Fidelity (Including Orientation)).
    - Completion Rule: Set the action when the CSV file movement is complete.
  - Click OK to save changes.

- **Additional Points:**
  - Animated entity files have more parameters than ballistic missile files. Extra parameters in ballistic missile files are ignored.
  - Missile types are configured in the Simulation Object Editor.
  - Movement file configurations specify column values in movement files (see "66.8.3 Editing Movement File Configurations" on page 1369).
  - Clamp type options determine altitude calculation for animation (Table 52).

1. **Terrain Clamping Modes:**
   - **Low Fidelity (Terrain Clamp Only):** Ignores animation altitude; clamps object to terrain using its origin point only. Orientation is set solely from the animation.
   - **Altitude Above Terrain (High Fidelity):** Uses animation altitude above the terrain height.
   - **Ground Clamp if Altitude Offset is 0:** Acts like High Fidelity for frames where altitude is 0, and acts like None (Geodetic) for frames where altitude is non-zero.

2. **Radar Face Cartesian:** Similar to None (Topographic), but inverts the Y coordinate. Useful when animation data is captured radar data.

3. **Animated Movement:**
   - Scripted using CSV or 3DS ASCII Export (ASE) files, often created from telemetry data.
   - Configured in the Simulation Object Editor via the Animated Movement task.
   - Process:
     a. Open the Animated Movement dialog box.
     b. Add/Edit animated movement: set name, description, categories, and select a movement file.
       - If using an ASE file, choose an animation from the list.
       - If using a CSV file, select a file configuration specifying column types.
     c. Choose a clamp type (altitude calculation method) from Table 52.
     d. Set the completion rule for the entity after it completes the animated movement task.

4. **Movement File Configurations:**
   - VR-Forces assumes ballistic missile CSV files contain columns for time, lateral distance, altitude, and range.
   - ASE files require selecting an animation; CSV files need file configuration selection to specify column types.

VR-Forces uses CSV files for animated entity movement, expecting seven columns: time, lateral distance, altitude, range, heading, pitch, and roll. Here's how to manage these files:

1. **File Configuration:**
   - Match or edit configurations to suit your file.
   - Access configurations via the 'Edit' button in relevant dialog boxes (not applicable to ASE files).
   - Add or select a configuration, name it, and optionally change the start row.

2. **Configure Movement Parameters:**
   - Specify columns for time and each movement parameter.
   - Choose a time unit if needed.
   - Click 'OK' to save changes.

Additionally, VR-Forces allows editing units for entity-level scenarios:

- Units can be modeled at the entity or aggregate level.
- Editing involves configuring parameters similar to individual entities, following procedures detailed in related chapters (64 and 66).

- **Unit Types:**
  - **Entity-level units:** Have subordinates and formations, no sensors.
  - **Aggregate-level units:** Don't move in formation, have sensors, detailed combat info.

- **Creating Entity-level Units:**
  - Create a new entity (like any other simulation object).
  - Add subordinates to the unit.
  - Optionally, configure formations for the unit.

- **Aggregate As Option:**
  - Any unit configured can be included in Aggregate As options list.
  - Enable: select unit, go to General tab, check 'Allow as Aggregate As Option', save.

- **Editing Entity-level Unit Composition:**
  - Most units have modifiable predefined subordinates. Some are empty or non-aggregatable (Crowds, Convoys).
  - **Add subordinate:** Select unit, go to Movement tab, click 'Add' in Unit Composition, choose object from list, click 'Add'.
  - **Remove subordinate:** Select in Unit Composition, click 'Remove'.
  - **Replace subordinate:** Select in Unit Composition, click 'Replace', choose new object.

To manage subordinates within a unit:

1. **Replace a subordinate:**
   - Select the subordinate in the Unit Composition window.
   - Click 'Replace', choose a new object from the list, and click OK.
   - The new object replaces the old one in the Unit Composition window and all formations.

2. **Change the order of subordinates:**
   - Select the subordinate to move in the Unit Composition window.
   - Use 'Move Up' or 'Move Down' buttons to change its position, affecting unit leadership, formation placement, and succession order.

3. **Edit a subordinate unit:**
   - Right-click on the subordinate in either Unit Composition window or Formation Editor.
   - Choose 'Edit'. Changes affect all instances of that subordinate across units.

4. **Assign functions to subordinates:**
   - Select the subordinate in the Unit Composition window and click 'Function'.
   - Choose a function from the list, or define a new one (advanced users only), and click OK.

5. **Formations:**
   - Each unit has predefined formations: Column, Line, Vee, Wedge.
   - The Convoy unit is an exception with its own formation rules.

The VR Forces User Guide outlines the management and editing of formations, which are groups of units within a scenario:

- **Formation Management:**
  - Users can add, remove, and rename formations as needed.
  - The Formation Editor allows users to change the layout, create new formations, or specify a default formation.

- **Formation Editor Functions:**
  - Expand/collapse display of subordinate units for better terrain visualization.
  - Zoom in/out for detailed view.
  - Display bounding boxes around subordinate units for area awareness.

- **Formation Editing Operations:**
  - **Add Formation:** Open Formation Editor, click 'Add', enter a name, select an existing formation to copy from, then edit the layout.
  - **Remove Formation:** Select the formation tab and click 'Remove'.
  - **Rename Formation:** Select the formation tab, click 'Rename', enter a new name.
  - **Set Default Formation:** Select the formation tab, click 'Default' to move it to the leftmost position.

- **Additional Features:**
  - Formations can also be edited directly in formation files. For details, see "75.1. Configuring Formations" on page 1530.

In the Formation Editor:

- **Toggle Bounding Boxes**: Display or hide bounding boxes by selecting/clearing the 'Bounding Boxes' checkbox.

- **Copy Formations**:
  - Select a unit to copy formations to.
  - Open the Formation Editor and click 'Copy'.
  - Choose the unit and formations to copy in the 'Select Formations' dialog box.
  - Click 'OK' to copy formations.

- **Lay Out a Formation** (Automatically or Manually):
  - Open the Formation Editor and select a formation tab.
  - For automatic layout, click 'Auto Layout', choose a formation type, set distance between entities, then click 'OK'.
  - For manual layout, double-click a subordinate to move it, then click again to place it.

**Additional Features:**

- **Snap To Grid**: Enable this for precise entity placement on grid intersections. Adjust scale factor if needed.
- **Change Grid Spacing**: Set the distance between grid lines (default is 1000 meters).

This section covers editing simulation objects and combat engineering objects for aggregate-level modeling, including aggregating units into higher echelons.

- **Configuring Ammunition, Weapons, and Equipment:**
  - Define individual items: ammunition, weapons, equipment.
  - Create assemblies:
    - Combine related items into an assembly.
    - Modify existing assemblies.
    - Include/exclude assemblies from a unit.
  - Roll up assemblies using roll-up rules for aggregate-level modeling.

- **Configuring Aggregate-Level Objects:**
  - **General:** Basic identification (name, enumeration, tags).
  - **Physical:** Overall health, footprint, sector size per posture.
  - **Movement:** Movement system, speed modifiers by posture and MOPP levels (not air units).
  - **Sensors:** Sensor systems, signatures, signature modifiers by posture and MOPP levels.
  - **Attack (Ground Units):** Combat power, ammunition use, weapon systems, combat power modifiers.
  - **Defense (Ground Units):** Vulnerability to attacks, vulnerability modifiers.
  - **Combat (Air Units):** Weapon systems, combat systems, loadout, other attributes.
  - **EW:** Electronic warfare systems, EW defense, dependence.
  - **Personnel and Equipment:** List personnel and equipment (reported as state information).
  - **Supplies:** Configure supplies for the unit.

- **Additional Notes:**
  - Use templates to create new aggregate-level simulation objects with pre-configured parameters.
  - Configure simulation objects in the AggregateLevel.sms editor.

The provided text outlines the configuration of simulation objects in VR Force's aggregate-level modeling:

1. **Simulation Object Configuration:**
   - Specify required supplies, support personnel, and combat engineering operations.
   - Define engineering systems (excluding air units).
   - Add other systems via the 'Additional Systems' tab.
   - Configure parameters based on object type; ammunition, weapons, and equipment must be defined first.

2. **Aggregating Units:**
   - Simulation objects can be aggregated into higher echelon units using the 'Aggregate As' list.
   - Aggregate-level simulation objects with aggregate warfare model lack subordinate specification options.
   - Use the 'Aggregate Container' platform for creating additional hierarchical units.

3. **Configuring Ammunition, Weapons, and Equipment:**
   - Simulation objects require appropriate ammunition, weapons, and equipment for combat.
   - Configure these resources directly or use assemblies (pre-packaged resources) for easier addition to units.
   - Example: Configuring a U.S. armored cavalry troop with various vehicle types and their respective weapons and ammunition.

This summary maintains key points while condensing the information from the original text, removing unnecessary details and separating long sentences into bullet points with additional descriptions.

- **Assembly Configuration:**
  - Each assembly (e.g., M1A2, M3A3, M1064) specifies its unique weapons and ammunition for a unit.
  - When creating a unit (e.g., AR CAV TRP US), specify the quantity of each assembly needed. The total resources are automatically calculated.

- **Unit Configuration Process:**
  1. Define available weapons, equipment, and ammunition.
  2. Create assemblies using these defined items.
  3. Create a unit and specify its assemblies.
  4. Roll up (calculate) the assemblies' resources.
  5. Configure other unit parameters.

- **Defining Ammunition, Weapons, and Equipment:**
  - Each item is defined as a key/value pair: Key (arbitrary text string), Value (Display Name used in lists).
  - Ammunition types include Anti-air, Anti-personnel, etc., and For Weapon System.
  - Weapon and equipment categories are Aircraft, Ships, Vehicles, Weapons.
  - Custom resources can be added by assigning appropriate combat strength.

- **Adding New Items:**
  1. Access the 'Edit > Ammunition and Equipment' dialog box.
  2. Select the resource type tab (Ammunition, Equipment, Weapon).
  3. Click 'Add', enter the key value, and edit the Display Name.

- **Item Configuration (Ammunition, Equipment, Weapon):**
  - Input item name.
  - Choose appropriate type/category: Ammunition (Type), Equipment (Category), Weapon (Weapon Category).
  - Confirm with 'OK'.

- **Assemblies:**
  - Simplify resource grouping (vehicles, personnel, weapons, ammo) for units.
  - Efficient for managing multiple units using the same assembly.

- **Creating Assemblies:**
  - Access via Edit > Assemblies.
  - Click 'Add', name new assembly, optionally base on existing one, then confirm with 'OK'.
  - Edit assembly properties (equipment, weapons, ammo, variables, systems).

- **Editing Assemblies:**
  - Variables represent non-weapon/ammo/equipment resources (e.g., fuel, water, personnel, health).
  - Some system properties change upon unit roll-up.
  - Assembly variables overwrite direct values when rolled up; maintain consistency.

- **To edit an assembly:**
  - Select from the Assembly list and make changes.

- **Editing Assemblies:**
  - Access: `Edit > Assemblies`
  - Select assembly, then:
    - Add attribute/resource using `Add Attribute` button
      - New row added to list, first resource listed in Element column
    - Select desired resource and enter its amount in the Value cell
    - For Systems tab, edit properties using `Edit Properties` button
  - Save changes with `OK`

- **Adding Assemblies to a Unit:**
  - Select entity, click `Add` above Assemblies list
  - Choose assembly from list, enter amount

- **Removing Assemblies:**
  - Select assembly in the list, click `Delete`

- **Creating Roll Up Rules (global for SMS):**
  - Access: `Edit > Roll Up Rules`
  - Add rule, select type (Sum, Average, Maximum, Minimum), specify:
    - Display Name
    - Default Value
    - Roll-up method
      - For Average type, optionally set weight

- **Rolling Up Assemblies:**
  - Applies a set of resources (including modifiers) from assigned assemblies to a unit.
  - Overwrites current unit values; manual edits are lost. Other parameters remain unchanged.
  - Process:
    - Select the unit.
    - Choose 'Edit' > 'Roll Up All', or click 'Roll Up' in the Assemblies area of the Simulation Object Editor window.
    - Confirm and click 'Yes'.

- **Adding Activities:**
  - Assigns an activity to simulation objects. No immediate effect unless coded or scripted.
  - Process:
    - Choose 'Edit' > 'Activities'.
    - Select an object type, or add a new one.
    - Click 'Add Attribute', enter the key value and display name, then click 'OK'.

- **Object Parameters for Aggregate-Level Modeling:**
  - Data-driven model using parameters categorized as follows:
    - Real-world absolute values (e.g., fuel, personnel, equipment).
    - Modifiers: multipliers changing base values under specific conditions.
    - Systems: movement, sensor, others.
    - Abstract values: strength and health representing relative abilities to damage or absorb damage.
  - Values based on public information and customer requirements, aiming for realism and reasonability.

- **Adding New Simulation Objects:**
  - Maintain consistent health values with existing objects.
  - If creating a new SMS, establish your own method for representing relative strengths.

- **Parameters Organization:**
  - Parameters are grouped in tabbed pages; Additional Systems tab includes miscellaneous systems not fitting other tabs.

- **General Parameters (General Tab):**
  - Identifying information: Name, Enumeration, Tags, Model.

- **Physical Parameters (Physical Tab):**
  - *Common to Air & Ground Units:* Health, Physical Footprint, Height, Footprint Modifier.
  - *Ground Units Only:* Front, Rear, Flank Sector Sizes; Movement System, Embarkation abilities, Mass, Runway Lengths, Drag Chute settings.

- **Movement Parameters (Movement Tab):**
  - Movement system specification and editing of its parameters.
  - Environmental factors, posture, MOPP level transition time affect movement.

- **Movement Parameters:**
  - *Max Speed Adjustments*: Modify a simulation object's maximum speed based on different factors:
    - *Overlapping*: When another unit's footprint overlaps.
    - *Posture*: Based on the current posture of the unit (e.g., Max Speed Modifier (Posture), Health Percent For Rout).
    - *MOPP Level*: Based on the current MOPP level of the unit (e.g., Transition Time from Level 0, Max Speed Modifier (MOPP Level)).

- **Movement System Properties:**
  - *Environmental Factors Affecting Speed*:
    - *Weather Conditions*: Rain and snow intensity slow down objects (Rain/Snow Modifier by Intensity).
    - *Visibility*: Reduces maximum speed when visibility drops below a certain value, with a maximum degradation amount (Visibility Degrades Max Speed When Below & Maximum Amount Visibility Can Degrade Speed).
    - *Wind*: Reduces aircraft's maximum speed in high winds, up to a maximum degradation amount (Wind Degrades Max Speed When Above & Until, Maximum Amount Wind Can Degrade Speed).
  - *Movement Direction*: Slows down ground movement when moving backward (Retrograde Movement Penalty).

- **Editing Parameters:**
  - *Movement System Properties*: Accessed via the 'Edit Properties' button to modify various properties.
  - *Posture Transition Times*: Edited on the 'Movement' tab, specifying transition times between postures in minutes.
  - *Sensor Parameters*: Specified on the 'Sensors' tab, including:
    - Sensor systems and their properties.
    - Sensor signatures: Distance at which other units can sense this unit using different types of sensors. Users can choose from preconfigured sets or define custom ones.
    - Signature modifiers for each posture and MOPP level (not applicable to air units).

- **Attack Parameters (for ground units, aircraft lack Attack tab):**
  - **Domains:** Anti-Air, Anti-Tank, High Explosive, Anti-Personnel, Anti-Ship.
  - **Key Parameters:**
    - *Range:* Distance at which a unit can attack in each domain.
    - *Hit Factor:* Probability of an attack hitting the target, compared to the defense factor.
    - *Strength:* Abstract value representing combat power in each type of combat.
    - *Ammunition Usage:* Rounds per minute used for each combat type, apportioned among available ammunition types.
    - *Auto-Resupply Rate:* Daily ammunition resupply if auto-resupply is enabled.
    - *Distribution:* Proportion of casualty types from an attack.
    - *Sector & Posture Combat Power Modifiers:* Adjustments to base combat power based on attacked sector and unit posture.

- **Aggregate-Level Object Parameters:**
  - *Combat Range Modifiers:* Effect on attack range based on posture.
  - *CID Level, MOPP Level, Morale, Environmental Conditions Combat Power Modifiers:* Adjustments to combat power due to enemy detection level, MOPP level, morale, and environmental conditions.
  - *Weapon System Auto-Resupply Rate & Attack Interval:* Daily resupply and time between attacks for each weapon system.

- **Defense Parameters (for ground units, aircraft lack Defense tab):**
  - *Vulnerability:* Amount a unit is vulnerable to different types of attack within each weapon domain.
  - *Defense Factor for Guided Munitions & NBC Vulnerability:* Ability to defend against guided munitions and nuclear, biological, or chemical contamination.
  - *Posture & Sector Vulnerability Modifiers:* Effect of postures and sectors on a unit's defensive ability.
  - *MOPP Level Vulnerability Modifier:* Defense against NBC contamination at different MOPP levels.
  - *Health Percent for Firepower Kill:* Health level below which the unit cannot fire.

- **Health Thresholds:**
  - Below specific health percentages, units lose certain functionalities:
    - **Mobility Kill:** Unit cannot move.
    - **Sensor Kill:** Unit cannot sense other objects.
    - **Firepower Kill:** Unit cannot fire weapons.

- **Air Unit Combat Parameters:**
  - **Weapon Systems:** Manage weapon properties (add, remove, edit).
  - **Combat Systems:** Manage other combat-related system properties.
  - **Loadout:** Specify default loadout type and specific munitions.
  - **Distribution:** Set casualty type chance upon being struck.
  - **Defense Factor for Guided Munitions:** Apply defense factor when hit by guided munitions.
  - **Weapon System Attack Interval:** Time between each weapon attack.

- **Electronic Warfare (EW) Parameters:**
  - Specify EW defense ability and add EW systems.

- **Personnel and Equipment Parameters:**
  - Configure order of battle for reporting purposes, including:
    - Personnel types: officers, warrant officers, NCOs, enlisted.
    - Equipment and weapons (ground units only).
  - Personnel amounts are multiplied by the unit's health.

- **Supplies Parameters (Ground Units):**
  - Specify details for various supplies like food, water, fuel, lubricants, and custom supplies:
    - Amount
    - Daily/kilometer usage
    - Pacing/tracking
    - Auto-resupply rate
  - Supplies are used by engineering objects when configured in both places.

- **Air Unit Supply Conditions:**
  - Set aviation fuel quantity.
  - Configure aerial refueling system and other supplies.

- **Combat Engineering Objects (CEOs):**
  - Impact simulation object mobility and cause attrition.
  - Built by units using specified materials and sizing details.
  - Key parameters:
    - Display name, dimensions (height, length, width).
    - Minimum completion percentages for effect and detection.
    - Attrition rates, mobility, vulnerability, and signature modifiers.
    - Required resource type and amount for construction.
    - Concealment status and maximum relative size for affected objects.

- **Editing Reader/Writer Key/Value Pairs:**
  - Map internal keywords to display text for VR-Forces translation.
  - Store changes in `./data/simulationModelSets/AggregateLevel/gui/rwKeywordValuePairs.xml`.
  - Adding new pairs influences:
    - Edit Ammunition and Equipment dialog box's Type list (Ammunition tab).
    - Weapon and Equipment tabs' Category lists.
    - Posture set data request, with limited functionality.

- **Resource:** VR-Forces User Guide (1405, 1407)
- **Item Added:** 'rwKeywordValuePairs.xml' parameters editing effect (Table 62)

**Chapter 69: Configuring Embarkation**
- **Purpose:** Configure entities to allow other entities to embark on them.
- **Key Points:**
  - Enable embarkation for an entity via the Simulation Object Editor's Movement tab.
  - Configure allowed entity types, slots (location and number), ingress points (embarking locations), and egress points (disembarking locations).
  - Optionally, enable automatic embarkation, protect embarked entities from collateral damage, or specify slot types/names for specific embarkations.
- **Process:**
  1. Select the entity in the object list.
  2. Go to the Movement tab and enable 'Can Be Embarked Upon'.
  3. Optionally, select additional movement options:
     - 'Can Be Moved Onto For Embark': Ground-clamped entities can walk or drive onto the entity and automatically become embarked.
     - 'Protect Embarked Entities from Collateral Damage': Embarked entities are not damaged if the parent entity sustains collateral damage.
  4. Click 'Configure' to open the Configure Embarkation dialog box.
  5. Add entity types that can embark, specify ingress/egress points (in meters relative to the parent entity), and configure slots as needed:
     - For each entity type, specify ingress and egress points in meters relative to the center of the parent entity.
     - Optionally, configure slots by specifying their location, number, type, and name.
- **Tutorial:** Configuring embarkation for a Super Tanker (69.5)
  - Configure the Super Tanker for embarkation (69.5.1).
  - Configure slots for the Super Tanker (69.5.2).
  - Add ingress points (69.5.3) and egress points (69.5.4).
  - Save the new configuration (69.5.5) and test it (69.5.6).
- **View Adjustment:** Change view mode between Plan View (2D) or Stealth (3D) in the Configure Embarkation dialog box to define slots and points accurately.

**Related Chapters:**
- 68. Editing Aggregate-Level Objects, specifically 68.10. Editing Reader/Writer Key/Value Pairs

- **Adjusting View for Embarkation Configuration:**
  - Choose a view mode (e.g., Top Down, Left Side).
  - Use mouse/keyboard to zoom, pan, or rotate the view.
  - Adjust Near Clipping Plane to see inside entities while defining slots.

- **Configuring Slots for Embarkation:**
  - VR-Forces initially adds one slot at the parent entity's center. You can edit this slot and add more.
  - To add a slot:
    1. Select simulation object in editor.
    2. Enable 'Can Be Embarked Upon' on Movement tab.
    3. Click 'Configure' to open dialog box.
    4. Specify embarkable object types (if not already done).
    5. Click 'Advanced' for 2D view of bounding volume.
    6. Change view if needed (as per initial points).
    7. Click 'Add' to create new slot and configure its parameters.

- **Slot Parameters:**
  - Object Type: Specify allowed object types using categories, ranges, or specific values.
  - Name, Slot Type, DIS Station Name, Position, Orientation, Appearance can also be configured for each slot.

- **Human Embarkation:**
  - **Posture:** Default is Sitting for humans on trucks.
  - **Animations:** Specify unique animations for ingress and egress.
  - **Movement:** Options include jumping to the slot or using normal entity movement.
  - **Orientation:** Entity can snap to parent's heading or smoothly orient at ingress point.

- **Slot Parameters:**
  - **Disembark Direction:** Flip X, Y, or both to change exit direction.
  - **Object Type:** Specify using object enumeration for allowed entities.
  - **Identification:** Optional slot name and type text fields.
  - **Position & Orientation:** Relative to entity's center.
  - **Appearance:** Specify appearance for the object type in the slot (default is ignored).
  - **Animations (Humans Only):** Specify posture supporting animations, e.g., Upright, Standing Still.
  - **Ingress/Egress Techniques:** Optional, with details in "69.3.4 Specifying Ingress and Egress Techniques" on page 1416.
  - **Movement to Slot:** Embarked object can jump to the slot or move normally.
  - **Orientation to Parent:** Entity can snap to parent's heading or smoothly orient at ingress point.

- **Visibility:** Optionally, make embarked entities invisible.

- **Visibility in 3D Observer Modes:** Make embarked simulation objects invisible by selecting "Invisible When Embarked".
- **Slot Capacity:** Set the number of entities that can use a slot via the 'Capacity' text box; '-1' signifies unlimited.
- **Previewing Embarkation Position:** Use Stealth view in the Configure Embarkation dialog to observe and adjust the embarked entity's position relative to the visual model.
- **Testing Embarkation:** Validate embarkation behavior by testing it within a scenario, as guided by the chapter's tutorial.

**Slot Configuration:**

- **Slot Exclusions:** Prevent certain slots from accepting entities when specific slots are occupied. Configure this using the 'Edit Slot Exclusions' dialog box.
  - Example: If slot 1 is filled with a tank, only 10 DI-Guys can embark instead of 20.
- **Ingress & Egress Techniques:** Associate scripts with entity embarkation/disembarkation by defining technique strings in the OPE file. Specify these techniques when configuring slots.
  - Example: Using 'GetInCar' as the ingress technique triggers the 'get_in_car' script during entity embarkation.

**Ingress & Egress Points:**

- Define where and how entities board other entities, including paths they follow and movement once on board.

- **Ingress & Egress Points**: Define entity boarding (ingress) and disembarkation (egress) locations on a parent entity.

- **Entity Movement**:
  - Without ingress points, entities teleport directly to slots.
  - With ingress points, entities move towards the parent before embarking.

- **Slot Control**:
  - Ingress points can be restricted to specific slots.
  - Different entity types can use distinct ingress/egress points and slots (e.g., cars/trucks vs. foot passengers on a ferry).

- **Configuration Steps**:
  - Select entity in Simulation Object Editor > Movement tab > Enable embarkation > Configure.
  - Switch to Advanced mode for more control over ingress/egress points.
  - Add ingress point:
    - Click 'Add' above Ingress Points list.
    - Edit Right, Forward, Up values (coordinates).
    - Optionally, specify a path by adding new coordinates and adjusting their order.
  - Restrict supported slots: Enter slot numbers in the Supported Slots field.
  - Change disembark direction using Flip Disembark Body X/Y checkboxes.
  - Click OK to save changes.

- **Egress Point Configuration**: Similar to ingress points, replace "ingress" with "egress" in the steps.

The "Embarkation Slot Tutorial" guides users through configuring an entity (super tanker) for embarkation in VR-Forces. Here are the key steps and points:

**Purpose:**
- The super tanker lacks default embarkation slots but has helipads, making it suitable for adding embarkation points.

**Objective:**
- Add embarkation slots, ingress/egress points to the super tanker.
- Demonstrate the new slots in a scenario.

**Configuration Steps:**

1. **Simulation Object Editor Setup:**
   - Open Simulation Object Editor.
   - Create a new simulation model set extending 'EntityLevel.sms'.
   - Load and promote the Super Tanker entity for editing.

2. **Enable Embarkation:**
   - Select "Can Be Embarked Upon" in the Movement tab of the Super Tanker's properties.

3. **Configure Embarkation Settings:**
   - Allow Rotary Wings (Platform) entities.
   - Switch to 'Stealth' and 'Top Down View' for visualizing the super tanker model.

4. **Add Slots for the Super Tanker:**
   - Change observer view to 'Stealth' and 'Top Down View', then zoom in to see helipads.
   - Click 'Add' above the Slots window to create a new slot (Slot 1).
   - Specify object types: For helicopters, use the enumeration "1:2:-1:20-25,50,90-92:-1:-1:-1".

- **Customize Object Type:**
  - Open 'Change Object Type' dialog.
  - Select:
    - Kind: Platform
    - Domain: Air
    - Country: All
    - Category: Other
  - Modify category part of Object Type to: `1:2:-1:20-25,50,90-92:-1:-1:-1`
  - This allows any helicopter type to land in the slot.

- **Specify Slot Location:**
  - Ensure Station Name is set to 'On Station xyz'.
  - Input estimated values for:
    - Forward (Y): ~65
    - Right (X): ~20
    - Up (Z): ~14
  - Clear 'Jump to Location' checkbox.

- **Add a Second Slot:**
  - Use same object type and forward/up values.
  - Set Right position to `-20`.

- **Add Ingress Point (optional):**
  - Click 'Add' button above Ingress Points window.
  - Set Right value in Ingress Points Coordinates table to `20`.

The text outlines the process of configuring embarkation points for entities like helicopters on a super tanker in VR-Forces, and provides an overview of integrating DI-Guy models into VR-Forces.

**Key Points:**

1. **Configuring Embarkation:**
   - Set ingress points to guide entities onto the helipad:
     - First point: Forward=69, Up=40
     - Second point: Forward=-20, Right=69, Up=40
   - Set egress points for disembarking entities:
     - First point: Right=20, Forward=69, Up=40
     - Second point: Right=-20, Forward=69, Up=40
   - Save and test the configuration in a new scenario.

2. **Testing Embarkation:**
   - Place a super tanker with three helicopters (one on each side) in an ocean terrain.
   - Give each helicopter a plan to embark on the tanker at staggered times.
   - Run the scenario; two helicopters should embark, while the third should report no available slots.

3. **Integrating DI-Guy Models:**
   - Copy DI-Guy files to VR-Forces data directory and add new DI-Guy entities in the Simulation Object Editor (SOE).

To integrate a new character into VR-Forces using DI-Guy software:

1. **Create and Prepare Character:**
   - Create the new character in DI-Guy.
   - Copy required files to `./SharedData/18/latest`.
   - Add model definition, element definition, and animations (if any) as needed.

2. **Copy DI-Guy Files to Data Directory:**
   - Store DI-Guy character files in `./SharedData/18/latest/ModelData/Lifeforms/DIGuy/custom`.
   - Map custom characters to element definitions using the Simulation Model Editor or place files directly for PDU-based visualization.

3. **Configure DI-Guy Models:**
   - Specify default character, appearance, and animation in the Simulation Object Editor.
   - Edit `character_animations_table.mtl` to add new DI-Guy characters.

4. **Add New DI-Guy Animation (if applicable):**
   - Create a new animation in DI-Guy with the same version supported by VR-Forces.
   - Ensure the animation file name matches the action added to the character's action table.

1. **Animation Naming and Usage:**
   - Animations must have exact names to match their action tables; e.g., "layEgg" not "lay_egg".
   - Each character has its own set of animations, which cannot be interchanged with other characters.

2. **Adding New Animations:**
   - Place the `motion_name.bdm` file in `./data/Lifeforms/DIGuy/motions`.
   - Add the `action_table.cfg` file to `./data/Lifeforms/DIGuy/config/diguy`.
   - Update `./appData/settings/vrfSim/character_animations_table.mtl` with a new animation entry, like this:
     ```
     (chicken
      ...
      (animation
       (animation-name "lay_egg")
       ...
      )
     )
     ```

3. **VR-Forces Animation Mapping:**
   - VR-Forces typically selects animations based on the lifeform's attributes.
   - You can manually set a DI-Guy's appearance or animation using specific tasks.

4. **Adding New DI-Guy Entity in SOE:**
   - Ensure `character_animations_table.mtl` is updated before adding a new entity in the Simulation Object Editor (SOE).

5. **Object Parameter Database (OPD):**
   - The OPD stores parameters for VR-Forces simulation objects and tactical graphics.
   - Parameters are organized within simulation model sets (SMS), which VR-Forces reads when loading scenarios or creating new objects.

6. **Platform Files, System Definition Files, Variable Bindings, State Properties:**
   - These components of the OPD help configure various aspects of VR-Forces simulations.
   - They can be edited and managed using specific procedures outlined in the guide.

The Object Parameter Database (OPD) in VR-Forces manages simulation objects' characteristics and initial state values:

1. **Object Definition**:
   - Primary definition stored in a `.entity` file.
   - Specifies object type, marking text, organizational info, parameters, and referenced platform file (`.ope`).

2. **Platform Files**:
   - Provide generic components for the object type (e.g., ground platform, surface platform).
   - Systems for interaction with the simulated environment.

3. **System Definition Files**:
   - Group related components and connections into packages.
   - Enable addition of systems to simulation objects in the Simulation Object Editor.

4. **Object Creation in VR-Forces**:
   - Each object creates an instance of `DtVrfObject`.
   - Different types use specific parameter (`DtVrfObjectParameters`) and state repository (`DtVrfObjectBaseStateRepository`) classes.
   - Platform file specifies parameters and state repository type to use.

5. **Object Types & Enumeration**:
   - Eight-digit enumeration scheme based on DIS and RPR FOM, with an additional field for individual vs unit objects.
   - Tree structure from general to detailed specifications.

6. **Object Super-Type**:
   - Field added to manage objects not part of the standard 7-digit enumeration (e.g., units, tactical graphics).

**Backup Recommendation**: Before making changes to the OPD, ensure you backup the file.

- **Object Enumeration:**
  - An M1A2 object's enumeration is `1 1 225 1 1 3 0`.

- **Object Super-Type:**
  - VR-Forces uses values listed in Table 63 for the object super-type, with meanings ranging from 'Other' (0) to 'Aggregated Unit' (4).

- **Published & Matching Object Types:**
  - Each simulation object has two object types: published and matching.
    - The published object type is used by the front-end to create a model in the back-end and by the back-end when publishing objects on the network. It must have specific values for each field.
    - The matching object type helps the back-end find the best match among available models, even with wildcards (-1) in some fields. This allows matching variations of an object type to the appropriate model.
  - Object types are specified in the .entity file using `objectType` and `matchType` attributes, e.g., `<simObject objectType="..." matchType="...">`.

- **Best Match Method:**
  - VR-Forces finds the best matching object type by starting from the root of a hierarchical tree (where higher levels have wildcard values in non-specified fields) and moving down until no better matches are found. This method ensures that objects are matched to the most specific model available.

- **Object Type Hierarchy (Fighter Jets):**
  - `l -1:-1:-1:-1:-1:-1:-1:-1`: Matches any object.
  - `l 1:1:2:-1:-1:-1:-1:-1`: Matches any fixed-wing entity.
  - `l 1:1:2:225:2:-1:-1:-1`: Matches any U.S. attack fixed-wing.
  - `l 1:1:1:2:225:2:4:1:-1`: Matches any A-10 Thunderbolt.
  - `l 1:1:1:2:225:2:4:1:0`: Matches a specific A-10 Thunderbolt.

- **Object Matching Process:**
  - VR-Forces discovers an object with type `1:1:2:225:2:11:0:0`.
  - It matches this object to the most specific type possible, starting from the top (any object) and narrowing down based on matching fields.
  - The best match is the U.S. attack fixed-wing object type (`l 1:1:2:225:2:-1:-1:-1`), so VR-Forces uses the generic U.S. attack fixed-wing model.

- **Object Parameters:**
  - Each object has an `object-type` (specified in .entity file) and a `parameter-type` (specified in .ope file).
  - The parameter-type determines the parameters and components that can be specified for an object.
  - Object state repository maintains state information, ensuring it matches the parameter-type.

- **Object Subcomponents:**
  - Each VR-Forces object has subcomponents like `state-repository`, `net-interface`, etc., managed by classes such as `DtSimObjectStateRepository` and `DtSimObjectNetInterface`.
  - The subcomponents created depend on whether the object is local or remote, specified in respective parameter blocks.
  - Permissible values for state-repository subcomponent include types like `fixed-wing-entity-state-repository`, `ground-entity-state-repository`, etc.

- **Object Parameter Database:**
  - Permissible 'net-interface' values:
    - Local: aggregate-local-entity-net-interface, engineering-object-local-net-interface, individual-local-entity-net-interface-with-properties, etc.
    - Remote: engineering-object-remote-net-interface, vrf-aggregate-remote-entity-net-interface-with-properties, vrf-individual-remote-entity-net-interface, etc.
  - Mandatory for every object: state repository specification.
  - Recommended subcomponents:
    - Task manager (local-task-manager)
    - Plan manager (vrfobject-plan-manager)
    - Component manager (component-manager)
  - Local and remote object parameters specified in platform (.ope) files, applying to all referenced simulation objects.

- **State Repository Hierarchy:**
  - Each VR-Forces object requires a state repository matching its parameter type.
  - State repository types and corresponding parameter types listed in Table 66 for various object types (e.g., ballistic-missile-param uses ballistic-missile-entity-state-repository).

- **Net Interface Hierarchy:**
  - Choose local and remote network interface types based on the simulated object's representation.
  - Example: Individual vehicle like a tank uses individual-local-entity-net-interface locally and vrf-individual-remote-entity remotely.

- **Component Descriptors and Parameters:**
  - Simulation objects' parameters include lists of used sensor, controller, and actuator components.
  - Component descriptors are text blocks in platform or system definition files describing components with optional parameters.
  - No placeholder list needed for unused component types.

- **Data Exchange:**
  - Components communicate using ports, which are specified in platform and system definition files.
  - A component can create a port group to organize related ports together, simplifying connection specifications.

- **Port Group Benefits:**
  - Simplifies connections by allowing you to specify a single port group instead of multiple individual ports.
  - Ensures that only one data provider attempts to write values on those ports each simulation frame.

- **Component Descriptors:** Common elements include:
  - `Name`: A unique identifier within the simulation or system, used in connection specifications and for other components to locate it.
  - `component-descriptor-type`: Specifies the type of component descriptor created by the factory, indicating additional data types present.
  - `component-type`: Defines the type of component created by the factory, specified in code (compTypes.h and compDescTypes.h).
  - `connections` (optional): Defines how components connect through ports or port groups. Connections can be:
    - Port-to-port: Connects an output port from one component to an input port on another.
    - Port group-to-port group: Connects an output port group from one component to an input port group on another.
    - Port within a group to another port or port group: Allows connections where either the input or output port (or both) is part of a port group.

The provided text outlines the setup of components, their interconnections, and processing order within a VR Forces simulation, focusing on ground vehicle movement controllers and powertrain actuators.

- **Controllers (Move-Along & Patrol-Between-Points):**
  - Type: Ground Auto-Move Along/Patrol Between Controller
  - Ticking: Unlimited (-1.0 min tick period), not real-time based
  - Status: Enabled
  - Parameters:
    - Near Distance: 25.0 units
    - At Distance: 1.0 unit
    - Approach Speed: 2.0 units/second

- **Powertrain Actuator:**
  - Type: Automotive Actuator
  - Ticking: Unlimited (-1.0 min tick period), not real-time based
  - Status: Enabled
  - Parameters:
    - Art Part List: Present
    - Terrain Collision Check: Disabled (False)
    - High-Fidelity Ground Clamping: Enabled (True)

- **Connections:**
  - Controllers send output to the powertrain actuator via their 'automotive-control' port groups.

- **Component Processing Order/Priority:**
  - Components are processed in the order they're listed.
  - First controller requiring data takes control of receiving component's ports, overriding others during that frame.
  - Example: Collision avoidance controller has higher priority than Move To or Move Along controllers.

- **Platform Files (.ope):**
  - Base configuration files for simulated objects (e.g., ground vehicles, surface vessels).
  - Define common components and use variables for differing parameters.
  - Edited using MTL syntax in a text editor or Simulation Object Editor.

- **System Definition Files (.sysdef)** define component systems (weapons, sensors, movement) for VR-Forces simulation objects.
  - They have two main sections: **data** (components & connections list) and **metadata** (SOE presentation & integration instructions).
  - Weapon/damage systems use a template file (.template_sysdef) and a specific .sysdef file.

- **Creating a new .sysdef file**:
  - Copy an existing one, then add desired components using SOE or text editor.
  - Format uses MTL syntax. Example:
    ```mtl
    (system-name
      ...
      (meta-data
        (system-name "Spot Report Generator")
        ...
      )
      (parameter-data-list
      )
    )
    ```

- **Configuring System Connections**:
  - List connections among components within the .sysdef file.
  - Some systems may connect to external components. Example: M1A2's visual sensor connects to 'visual-sensor.sysdef' with specified parameters.

- **Integration**: The componentSystem element in a .entity file references the related .sysdef file, and the connection section in the .sysdef file defines component interactions.

- **System Definition Files**:
  - Define component (system) connections in VR-Forces simulations.
  - **Connections**:
    - Input: `system:object-types-to-detect`  `visual-sensor:object-types-to-detect`
    - Output: `visual-sensor:detected-objects`  `system:detected-objects`
    - Sensor offset: `system:sensor-offset`  `visual-sensor:sensor-offset`
  - **Metadata**:
    - Name: "Visual Sensor"
    - Description: Detects objects through visible light.
    - Allowed state repository types: "all"
    - Categories: "sensor"

- **Auto-connection Blocks (in OPE files)**:
  - Match systems of specific categories to appropriate controllers using templates.
  - Example:
    ```
    (auto-connection
     (source-controller "target-selection")
     (source-port-name "object-types-to-detect")
     (destination-category "sensor")
     (destination-port-name "object-types-to-detect"))
    ```

- **Connection Resolution**:
  - VR-Forces uses auto-connections in OPE files to determine external components for generic systems specified in system definition files.
  - Example: Visual sensor connects to target-selection controller via `object-types-to-detect` port.

- **Information Exchange**: Systems using templates can exchange information between template and individual system files via the "all" connection.

- **Adding New Systems/Connections**:
  - Users typically copy existing systems, changing parameters as needed. Auto-connections handle intersystem connections.
  - Developers adding new component types must add new auto-connection blocks to appropriate OPE files for them to connect.

- **Variable Bindings**: Platform and system files can have varying parameter values for different simulation objects using them by adding variable bindings to these files.

- **Variable Bindings in VR-Forces:** Allow changing parameters between simulation objects.

- **Adding Variable Bindings:**
  - Replace hard-coded values with variables in platform/system definition files (e.g., `is-organized True`  `$entity-is-organized`).
  - Optionally, set a default value for the variable (e.g., `(default "True")`).
  - Add the variable to the .entity file with its type, name, and value (e.g., `<bool paramName="entity-is-organized">True</bool>`).

- **Editing Variables in Simulation Object Editor:** New variables can be made editable in the SOE.
  - Platform file variables: General, Physical, Movement tabs.
  - System definition file variables: Individual systems' Properties dialog boxes.

- **Important Note:** If an .entity file doesn't reference a modified platform/system definition file, it uses default values, which may cause unexpected behavior.

- **Variable Binding Addition Methods Differ:**
  - Platform variables: Edited in General, Physical, and Movement tabs (controlled by .ui files).
  - System variables: Added directly to platform OPE files.

- **Platform Variable Editing:**
  - Edit .ui files using text editor or Qt Designer (included with VR-Forces).
  - Use underscores for variable names in .ui files.
  - Copy and paste existing items for new attributes, edit as needed.
  - Set display-units and source-units properties for units-based attributes.

- **UI File Details:**
  - GUI controls specified in 'item' elements with widget class and objectName (platform variable name with dashes to underscores).
  - Data entry widgets create fields based on variable type.
  - Additional properties can be assigned, such as:
    - element_type: reader/writer type or internal type for data entry field.
    - enable/disable conditions: enable_if_checked, disable_if_checked.
    - multiple selection editing: disable_if_multiple_selection.
    - default hiding: hide_by_default.

- **Key Points:**
  - Different methods for adding platform and system variables.
  - Edit .ui files using text editor or Qt Designer to manage platform variable bindings.
  - Understand UI file structure, properties, and available widgets for effective variable binding management.

- **Hidden Item:** An item selected is initially hidden and becomes visible upon clicking the 'Advanced' button.
- **Signal Slot Mechanism:**
  - For push buttons, a specific slot function is executed when a particular signal is sent.
  - Format: `<signal>;<referencedControl>;<slot>`
  - Example: `released();bounding_volume;`

- **Variable Bindings:**
  - Add variable bindings to platform and system files in the Object Parameter Database (OPD).
  - To change a parameter to a variable binding, create the binding and update the metadata section of the system definition file.

- **Properties of Simulation Objects:**
  - Simulation objects have properties like ordered speed, mass, and force stored in their state repository.
  - Add:
    - State properties: Stored locally or published on the network, accessible via Lua scripts or C++ API, changeable at runtime.
    - Parameter properties: Static values that cannot be changed at runtime.

- **Defining Properties:**
  - Define these properties in OPE files (state-data for states, parameter-data for parameters) or within sim components in sysdefs.
  - Syntax for defining a state property: `(type property_name default [publish record_type])`
  - Example:
    ```
    (state-data
      (DtRwInt TargetsMissed 0)
      (DtRwInt NumberOfWheels 4 publish)
    )
    ```

- **Binding State Properties to Variables:**
  - Bind state properties to variables, allowing different values for different simulation objects.

- **Binding State Properties to Variables:**
  - Format: `(type property_name variable [(default default_value) publish record_type])`
    - `type`: Data type (see Table 67 for supported types)
    - `property_name`: Property name
    - `variable`: Variable name to add the property
    - `(default default_value)`: Optional default value
    - `publish`: Optional flag to publish the state property
    - `record_type`: Optional parameter for publishing

- **Example:**
  ```ope
  (state-data
    (DtRwInt NumberOfWheels $number-of-wheels (default 4) publish)
  )
  ```

- **Data Types Supported:**
  - Table 67 lists data types, their descriptions, and HLA representations/encodings

- **Accessing State Properties using Lua Scripts:**
  - Get value: `local hits = this:getStateProperty("TargetsHit")`
  - Set value: `this:setStateProperty("TargetsHit", 2)`
    - Optional third argument to create property if it doesn't exist
    - Complex properties should be added via OPE file, not Lua

- **Adding User-Created State Properties to Information Dialog Box:**
  - Edit `./appData/settings/vrfGui/default_guiConfiguration.gui`.
  - Find `DtEntityInformationPage` and add `<informationitem>` for each state property.
    - Format: `<informationitem informationitemname="DtStatePropertyPageItem:MyStateProp:Display Name"/>`
      - `MyStateProp`: State property name from OPE file.
      - `Display Name`: Text to display in the Information dialog box.

- **Example: Adding and Using State Properties (hasWheels, numWheels) for Ground Vehicles:**
  - Add state properties to `./data/simulationModelSets/sms_name/vrfSim/platforms/Ground_Vehicle.ope`:
    ```
    (state-data
      (DtRwBoolean hasWheels $has-wheels publish)
      (DtRwInt numWheels $number-of-wheels (default "4") publish)
    )
    ```
  - Add state properties to the Simulation Object Editor (`./data/simulationModelSets/sms_name/gui/ui/ground-vehicle-param.ui`):
    - `has_wheels`: Checkbox for 'Has Wheels' property.
    - `number_of_wheels`: Line edit for 'numWheels', enabled only if 'has_wheels' is checked.

- **Scripted Set Example:**
  ```javascript
  this.setStateProperty("hasWheels", true, false);
  this.setStateProperty("numWheels", 6, false);
  ```

- **Variable Editable & Platform Variable Bindings:**
  - Checkbox label: "Has Wheels", Type: `DtRwBoolean`
  - QLineEdit widget name: `number_of_wheels` (references `$number-of-wheels`)
  - Enable if checked (`has_wheels`) enables `number_of_wheels`

- **Qt Designer & Simulation Object Editor:**
  - Edit `ground-vehicle-param.ui` using Qt Designer; set objectName to variable name
  - Update SOE: Start, load SMS file, regenerate SMS files

- **User Interface Changes:**
  - Adds "Has Wheels" checkbox and `number_of_wheels` data entry field to ground vehicles (Figure 628)

- **Information Dialog Box:**
  - Add state properties (`hasWheels`, `numWheels`) for display in the Information dialog box (Figure 629)

- **Scripted Set for Wheel Configuration:**
  - Create "Set Wheels" scripted set with parameters matching state properties; valid for land entities, on Set menu
  - Lua script: gets, sets, and confirms new wheel values (`hasWheels`, `numWheels`)

- **State Properties Management:**
  - Lua script uses `vrfutil` library to manage entity (vehicle) state properties.
  - Initializes by retrieving current state properties: `hasWheels` and `numWheels`.
  - Prints vehicle's wheel status and number if it has wheels.
  - Updates state properties with new values from a dialog box after user input.
  - Tests updated state properties by printing the vehicle's wheel status and number.

- **Task Creation (Move to Base):**
  - Scripted task uses entity's `hasWheels` and `numWheels` state properties to determine route.
  - If vehicle has wheels:
    - 4 or fewer: uses "Light" route.
    - More than 4: uses "Heavy" route.
  - If vehicle doesn't have wheels, assumes it's tracked and uses "Tracked" route.
  - Task ends when move-along subtask is complete.

1. **Object Parameter Database (OPD) and Simulation Model Set Files:**
   - Do not modify default VR-Forces object parameters.
   - If using the VR-Forces toolkit, create new tactical graphics with their own parameters in the OPD.
   - Simulation model set files (.entity, system definition files) use relative paths and directory variables for file relationships, allowing custom model sets to remain outside of the VR-Forces file hierarchy.

2. **Pathname Interpretation:**
   - Example: `EntityLevel.sms` uses `model-set-directory` binding, which is then used in `vrfSim.opd` and `.entity` files.
   - This allows maintaining custom simulation model sets without having to move them during VR-Forces updates.

3. **Configuring Sensors (Chapter 72):**
   - VR-Forces includes various sensors such as radar, infrared, visual, magnetic anomaly detector (MAD), and sonar.
   - Complete sensor configuration requires:
     - One or more `componentSystem` elements in the .entity file for sensor systems.
     - A list of sensor signature values in the .entity file for detectable entity types.
     - A signature propagator entry in the physicalWorldParams.mtl file (one per sensor domain).
   - Add new sensors to simulation objects using the Simulation Object Editor or by editing their .entity files manually:
     1. Copy and paste an existing `componentSystem` element.
     2. Change the `systemName` to be unique.
     3. Update the system definition file name.
     4. Specify required variables for the new sensor.

**Key Points Retained:**
- Respect default VR-Forces object parameters, but create custom graphics with the toolkit.
- Understand and use relative paths and directory variables in simulation model set files.
- Configure sensors by adding components, specifying signatures, and using signature propagators.
- Add new sensors to objects via the editor or manually editing .entity files.

- **Auto-Connection Feature:** Sensors provided by MAK support auto-connections, which handle connections automatically.

- **Manual Connection for New Sensors:**
  - Connect new sensors' input port (e.g., `object-types-to-detect`) to the system.
  - Send data from the sensor's output port (e.g., `detected-objects`) back to the system.
  - Example:
    - Visual sensor: `(connect system:object-types-to-detect visual-sensor:object-types-to-detect)`, `(connect visual-sensor:detected-objects system:detected-objects)`, and `(connect system:sensor-offset visual-sensor:sensor-offset)`.
    - Acoustic sensor: `(connect system:object-types-to-detect acoustic-sensor:object-types-to-detect)`, `(connect acoustic-sensor:detected-objects system:detected-objects)`, and `(connect system:sensor-offset acoustic-sensor:sensor-offset)`.

- **Sensor System Definition File (sysdef):** Contains parameters like sensor type, detection types, geometry, offset, domain, sensitivity, etc. Most parameters are variables set in the .entity file.

- **Sensor Signature:**
  - Indicates a simulation object's detectability by other objects with corresponding sensors.
  - The signature value is affected by modifiers and calculations made by the propagator.
  - Modifiers specify multipliers for the base value based on the current state of the object.
  - Example: A human entity has visual, infrared, and radar signatures with respective base values and modifiers defined in the .entity file.

- **Making an Object Undetectable:** Remove the unwanted sensor signature from the .entity file to make a simulation object undetectable by that specific sensor domain.

- **Editing Sensor Signatures:**
  - You can edit the values of sensor signatures in the Simulation Object Editor.
  - However, you cannot add new sensor signatures from within the Simulation Object Editor.

- **Predefined Sensor Signatures:** VR-Forces has a set of predefined sensor signatures located at `./data/simulationModelSets/EntityLevel/extra/sensor-signatures.csv`.
  - These values are used to quickly set standard sensor signatures for entities in various sensor domains.
  - They are also utilized when editing the properties of a sensor system in the Simulation Object Editor.

- **Sensor Signatures for Entity Categories:** Table 68 lists the sensor signatures that VR-Forces uses for general categories of simulation objects in `EntityLevel.sms`.
  - These categories do not match the tags list in the Simulation Object Editor or those in the `sensor-signatures.csv` file.
  - They represent a more granular approach to categorizing simulation objects for the purpose of applying a consistent set of sensor signatures.

The text discusses sensor configurations and detection probabilities in VR-Forces:

1. **Entity Sensor Signatures:**
   - Entities are categorized into Civilian (Large/Medium/Small Commercial, Private, Sailboat, Lifeboat) and Military (Submarine, Human, Vehicle).
   - Each entity has signatures for Visual, Radar, Infrared, Sonar (Active/Passive), and MAD.
   - Signature values represent the entity's strength in each sensor category. For example:
     - Civilian Large Commercial: 45 (Visual), 50 (Radar), 50 (Infrared), 10 (Sonar), 8 (Active Sonar).

2. **Sensor Detection Probabilities:**
   - Sensors can have a detection probability table, adding variability to target detection.
   - The detection probability is applied per sensor detection period (e.g., radar sweep).
   - It influences initial and continuing detections:
     - Initial: If an object's random draw against the probability passes, it proceeds to CID level determination. Otherwise, it's treated as undetected until the next detection run.
     - Continuing: Detected objects have a random draw against their current apparent signature's detection probability. If passed, they remain detected; otherwise, they're processed again in the next detection period.

3. **Key Points:**
   - Entities' sensor signatures vary, affecting their detectability by different sensors.
   - Sensor systems may have detection probabilities, influencing initial and continuing detections.
   - Detection probabilities are applied per detection period (e.g., radar sweep) and affect CID level determination for initially detected objects.

1. **Entity Update and Detection:**
   - Upon detection, a target's location and CID (Combat Identification) level are updated if appropriate.
   - If the update check fails, the entity remains on the detection list but its contact information is not updated with new data, including location and CID level.
   - The target is reprocessed during the next sensor detection run.

2. **Adding Sensor Detection Probability Table:**
   - An example shows how to add a detection probability table to an active-radar-sensor system.
   - Detection probability remains constant (0.2) across different signature levels (1.0 to 4.0).

3. **Sensor Detection Issue and Resolution:**
   - Problem: Sensor not detecting anything due to the simulation object lacking a weapon.
   - Solution: Specify object types to detect in the sensor's system definition file.

4. **Adding New Sensor Domain (Acoustic Sensor):**
   - Steps:
     1. Edit `physicalWorldParams.mtl` to add an acoustic sensor.
     2. Add an acoustic sensor component to entities capable of detecting targets acoustically.
     3. Add an acoustic sensor signature to simulation objects that can be detected acoustically.
   - Acoustic sensors do not require line-of-sight checking as they can detect objects beyond visual range.

5. **New Acoustic Sensor Configuration:**
   - An example configuration for an acoustic sensor includes specified detection types, geometry, domain, offset, positional error, and detection level determinator.

- **Sensor Configuration:**
  - Connect system's detected objects to sensor's detected objects.
  - Avoid starting sensor names with a number.

- **Adding a Sensor Signature:**
  - Add new sensor signatures to each detectable simulation object.
  - Example: Acoustic sensor signature `(sensor-signatures (visual ...)(acoustic ...))`.
  - Visual sensors have higher range, so lower base-signature value for acoustic sensors.

- **Illumination and Time of Day:**
  - Visual sensors consider time of day using illumination value in `./data/simulationModelSets/<model_set>/vrfSim/signatureRules/visual-illumination-rules.mtl`.
  - Illumination value derived from time of day parameters in `physicalWorldParams.mtl`.

- **Rain Effects on Radar:**
  - Rain reduces radar's effective range based on rainfall, distance, and `rain-to-attenuation-coefficient` in `radar` block of `physicalWorldParams.mtl`.
  - Higher coefficient value means greater rain reduction.

- **Detection Tables:**
  - Determine detection level (knowledge) of detected objects using detection tables.
  - Each column represents a detection interval (0-160 seconds), each row an apparent signature (1-4).
  - Detection level found by intersecting apparent signature and detection interval.
  - Apparent signature = sensor signature / actual range.

- **Weapon Systems Configuration:**
  - Configures weapon systems in entity-level scenarios using configuration files.
  - Weapon types: Ballistic direct fire, self-propelled or guided munitions, indirect fire, fixed munition, bomb bay.
  - Configuration files:
    - System definition template (.template_sysdef): Component definitions (controllers, actuators, sensors).
    - System definition (.sysdef): System-specific parameter values and targeting information (ammunition, hit probabilities, target priorities).
  - Engagement process:
    - Objects with weapon systems engage targets using tasks like 'Fire At Target', 'Fire For Effect'.
    - Autonomous engagements require a sensor for target detection.
    - Weapon systems configured to engage specific target types.
  - Target selection controller:
    - Controls automatic engagements, separate from any one weapon system.
    - Specified in the platform (.ope) file.
    - Communicates with weapons through a weapon interface (process state repository).
  - Fire interactions: Generated by weapon systems and published on the network for an engagement.

- **Detonation & Damage:**
  - Detonations can be triggered by weapons or munitions.
  - Damage determination varies based on target and can be configured via:
    - Munition power to damage mapping.
    - Damage probability tables for each munition type against each target type.
  - Refer to "74.1.1 Calculating Damage from Munitions" (page 1510) for detailed calculation.

- **Weapon System Configuration:**
  - Weapon systems use template and system definition files for setup.
  - Template files (.template_sysdef) contain common components, attribute variable bindings, and SOE metadata.
  - System definition files provide weapon-specific values and include targeting control and hit probability tables.
  - Advanced users should edit weapon systems via the Simulation Object Editor (SOE).

- **Handheld Launcher Example:**
  - `handheld-launchers.template.sysdef` snippet shows component, resource, and metadata configuration.
  - Parameters like Gun Location and Gun Part Number are entity-specific editable fields.
  - The number of rounds parameter is a variable binding with default values set in system files using this template (e.g., `handheld-AT4.sysdef`).

- **Weapon System Configuration:**
  - Weapon systems combine metadata from template files by default. To prevent merging, set `merge-with-sub-systems` to False in the metadata.
  - Example: Handheld AT4 (AT4.sysdef) references handheld-launchers.template.sysdef, providing values for load/unload ammo time and other variables like velocity-affects-hit-chance and max-skill-level-effect.

- **Targeting Control Table:**
  - Defines weapon's targeting behavior:
    - Ammunition list: M84mm (amount specified by $num-rounds)
    - Target priorities based on target types
    - Maximum number of targets: 1
    - Target region: within 30 to 300 meters, not firing with spot report only
  - Uses a hit probability table for determining weapon's hit chance.

- **Hit Probability Table:**
  - Hit probabilities at different ranges:
    - Up to 100m: 90% chance of hitting the target
    - Up to 200m: 50% chance
    - Up to 500m: 30% chance
    - Up to 750m: 10% chance

- **Weapon System Creation:**
  - Entities with direct fire weapons can perform target detection, ammunition selection, target acquisition, and firing.
  - To create a new weapon system:
    - Understand an existing similar system's configuration or write code for sensors, controllers, and actuators.
    - Use Simulation Object Editor to add/edit weapon systems; configure the system and specify compatible simulation object types.

- **Damage System Configuration:**
  - Define simulation object types vulnerable to damage and their respective damage files.
  - Configure direct fire weapons' behavior:
    - Acquire target.
    - Select ammunition using 'ammo select file'.
    - Check resource availability.
    - Determine hit probability.
    - Send fire interaction.
    - After delay, send detonation interaction.

- **Weapon System Configuration:**
  - Weapon system template: Configures common components (e.g., ballistic guns or missile launchers).
  - Weapon system: Defines specific systems with target types, ammunition types, hit probabilities, and users.
  - Damage system: Specifies vulnerable munition types and damage files.

- **Direct Fire Weapons Configuration:**
  - Sensors detect targets based on specified parameters (e.g., 'detection-types', 'targeting-control').
  - Weapon systems can influence target selection via 'entity-target-priorities'.
  - Target selection controller iterates through weapon interfaces to create a list of object types to detect.
  - Ammunition configuration:
    - 'ammunition-list' block specifies usable ammunition types for each weapon system.
    - Prioritized ammunition lists are defined per target type using 'priority-entry'.
    - Available ammunition types listed in './data/simulationModelSets/<sms>/ammunitionParams.mtl'.

Each ammunition type in `ammunitionParams.mtl` has parameters defining its characteristics and representation in the Simulation Object Editor:

- **munition-type**: 7-digit object type enumeration for fire and detonation interactions.
- **tracer-type** (optional): 7-digit object type enumeration for weapons supporting tracer rounds.
- **warhead**: VR-Link warhead enumeration value used in fire and detonation interactions.
- **guidance-mode**:
  - How the munition is guided, if applicable.
  - Options: 0 - None, 1 - Laser, 2 - Optical Wire, 3 - Radar, 4 - Thermal.
- **gui-label**: String identifying the munition in the Simulation Object Editor.
- **targets**: List of object type enumerations for simulation objects the weapon can target.
- **tags**: Tags used for filtering munitions in object lists.

**Examples:**
- Spiral Missile (AT-6): No tracer, unguided, targets various entities.
- 30mm Gun (AT-30mm): Supports tracers, unguided, targets ground vehicles and infantry.

**Hit Probability Tables:**
- Weapon system definition files include hit probability tables for determining hits on fired-upon targets.
- Each table has one or more **entity-range entries**, containing:
  - **entity-type**: 7-digit entity type enumeration (may use -1s as wildcards).
  - **range-determinant**:
    - **range-list** (list of probability-range entries):
      - Each entry has a name, range value (meters), and probability entries.
      - Probability is zero for ranges greater than the last specified range.
    - **coefficients** (list of coefficient probability entries): Determines probabilities using polynomial coefficients.

**Missile Range:**
- For missiles, the range is measured from the missile to the target, not from the entity that fired it.

- **Hit Probability Table Format:**
  - Format: `(probability coefficient1 coefficient2 constant)`
  - Example: `(-5.00000E-008 -300000E-012 1.0000)`
  - Formula: `-coefficient1 * r^2 + coefficient2 * r + constant`
  - Constraints:
    - Values are between 0.0 and 1.0.
    - Zero coefficients are factored out.

- **Handheld-AK47 Hit Probability Table:**
  - Ranges: `10.0`, `200.0`, `550.0`, `3600.0`
  - Corresponding probabilities: `1.00000`, `0.9000`, `0.70000`, `0.01000`

- **Damage Probability Tables:**
  - Used by damage actuator to determine direct and indirect fire damage.
  - Located in `./data/simulationModelSets/<sms>/vrfSim/systems/damage`.
  - Each table has surface entries with sub-tables for each surface a round might detonate on.

- **Missile Systems Configuration:**
  - Missiles are launched by an object's missile launcher system.
  - Hit probability tables determine if a missile hits its target. If no table or target type not listed, detonation is based on missile type:
    - Direct flight: Missiles fly directly to the target using maneuverability parameters for accuracy.
    - Laser guided: Missiles follow a laser designator to the target. If the laser is blocked or disrupted, the missile goes to the last known location of the target.
    - Route following: Some missiles can follow a route to a target and detonate either at the target or at a proximity to it.
  - Range for missiles is from the missile to the target, not from the entity that fired it.

- **Missile Launcher Process:**
  1. Target selection controller chooses best target.
  2. Weapon system's controller determines right resource for target type.

1. **Missile Launch & Target Acquisition:**
   - Missile resource is returned and loaded.
   - Entity sends desired rotation angle and elevation to actuators (rotating mount and elevation mount) for target acquisition.
   - Actuators move based on slew rate speeds, sending feedback for recalculation of remaining movement. They also publish articulated part numbers and rotation/elevation data to the network.
   - When feedback reaches max angle off boresight, missile object is created, and firing state is sent to launcher actuator.

2. **Missile Flight & Detonation:**
   - Missile controller determines values for missile-maneuver actuator based on movement parameters (target entity or location).
   - Missile-maneuver actuator calculates new position, velocity, acceleration, and orientation.
   - Missile-collision actuator checks for terrain or entity collisions; if a collision occurs, it sends a detonation interaction.

3. **Laser-Guided Missile Launcher & Projectile:**
   - Target selection controller chooses best target and passes it to weapon system.
   - Lasing controller looks for actively lased target or autonomously lases one if possible.
   - Once lased target is acquired, launcher controller rotates towards target within fire cone, creates missile object, and sends fire interaction.

4. **Indirect Fire Weapons:**
   - Indirect fire weapon systems use 'indirect-fire-weapon-controller' and respond to indirect fire tasks (e.g., Fire-for-Effect or Throw Grenade).
   - Upon receiving an indirect fire task, simulation object's indirect-fire-controller queues the task and checks for available indirect fire weapons.

1. **Indirect Fire Weapons Process:**
   - An indirect-fire-controller continuously checks for available weapons.
   - Upon availability, it sends fire tasks to the weapon via the indirect weapon interface.
   - The indirect-fire-weapon-controller reads the task, aligns the turret, loads the specified munition, and passes firing information to its actuator.
   - The indirect-fire-actuator creates the desired munition and initiates the fire interaction.

2. **Controllers and Weapons:**
   - Controllers (indirect-fire-controller & weapon-controller) are located in different simulation objects:
     - Indirect-fire-controller: On the simulation object with the weapon system (in the platform OPE file).
     - Indirect-fire-weapon-controller: Within the indirect fire weapon system.
   - Examples of indirect fire weapons include M284-155mm cannon, M252-81mm mortar, MK45 naval gun, and hand grenades.

3. **Munitions and Damage:**
   - Munitions used by indirect fire weapons have explosive power configured in `detonationParams.mtl`.
   - They can cause damage to susceptible simulation objects based on their damage system definition files and associated damage table files.

4. **Weapon Parameters:**
   - Weapon system parameters (usage & effectiveness) can be set or modified using the Simulation Object Editor:
     - Attributes tab: Controls when weapons can be used.
     - Firing tab: Adjusts weapon effectiveness.

5. **Fixed Weapons (Mines & IEDs):**
   - Triggering methods for fixed munitions include immediate detonation, proximity of a valid target, or timed detonation.
   - The detonation controller processes trigger messages and arms/detonates the weapon based on these methods.
   - The warhead-actuator checks for armed/trigger messages, terrain collisions, and simulation object collisions before sending a detonation interaction over the network.

6. **Fixed Weapon Types:**
   - VR-Forces features two types of fixed weapons: naval mines and IEDs (simulation objects with an explosive device system).
   - IEDs require a sensor to detect targets; for example, the Roadside IED object uses a visual sensor.
   - Ammunition, detection targets, and fuse type can be specified in the Simulation Object Editor's Targets tab.

- **Naval Mines:**
  - System definition: `./data/simulationModelSets/EntityLevel/vrfSim/systems/weapons/naval-mine-explosive-device.sysdef`
  - Built-in proximity sensor for target detection
  - Configurable in Simulation Object Editor:
    - Ammunition type
    - Targets to detect
    - Fuse type
  - Can convert entities into IEDs by adding the explosive device system

- **Bomb Bay Weapon Systems:**
  - Releases bombs based on 'Release Bomb' tasks (direct or laser-guided)
  - Movement controlled by `./data/simulationModelSets/EntityLevel/vrfSim/systems/movement/smart-bomb-dynamics.sysdef`
  - Configurable in Simulation Object Editor:
    - Ammunition type
    - Targeting parameters

- **Weapon Systems Configuration:**
  - General tab for identification, physical parameter tabs, and Targets tab for targeting configuration
  - Targeting includes:
    - Hit probability (range list or coefficient list)
    - Ammunition type
    - Target priorities
    - Target region
  - Aids: Target Configuration Assistant, Configuration Status window

- **Adding/Configuring Target Types:**
  - Weapon systems have one or more target types (add, edit, remove)
  - Specify Hit Data and possibly an ammunition type for each target type
  - Creation options:
    - Copy Currently Selected (hit table)
    - Create Empty Range Table/Coefficient Table

- **Editing Hit Probability Table:**
  - Select the desired weapon system.
  - Go to the "Targets" tab.
  - Choose the target type you want to configure.
  - Edit probabilities following the instructions in section "65.8.2 Editing Probability Tables" on page 1336.

- **Adjusting Hit Probability Based on Skill Level:**
  - Entities have skill levels: novice, experienced, or expert (default is expert).
  - Skill level influences hit probability based on the 'Maximum Skill Level Effect' parameter:
    - Novice: up to +20% shift.
    - Experienced: up to +10% shift.
    - Expert: no shift.
  - Set 'Maximum Skill Level Effect':
    - For direct fire ballistic weapons, set it on the "Attributes" tab.
    - For indirect fire weapons (artillery and mortars), set it on the "Firing" tab.

- **Managing Ammunition Types:**
  - **Adding ammunition types:**
    - Select the weapon system.
    - Go to the "Targets" tab.
    - Click the 'Add' button above the "Ammunition" window.
    - Choose an appropriate ammunition type and click OK.
  - **Creating new ammunition types:**
    - From the "Targets" tab: Click 'Add', then 'Add New from Existing'. Fill in details and select the Munitions tab to specify parameters.
    - From the "Munitions" tab: Select a new type, then specify its parameters.
  - **Removing an ammunition type:**
    - Select the weapon system.
    - Go to the "Targets" tab.
    - In the "Ammunition" window, select the row for the desired ammunition type.
    - Click the 'Remove' button.

The VR-Forces User Guide outlines how to configure weapon systems using the Target Configuration Assistant and manage target priorities.

**Key Points:**

1. **Target Configuration Assistant:**
   - Allows configuring target type, hit probabilities, and ammunition in a single dialog box.
   - Access it via: Select weapon system > Targets tab > Hit Probabilities section > Target Configuration Assistant button.
   - Enter maximum range, hit probability, choose ammunition (alerted if not configured for the target), then click OK.

2. **Weapon System Configuration:**
   - Verify configuration status after adding a new target type.
   - Optionally, set weapon target priorities and target region.

3. **Configuring Target Priorities:**
   - Weapons fire based on assigned target priorities.
   - Add a new priority: Select weapon system > Targets tab > Add button > Specify object type > OK.
   - Edit or change the order of existing targets to modify their object types or priorities, respectively.

- **Weapon System Editing:**
  - Choose the weapon system to edit.
  - Go to the 'Targets' tab.
  - Change target priority using up/down arrows.

- **Target Region Configuration (for applicable weapon systems):**
  - Set minimum and/or maximum range for a target region.
  - Optionally, configure a frustum with specified azimuth and elevation values, and choose if it's inside or outside the frustum.

- **Missile Launcher Systems:**
  - Configure ammunition and weapon target priorities.
  - Choose hit probability calculation method:
    - Simulate missile guidance (calculate based on missile type).
    - Use probability table.
    - Configure like a direct fire weapon system.

- **Explosive Devices Configuration:**
  - Set detonation proximity distance.
  - Select supported impact types.
  - Specify ammunition type and detectable object types.

- **Damage Systems**: Based on templates (.sysdef files) specifying damage actuators and metadata, configured using Simulation Object Editor (SOE).
  - Calculates damage via 'damage-by-power' method, preferred for entity-level objects.
  - Can also use 'damage-by-ammo-type' if needed.

- **Configuring Damage-by-Power**:
  - Each munition has a 'detonation-power-entry' block in ./data/simulationModelSets/base/detonationParams.mtl.
  - Example: 7.62 mm bullet with kinetic power of 2.24 kJ.
  - Supported domains: Explosive (kPa), Kinetic (kJ), Armor-piercing.

- **Configuring Detonation Power in SOE**:
  - Edit damage systems using SOE's point-and-click interface, handling syntax issues and error checking.

- **Damage File for Damage-by-Power**:
  - Defines damage based on power levels for different munition types.

- **Adding New Power Type**:
  - Extend supported domains without writing code.

- **Configuring Damage in SOE**:
  - Configure damage power entries, impact surfaces, angle of incidence, and effect data using SOE.

- **Viewing Inter-Object Damage Probability Results**:
  - View results after configuring damage systems.

- **Configuring Damage for Dynamic Terrain**:
  - Standard and High Fidelity terrain damage configurations available.

- **Configuring Detonation Results**:
  - Set up detonation results based on configured damage systems.

- **Munitions Types:**
  - Armor Piercing: Power measured in millimeters of penetration.
  - Fragmentation: Explosives causing damage by fragmenting (e.g., grenades).

- **Detonation Power Configuration:**
  - Configured by editing `detonationParams.mtl` or using the Simulation Object Editor (SOE).
  - Requires defining a power determinant that maps range to power value.

- **Range-from Options for Determinants:**
  - `impact-point`: Power based on distance from the detonation's impact point.
    - Used for explosive and fragmentation domains, can also apply to other area-of-effect powers like shrapnel or incendiary damage (equivalent to collateral damage).
  - `shooter-to-impact`: Power based on the range from the entity that fired the round to the point of impact.
    - Used for kinetic and armor-piercing domains, applies to direct damage with no area of effect.
  - `unused` or `shooter-and-impact-point`: Special cases used by specific determinant types.

- **Determinant Types:**
  - `range-coefficients`: Calculates power using a series of coefficients, similar to hit probability coefficients but with any output value greater than or equal to zero.
  - `range-list`: Determines power based on a step function, mapping specific ranges to corresponding power values.

- **Damage-by-Power Configuration:**
  - Similar to hit probability range-list, but output value can be any number >=0.
  - Example: Explosive damage with varying power based on range from impact point.

- **Direct Determinant:**
  - Produces constant power at the point of impact, regardless of shooter's range.
  - Ignores 'range-from' setting as range input is unused.
  - Example: Kinetic damage with a fixed power value (272.873 kJ).

- **Equivalent TNT Mass Determinant:**
  - Defines an amount of TNT (in kg) that produces equivalent explosion power at a specified range in kPa.
  - Used only for explosive damage category.
  - Example: M107 HE munition with 5.74 kg of TNT.

- **Configuration Process:**
  - Configure detonation power on the 'Detonation' tab in the Object List's Munitions section.
  - Edit power type using range-list, coefficient-list, direct, or equivalent TNT mass determinant.
  - Add/remove power types and change determinants as needed.

- **Managing Determinants:**
  - Access determinant options by clicking 'Edit' on the Power List line.
  - Select determinant type (step-function or coefficients).
  - Input data for the new determinant, including relevant probabilities and power thresholds.
  - Confirm changes by clicking 'OK'.

- **Damage System Configuration (Damage-by-Power):**
  - Damage configuration occurs through system definition files and referenced damage files.
  - Damage calculation is based on the affected side of an entity's bounding volume.
  - Surface entries with angle-of-incidence are used, each containing an angle in radians.
  - The determinant block defines damage, including probabilities for catastrophic-kill, mobility-kill, firepower-kill, or a combination.
  - Example: `ground-heavy-armor.sysdef` uses a step-function determinant with power thresholds and corresponding kill probabilities.

- **Adding New Power Type:**
  - Include the new power type in relevant munitions within `detonationParams.mtl`.
  - Add the new power type to `./appData/settings/simulationObjectEditor/powerTypes.csv`.
  - Integrate the new power type into the appropriate damage system.
  - Example: Adding 'thermal power' for an 85mm HEAT round involves these steps.

1. **Add new power to detonation system:**
   - Append a new power entry (e.g., `thermal`) within the `detonation-power-entry`.
   - Define its properties:
     - `range-from`: Specify the reference point for range calculation (e.g., `"impact-point"`).
     - `range-list`: List ranges with corresponding powers.
       ```
       (range 3.5
         (power 70.0)
       )
       ```

2. **Configure damage systems for affected objects:**
   - Append a `damage-by-power-entry` within the relevant system definition file (e.g., `lifeform-default.sysdef`) for the new power type.
   - Define damage values for different sides (front, left, right, etc.).

3. **Add new power type in Simulation Object Editor:**
   - Update `powerTypes.csv` with the new power's details:
     - Power name
     - Axis labels (without/with addition)
     - Human-only flag (`true` or `false`)
     - Default range type
     - Supported ranges (comma-separated list)

4. **Configure damage in SOE:**
   - Enable/disable damage power types using the GUI.
   - Configure impact surfaces:
     - Select a damage power entry.
     - Choose "All Surfaces Identical" under Impact Surface options.
     - Pick a representative surface from the Select Surface dialog box.

**Key Points Retained:**
- Added new power (thermal) to detonation system with defined properties.
- Configured damage systems for affected objects (lifeforms in this case).
- Updated Simulation Object Editor with the new power type.
- Explained how to configure damage power entries and impact surfaces using SOE's GUI.

- **Configuring Damage Systems:**
  - Specify angles of incidence and corresponding effect data.
  - If damage varies per surface:
    - Select the damage power.
    - Choose 'Configure Surfaces Independently'.
    - Select a surface to edit.
    - Optionally, specify angles of incidence (0-90, total range) and corresponding effect data for each surface.

- **Configuring Angles of Incidence:**
  - Add or edit angles using respective buttons next to the Angle of Incidence label.
  - Enter angle in degrees when adding or editing.

- **Specifying Effect Data:**
  - Choose between range list (edit ranges and values) or coefficient list (edit probability table).
  - Configure effect data for catastrophic kill, firepower kill, and mobility kill.

- **Problem:** Users may face issues with weapon or damage systems not working as expected, often due to misunderstandings about damage probability calculations.
- **Tool for Resolution:** Use the Damage Probabilities viewer to understand and predict damage outcomes between specific entities.

**Steps to View Inter-Object Damage Probability Results:**
- Open the Damage Probabilities viewer via `View > Damage Probability Results`.
- Select an attacker entity from the dialog box that appears.
- Choose a defender entity from its respective dialog box.
- Observe the probability graph for each weapon system of the attacker against the defender.
- Click on a range in the graph to view the probability of effect result for each weapon system at that range.
- Optionally:
  - Filter graphs by deselecting weapon systems.
  - Reverse the attack-defense relationship using arrow buttons.
  - View configuration pages for entities or weapons using respective 'Edit' buttons.

**Additional Information:**
- Dynamic terrain damage is configured using the damage-by-power approach in `./data/simulationModelSets/base/vrfSim/systems/other/dynamic-terrain.sysdef`.
- Terrain damage methods include standard and high fidelity, supported on certain terrain types (OpenFlight, FBX, Heightfields, Point Model Replace in osgEarth).

1. **Standard Terrain Damage:**
   - Three dynamic terrain areas are created based on explosive power:
     - **High Power (>= 75 kPa):** Area switched to "destroyed"
     - **Medium Power (40-75 kPa):** Area switched to "moderate"
     - **Low Power (15-40 kPa):** Area switched to "slight"

2. **High Fidelity Terrain Damage:**
   - Additional damage areas can be configured for specific dynamic terrain features.
   - Uses a range-based algorithm by default, but custom algorithms can be developed via plugins with additional configuration options.
   - Can produce secondary detonations with configurable delay and munition type.

3. **Detonation Results Configuration:**
   - VR-Forces sends detonation-result messages (e.g., Entity Impact, Ground Impact) when a munition detonates to help applications visualize or process the event.
   - Default results can be customized by editing the `detonation-results-table` in the provided file for each munition type.

- **Detonation Results Configuration:**
  - Specify detonation results using:
    - Strings from `detonation-results-table` comments.
    - Integer values from the SISO Enumerations Document.
  - `DtDetonationManager` converts inputs into network messages and can be API-overridden if editing `detonationParams.mtl` is insufficient.
  - Example: Anti-ship missile's detonation results vary based on impacted entity/surface type (e.g., "entity-impact", "ground-impact", "detonation").

- **Movement Systems Configuration:**
  - Affects simulation object movement, including formations, obstruction avoidance, and embarkation.
  - Formations can be created/edited using Simulation Object Editor or manually via formation files.
  - Each formation file entry includes:
    - Promotion ID: Leader succession order.
    - Leader promotion ID: Position offset reference.
    - Position offset: Relative to leader's body coordinate system.
  - Example column formation file shows objects following the one in front by a set distance, with corresponding leader promotion IDs and position offsets.
  - Formation files have finite entries, but units can contain more simulation objects than available entries.

- **Formation File Management:**
  - VR-Forces increments the promotion-id and assigns the same position-offset to new simulation objects based on the last entry in the formation file.
  - Simple formations work well, but complex ones may result in unintended relationships.
  - Edit formation files to change provided formations.

- **Creating User-Defined Formations:**
  - Use a supplied formation file as a template, add entries with specified offsets, save under a new name, and update the .entity file's formation list block.
  - Example of adding a new formation entry:
    ```xml
    <formation formationName="NewFormation" formationFile="@(formation-dir)/newFormation.frm"/>
    ```

- **Formation Configuration:**
  - Configure formations to follow the leader for better maneuvering.

- **Obstruction Avoidance Configuration:**
  - Ground entities can avoid specific entity types and vector features by modifying the movement system definition file.
  - Add/remove object types in `(object-type ...)` or feature types in `(feature-types-to-avoid (type "FEATURE_TYPE"))`.
  - Adjust `stopping-distance-factor` and `lateral-clearance` parameters to improve entity behavior.

- **Embarkation Configuration:**
  - Entities allowing embarkation have an `occupancy-director-controller` component with configurable ingress-points for embarkation locations.

1. **Entity Movement (Disembarkation & Embarkation):**
   - Entities disembark from pre-defined 'egress-points'.
   - The number of entities that can embark on another entity is defined by the 'embarkation-slots' parameter.
   - Each 'embarkation-slot-entry' specifies:
     - A location on the entity where an embarked entity can be placed.
     - The orientation of the embarked entity.
     - The types of entities that can occupy the slot.
   - 'Ingress-points' and 'egress-points' use 'load-entry' parameters to define entry points or routes for embarked entities. If there are multiple load-entry points, they specify a route to reach the final slot.
   - Embarkation is configured in the Simulation Object Editor (see Chapter 69).

2. **Emitter & Radio Configuration:**
   - All fixed-wing aircraft have emitters as part of their radar sensor, with configurable search modes and beams.
   - Emitter configuration:
     - Add additional 'radar-sensor' blocks for multiple emitters per entity, each with a unique name.
     - Add additional mode blocks to the 'radar-mode-list' for multiple modes on an emitter. Mode names are arbitrary.
     - Add additional 'beam-list' blocks for multiple beams on a radar mode, changing the block name for each beam.
   - Radio configuration:
     - All radios are DtVrfRadio classes or subclasses, managing incoming and outgoing radio messages on a single simulation object.
     - Each radio is associated with a specific communication model to send and receive messages.
     - Radios are configured in platform (OPE) files.

- **Radios in OPE File:**
  - Lists all radios on a simulation object with their parameters.
  - Parameters include:
    - Radio descriptor type (string used to create C++ classes).
    - Radio class type (string used to create C++ classes).
    - Communication model name (identifies which communication model the radio is associated with; every radio must be associated with one).
  - Example entry: `main-radio` with details like `radio-descriptor-type`, `radio-type`, `comm-model-name`, and transmitter settings.

- **Publishing Radio Transmitters:**
  - Required for external communication models.
  - Controlled by two parameters:
    1. `publish-transmitters` in `./data/simulationModelSets/<model_set>/commModelParams.mtl`. Defaults to False for simple model and True for external model.
    2. `publish-transmitter` in entity's OPE file. Set to true for all object types by default.
  - Both parameters must be True to publish radio transmitters.

- **Joystick and Keyboard Controls:**
  - VR-Forces supports joysticks, game controllers, and keyboard keys to control entities (ground, fixed-wing, rotary-wing).
  - Joystick control is managed in the front-end, with messages sent to the back-end on any computer in the simulation.
  - Limitations:
    - Red Hat 7 requires enabling joystick support.
    - Cannot enable/disable for all entities at once; must be done individually.
    - Embarked entities controlled by joystick cannot disembark.
  - To enable joystick control: select the entity, then follow configuration steps outlined in "77.3. Configuring Joysticks and Keyboard Control" on page 1544.

**Key Points Retained:**
- Radio parameters and their usage in OPE files.
- Conditions for publishing radio transmitters.
- VR-Forces' support for joystick, game controller, and keyboard controls for entity movement.
- Limitations and steps to enable joystick control.

- **Taking Joystick Control:**
  - Open 'Take Control' dialog: 'Objects' > 'Joystick' > 'Take Control'.
  - Select a joystick configuration (or use a favorite if set).
  - Choose desired entity functions (e.g., movement, weapons).
  - Confirm with 'OK'.

- **Switching Between Systems/Weapons:**
  - Group systems for similar control.
  - Use dedicated key/button to switch between controlled systems/weapons.
  - Configure weapons with same or different controls for the same functions.
  - No visual indicator in GUI for currently controlled weapon.

- **Managing Multiple Identical Systems:**
  - Rename function groups if controlling them separately (e.g., two chain guns on an Apache).
  - Use Simulation Object Editor to edit system properties and rename function groups.

- **Disabling Joystick Control:**
  - Release control: Select entity > 'Objects' > 'Joystick' > 'Release Control'.

- **Keyboard Controls:**
  - Configured during joystick setup for entity movement and weapons.

- **Control Methods:** Control entity movement and weapon fire using keyboard, joysticks, or both.
- **Multiple Joysticks & Mix Control:** Attach multiple joysticks; use a mix of joystick and keyboard control simultaneously.
- **Configuration:**
  - Configure mappings on the Application Settings dialog box, Joystick Configuration page.
  - Controls available are from system definitions like ground-tracked.sysdef.
  - Edit buttons' behavior based on min-value and max-value parameters:
    - Both set to 1: Key mapping button (Yes/No).
    - Max > 1: Key mapping with increase/decrease or specific value.
    - Min = Max, Max  1: Joystick & key mapping buttons; keyboard specifies percentage change.
- **Creating a Joystick Configuration:**
  - Open scenario, navigate to Application Settings > Joystick Configuration page.
  - Click 'Add', name the configuration matching the joystick's computer ID.

- **Device Function Display:** The window redisplay shows functions controllable by this device.

- **Joystick & Keyboard Configuration:**
  - **Mapping Joystick Stick:**
    - Create a joystick configuration.
    - For each function:
      - Click the corresponding joystick button to open the configuration dialog box.
      - Select the controller to configure.
      - Configure each axis:
        - Choose 'Detect' to let VR-Forces select the axis, then move the joystick in the desired direction.
        - Or, choose 'Select' and pick an axis from the list, then move the joystick to confirm.
        - If the slider movement is incorrect, enable 'Reverse Axis'.
      - Click 'OK'.
    - Repeat for all desired functions.

  - **Mapping Joystick Buttons & Keyboard Keys:**
    - Create a joystick configuration.
    - For each control:
      - Click the 'Key Mapping' button to open the configuration dialog box.
      - If mapping requires a range:
        - For each row, click 'Key Mapping', press the desired key/joystick button, select an action and enter a value, choose an on-release option. Complete the dialog box as shown in Figure 648.
      - If mapping is a toggle, the 'Choose Control Button/Key' dialog box opens automatically.

**Key Points Added:**
- Detailed steps for configuring joystick axes (detect or select axis, reverse if necessary).
- Clarification on handling toggles during keyboard and joystick button mapping.

- **Mapping Keys/Buttons for Actions:**
  - Press desired key or joystick button.
  - Click 'OK'.
  - Choose 'Yes' in Repeat column for continuous action, 'No' for single action per press.
  - Click 'OK'.
  - Repeat process for each function.

- **Switching Between Similar Systems (Switch Groups):**
  - Control multiple similar systems (e.g., weapons) with same key/joystick controls using switch groups.
  - Assign a key or button to switch between different systems in a group.

- **Configuring Switch Between Options:**
  - 'Switch Between' section lists controls for switch option configuration on Joystick Configuration page.
  - Use `switch_option:system` syntax (e.g., `weapon`) in system definition file's metadata to set up switch options.
  - Example: `(weapon-120mm-gun ... (controllers ... (joystick-controls ...)))`
  - Page displays available switch options using `switch_option:sysdef` syntax.
  - Refer to "77.1.1 Switching Between Systems" for usage details.

- **Key Points:**
  - Map keys/buttons with repeat functionality.
  - Use switch groups for controlling similar systems.
  - Configure switch between options in system definition files and on Joystick Configuration page.

- **Using Multiple Joysticks/Contollers:**
  - Attach multiple joysticks/game controllers to your computer.
  - Create a configuration for each joystick.
  - Control entity functions using selected configurations.
  - Example: Control different helicopter functions (rotary wing, M240 gun) with separate controllers (Gamepad & Saitek).
  - Set a favorite joystick configuration for automatic application.

- **Installing Gamepad on Linux:**
  - Use Logitech Gamepads on Linux, configure like joysticks.
  - Install xboxdrv driver: `yum install xboxdrv`.
  - Test controller recognition: `xboxdrv -L`.
  - Test device functionality: `xboxdrv -i <id>`.
  - Make it work with VR-Forces: `xboxdrv --detach-kernel-driver --silent`.

- **Attaching Components to Remote Entities:**
  - Attach VR-Forces sensors, actuators, and controllers to remote entities.
  - Enhance remote entity capabilities and integrate with VR-Forces simulation (e.g., add a radio or enable spot reporting).
  - Write plans for remote entities using attached components.

- **Remote Attachment Scenario (remoteAttachment):**
  - Uses an external application, f18 example from VR-Link.
  - Located in `./userData/scenarios`.
  - Components added to remote entities are simulated by the entity's application.

- **Component Simulation Limitations:**
  - Only individual platforms and lifeforms can attach components; units and environmental process objects are not supported.
  - VR-Forces components cannot control remote entities' position or state. Avoid attaching movement systems or articulated parts to remote entities.
  - Remote entities are not added to the echelon hierarchy by default, affecting spot reporting. Enable spot reporting for remote entities by setting `connection-mode` to `force` in the appropriate SMS's `commModelParams.mtl`.

- **Component Attachment Table:**
  - Located at `./data/simulationModelSets/<model_set>/extra/componentAttachmentTable.mtl`.
  - Associates entities with attachment key-names using object type or marking text.
  - Key-names correspond to configuration files in the `remote-configurations` block of `vrfSim.opd`, which specify components to attach to remote entities.

- **Display Engine Configuration:**
  - Manage windows and channels, and save/load display engine configurations.
  - Add/remove windows and channels as needed.
  - Change window attributes such as size, position, or visibility.

The VR-Forces User Guide's 'Display Engine and Window Management' section covers:

1. **Display Engine:**
   - Renders 3D/2D data in one or more windows, each with zero or more channels.
   - Supports:
     - Resizable windows (movable, resizable, maximizable, minimizable).
     - Full-screen windows (entire monitor area, no GUI controls).
     - Embedded windows (part of an application, controlled by the main window).
   - Each channel defines a viewable area with its own observer.

2. **Managing Display Engine Configurations:**
   - Add windows to the display engine; new windows have default names based on type.
   - Add channels to windows; each window starts with one channel.
   - Save and load display engine configurations.

3. **Adding a Window:**
   - From File menu: Choose 'File > New Stealth Window' or 'New Plan View Window'.
   - From Display Engine Configuration Editor:
     1. Open the editor panel (View > Display Engine Configuration Editor Panel).
     2. Select the display engine at the top of the Display tree.
     3. Click 'Add a Window' button or right-click and choose 'Add a Window'.

4. **Additional Topics:**
   - Changing Channel Attributes:
     - Set clipping planes to control visible geometry.
     - Specify projection resize policy for consistent viewports.
     - Change frustum (field of view) for different perspectives.
     - Adjust viewport size and position within the channel.
     - Configure water visibility and mirror channels for special effects.
     - Assign keywords to channels for organization and filtering.
   - Configuring Multichannel Displays:
     - Adjust cameras' position and orientation offset for synchronized views.
   - Stereoscopic Displays:
     - Configure anaglyphic stereo (color-based) for simple 3D viewing.
     - Configure polarized stereo (filter-based) for immersive 3D experiences.

- **Managing Display Engine Configurations:**
  - **Adding/Removing Channels or Windows:**
    - Select the channel/window in the editor panel.
    - Click 'Add a Channel' button (or right-click and choose) to add a new channel.
    - Click 'Remove Window' button (or right-click and choose) to remove a window.
    - Click 'Remove Channel' button (or right-click and choose) to remove a channel.
  - **Saving a Configuration:**
    - Click 'Save Display Engine Configuration', enter a name, then click 'Save'.
  - **Loading a Configuration:**
    - Select the display engine at the top, click 'Load Display Engine Configuration', select the desired configuration, then click 'Open'. Alternatively, drag-and-drop a .DCX file.
- **Changing Window Attributes:**
  - Select a window in the editor panel to view its attributes.
  - Click on an attribute value to change it:
    - Numeric values (Position, Width, Height): type or select new value.
    - Window Type: select from list.
    - Fixed Size: select 'True' or 'False'.
    - Name: type new name.
    - Window Stays on Top: set to 'True' or 'False'.
  - Click 'Commit Changes' to apply. Windows can also be repositioned by dragging, and resized directly.

**Key Points Added:**
- Specific button names for adding/removing channels/windows.
- Detailed attribute changes (Fixed Size, Window Stays on Top).
- Direct manipulation of windows for repositioning and resizing.

1. **Accessing Channel Attributes:**
   - Open the Display Engine Configuration Editor Panel via View > Display Engine Configuration Editor Panel.
   - Select a channel to display its attributes at the bottom of the editor.

2. **Changeable Channel Attributes:**
   - **Identification:**
     - Channel Name: Unique identifier for the channel.
     - Observer Name: The observer associated with the channel.
   - **Sensors & Projection:**
     - Sensor: Use the current observer's sensor or override and select from listed sensors.
     - Projection Units: Field of view in angles or database in meters.
     - Projection Resize Policy: Fixed, vertical, or horizontal resize policy.
   - **Field of View & Clipping:**
     - Frustum (Left, Right, Bottom, Top): Defines the field of view.
     - Z Near and Z Far: Clipping planes determining rendering range.
     - Near Far Clip Policy: Determines how clipping planes are set (Fixed or Reduce Near Clip).
   - **Z-Fighting & Water Visibility:**
     - Reduce Z Fighting Ratio: Helps prevent distant objects from sorting incorrectly.
     - Dynamic Water Visibility Enabled/Maximum: Controls water visibility in the channel.
   - **Rendering & Positioning:**
     - Render Order: Sets the order in which channels are rendered in a particular window.
     - Mirror Mode: Flips the channel horizontally.
     - Camera Position Offset (X, Y, Z): Offsets the camera's position.
     - Camera Orientation Offset (Psi, Theta, Phi): Offsets the camera's orientation.
     - Viewport (Left, Right, Bottom, Top): Defines the channel's viewport within the window.
   - **Keywords:** Associate keywords with the channel for specific functionalities.

3. **Changing Attribute Values:**
   - Click on an attribute's value to change it.
   - For numeric values, type or select a new one; for lists, select a value; for names, type a new name.
   - Click 'Commit Changes' to apply updates and see the channel update in the window.

4. **Clipping Planes & Z-Fighting:**
   - Clipping planes (Z Near and Z Far) determine what is rendered based on distance from the observer.
   - Too small a ratio between them can cause distant objects to appear incorrectly, known as Z-fighting.
   - VR-Forces offers policies for managing clipping planes: Fixed (explicitly set using Z Near and Z Far attributes) or Reduce Near Clip.

5. **Additional Information:**
   - For details about some attributes, refer to subsequent sections in the guide.
   - A list of channel keywords is available in "79.4.7 Channel Keywords" on page 1579.

- **Clipping Planes Adaptation:**
  - Near clipping plane increases slightly up to 20,000 meters (max 1.5m).
  - Above 20,000m, both near and far planes increase gradually.
  - Policies can be modified by 'Dynamic Near Clip Attached Policy'.

- **Clipping Plane Policies:**
  - **Reduce Z Fighting:** Sets clipping planes based on a ratio; near plane expands as needed to maintain the ratio.
    - *Default policy.*
  - **Clamp Near Clip When Magnified:** Similar to above, but adds an intersector to prevent near clip from going past objects when magnified (2x or more).
    - *Expensive operation, enable only if necessary.*

- **Dynamic Near Clip Attached Policy Options:**
  - **Ignore Attached:** Doesn't consider entity attachment when setting the near clipping plane.
  - **Fixed Near Clip:** Sets the near clipping plane to a fixed value if the observer's altitude meets certain criteria.
  - **Distance To Attached:** Uses the distance between the observer and the attached entity to determine the near clipping plane (default).

- **Reverse Z Buffering:**
  - Enabled by default, reduces Z fighting but not supported in 2D modes or with Oculus Rift HMD.
  - Disabling requires a command-line option (`--disableReverseZBuffer`).
  - Using with 'Reduce Z Fighting' and dynamic ocean may cause performance slowdowns; switching to 'Fixed' policy resolves this.

- **Projection Resize Policy:**
  - Determines how a channel behaves when resized. Options include 'Fixed'.

- **Field of View (FOV) Management:**
  - Maintain aspect ratio by adjusting horizontal and vertical FOV to match viewport's aspect ratio.
  - Change projection resize policy for individual or all channels via `Channel Projection Resize Policy` attribute:
    - Horizontal: Changes horizontal FOV.
    - Vertical: Changes vertical FOV.
    - Fixed: Keeps both FOVs constant, distorting the aspect ratio.
  - Alter frustum (field of view) values to change perspective:
    - Wide FOV: Objects appear smaller and farther, depth exaggerated.
    - Narrow FOV: Objects appear larger and closer, scene depth flattened.

- **Viewport Management:**
  - Change the portion of the window a channel is displayed in without altering the scene extents.
  - Viewports are specified as percentages of the window (left-right, top-bottom).
  - Resize the window to see viewport changes.
  - For adjacent viewports (e.g., FOV > default), disable HDR and HBAO+.

- **Changing Projection Resize Policy for All Channels:**
  - Go to `Settings` > `Display`, select `Render Settings` page, choose an option from the `Channel Projection Resize Policy` list.

1. **Water Visibility Configuration:**
   - **Purpose**: Reduce Z-fighting, a conflict between ocean surface and floor altitudes, often around coastlines with bathymetry data.
   - **Attributes**:
     - `Dynamic Water Visibility Enabled`: Automatically increases water transparency as the observer's altitude increases to reduce Z-fighting.
     - `Dynamic Water Visibility Maximum`: Specifies the maximum depth (default: 75 meters) up to which transparency is added.
   - **Notes**:
     - Dynamic water visibility is enabled by default.
     - If dynamic ocean is displayed above 5000 meters, increase `Dynamic Water Visibility Maximum` to mitigate Z-fighting.
     - No performance impact when not using dynamic ocean; no effect if there are no underwater terrain polygons.

2. **Changing a Channel's Attributes:**
   - **Procedure**:
     - Attach an observer to a vehicle (e.g., right-click > Observer Attach > Attach Mimic).
     - Open the Display Engine Configuration Editor Panel (View > Display Engine Configuration Editor Panel).
     - Add a channel, then modify its properties:
       - Position the viewport (e.g., Left 20, Right 80, Bottom 75, Top 90).
       - Set `Observer Psi` to 180 to point the camera behind the viewer.
       - Enable `Mirror Mode`.
       - Remove `showCockpits` from Keywords if a cockpit is not needed.

3. **Channel Keywords:**
   - **Editing**: In the `Keywords` attribute of each channel within the Display Engine Configuration Editor.
   - **Supported Keywords**:
     - `largeCompass`: Displays the large compass if enabled (default: included in all channels).

- **Channel Display Options:**
  - **Compass**: Shows a small compass when enabled. Default: Not included in any channels' configuration.
  - **GridLines**: Displays grid lines when enabled. Default: Included in all channels' configuration.
  - **showRemoteGraphics**: Displays remote graphics if received. Default: Included for all channels except inset views.
  - **showCockpits**: Shows GL Studio cockpits when enabled. Default: Included in all channels' configuration.
  - **NoExternalInput**: Disables mouse/keyboard/touch events for the channel. Default: Only included in Sensor Gimbal View channels' configuration.
  - **cockpitOnly**: Prevents scene rendering in the channel if true. Default: Included in instrument panels only.

- **Multichannel Display Configuration:**
  - Users can set up multiple monitors (on one or more computers) to display exercises with different views of the terrain.
  - Each channel's view is controlled by its frustum, which defines the field of view and offset from the master view.
  - Save display engine configurations on each computer for future use.

- **Camera Adjustments:**
  - Changing frustum values (left and right fields of view) affects how much of the database is in the channel's view.
  - Changing camera position and orientation alters the point from which the view is rendered, allowing users to simulate different perspectives (e.g., vehicle views).

- **Camera View Adjustment:**
  - Change X, Y, Z camera position offsets for different views (e.g., gunner's perspective).
  - Modify Psi (heading), Theta (pitch), and Phi (roll) orientation offsets to look out the rear of the vehicle.

- **Stereoscopic Displays:**
  - Produce realistic 3D imagery by showing each eye a different image.
  - VR-Forces supports three common display methods via OpenSceneGraph: active stereo, polarized display, and anaglyphic stereo.

- **Display Methods:**
  - **Active Stereo:** Alternates frames for left/right eyes with synchronized shutter glasses. Requires hardware support and specific graphics card/display capabilities.
  - **Anaglyphic Stereo:** Uses red-cyan glasses. Easy to set up in VR-Forces by setting OpenSceneGraph environment variables (OSG_STEREO, OSG_STEREO_MODE, etc.).
  - **Polarized Stereo:** Shows frames simultaneously with polarized light. Requires specialized equipment but easy to configure with VR-Forces.

- **Configuring Anaglyphic Stereo:**
  - Set specific OpenSceneGraph environment variables (Table 69) to enable anaglyphic stereo in VR-Forces.
  - Refer to the OpenSceneGraph documentation for detailed information.

- **Polarized Stereo Configuration:**
  - VR-Force enables multichannel displays for polarized stereo, with one channel per eye.
  - Each channel renders with a camera at an offset to represent the viewer's eye spacing.
  - Key parameters:
    - Focal length (L): Objects at this distance appear in the display plane.
    - Eye spacing (E): Typically 0.063m for human eyes.
    - X Camera Position: E/2 meters for left channel, -E/2 meters for right channel.
    - Psi Camera Orientation: arctan(E/2)/L degrees for both channels.

- **VR-Force GUI Controls:**
  - VR-Force features floating, dockable panels and toolbars for various functions.
  - **Panels & Toolbars:**
    - *Undocking:* Click and drag panel title or use 'pop out' button to detach a panel from the window.
    - *Redocking:* Double-click panel title bar to reattach a floating panel to its original position.
    - *Tabbing Panels:* Drag one panel onto another to create tabbed panels, allowing multiple panels in the same GUI area.

  - **Window Layouts:**
    - Manage window layouts by creating, choosing, setting as default, reverting, updating, renaming, and deleting them.
    - Restore factory layout if needed.

  - **Additional Features:**
    - Utilize tear-off menus for quick access to commands.
    - View the window in full-screen mode with an optional hidden mouse cursor.
    - Use context-sensitive menus for relevant actions based on the current selection.
    - Customize common buttons, add text to the title bar, specify display units, and enable/disable dark mode.

- **Dockable Panels and Toolbars:**
  - *Undocking a Toolbar:* Click and drag the toolbar handle away from the window.
  - *Docking a Toolbar:* Drag it back to the toolbar strip; other toolbars move to create space.
  - *Vertical Docking:* Drag the toolbar to the left or right edge of the window to display button labels vertically.

- **Displaying and Hiding Panels/Toolbars:** Use the View menu to show/hide panels/toolbars.

- **Window Layouts:**
  - *Saving:* Save window size, visibility, and location of all toolbars and panels. Default layout can be specified.
  - *Location:* Saved in `./appData/settings/vrfGui` (default) or `./factory/settings/vrfGui` (backup).
  - *Predefined Layouts:*
    - Scenario Creation: Useful for creating scenarios.
    - Scenario Viewer: Maximizes scenario view by removing toolbars and panels.

- **Creating a Window Layout:**
  - Arrange toolbars, panels, and window size.
  - Open 'Window Layout Manager', click 'New', name the layout, choose window size option (Maximize, Restore Window, Full Screen Mode), and optionally set as default.

- **Choosing a Window Layout:** Select from View menu or Layout Manager. Keys can be mapped to layouts for quick selection.

1. **Switching Window Layouts:**
   - Access window layouts via `View > Window Layouts`.
   - Change active layout in the Window Layout Manager by double-clicking or clicking 'Switch To'.

2. **Setting a Default Window Layout:**
   - Open the Window Layout Manager (`View > Window Layout Manager`).
   - Select desired layout and click 'Make Default'. A star indicates the default.

3. **Clearing/Changing Default Layout:**
   - Open the Window Layout Manager.
   - Click 'Clear Default' to remove current default, or select a new layout and click 'Make Default'.

4. **Reverting a Window Layout:**
   - Choose `View > Revert Window Layout` to restore saved layout.

5. **Updating a Window Layout:**
   - Open the Window Layout Manager.
   - Select active layout and click 'Update' to save changes.

6. **Renaming a Window Layout:**
   - Open the Window Layout Manager.
   - Select layout, click 'Rename', enter new name, and click 'OK'.

7. **Deleting a Window Layout:**
   - Open the Window Layout Manager.
   - Select layout and click 'Delete'.

8. **Restoring Factory Layouts:**
   - VR-Forces includes two factory layouts in `./factory/settings/vrfGui`.
   - User-created layouts are saved to `./appData/settings/vrfGui`.

- **Backup & Restore Layouts:**
  - Backup:
    - Any location
    - `./factory/settings/vrfGui` for restoration via Layout Manager
  - Restore:
    - Window Layout Manager > Select layout > Click 'Restore From Factory'
  - Recover Deleted:
    - Copy saved layout to `./appData/settings/vrfGui`

- **Tear-Off Menus:**
  - Create menu: Click grab bar (dashed line at top)

- **Full-Screen Mode:**
  - Enter:
    - View > Show Full Screen
    - Ctrl+Enter
  - Exit:
    - Ctrl+Enter
  - Mouse Hiding:
    - Enable in Application Settings > Mouse Settings

- **Context-Sensitive Menus:**
  - Right-click on objects or menu bar for relevant actions

- **Common VR-Forces Buttons:**
  - Add, Remove, Copy, Select Filter, Edit, Add from List, Move Up

- **Context-Sensitive Menus:**
  - Navigation:
    - Move down in the list.
    - Select previous or next item.
  - Attribute Management:
    - Add an attribute.
    - Remove local attribute definition (use parent's).
  - Search.

- **Title Bar Text Addition:**
  - Open Application Settings dialog box.
  - Select GUI Settings page.
  - Check 'Use Additional Window Title' checkbox.
  - Enter desired text in the provided textbox.

- **Display Units Specification:**
  - Configure units for various measurements (coordinate system, distance, altitude, etc.) independently:
    - By measurement type: coordinate system, distance, bearing and range, altitude, velocity, acceleration, rotational velocity, orientation.
    - For application, simulation object platforms, and weather.
  - Set decimal places for measurement values.
  - Changes take effect immediately and are saved for future use.
  - Supported coordinate systems:
    - Latitude/Longitude: degrees:minutes:seconds, degrees decimal minutes, decimal radians.
    - Geocentric.
    - UTM (Universal Transverse Mercator).
    - MGRS (Military Grid Reference System).
    - GARS.

1. **Position Coordinates:**
   - Displayed using Global Area Reference System.
   - Position field shows a seven-character designation.
   - Database Location is displayed as three position fields, using VR-Forces's internal cartesian database system and current distance units.

2. **Heading Options:**
   - True (geodetic) north: Points towards the North Pole.
   - Magnetic north: Direction where the magnetic field points downwards.
   - Grid north: Aligns with vertical grid lines on ordnance survey maps.

3. **Specifying Display Units:**
   - Access Display Settings > Display Units Settings page.
   - Set measurement units for objects, application, or weather with corresponding precision (if applicable).
   - Choose default time display format and zone.

4. **Dark Mode Switching:**
   - Dark mode is the default; light mode can also be enabled.
   - Enable/Disable dark mode and retro icons via Settings > Application page.

5. **GUI Configuration:**
   - VR-Forces uses an XML configuration file (default: `./appData/settings/vrfGui/default_guiConfiguration.gui`) to determine displayed menus, commands, toolbars, dialogs, and shortcuts.
   - Edit the default file or create alternatives; use `--gui` command-line option to specify an alternative.
   - GUI elements in the configuration file are self-explanatory, providing initial organization for rearrangeable elements like toolbars.

- **Toolbar Rearrangement:** User rearranges toolbars; new layout saved in settings file, overriding .gui file.

- **Menu Configuration:**
  - Menus configured in `<mainmenuconfiguration>`, each menu in `<mainmenu>`, commands in `<menuitem>`.
  - Example: A menu bar with one menu ("DtFileMenu") having two items separated by a separator.
  - IDs for `itemname` attributes must be valid and registered in VR-Forces code. Default file: `default_guiConfiguration.gui`.
  - Remove menus/commands by deleting elements from the default file or creating an alternative without them.
  - Add menus/items knowing the ID.

- **Task and Set Menus:**
  - By default, VR-Forces alphabetizes Task and Set menu commands, overriding script metadata and API placement.
  - Disable/enable alphabetization via Application Settings > GUI Settings page.

- **Creating New Menus:** Use existing syntax in `default_guiConfiguration.gui`. Top-level menus use `<mainmenu>`, submenus use `<menu>`.
  - Example: Creates a top-level menu "My File Menu" with a submenu "Save Scenario Commands".

- **Dialog Box Pages:**
  - Configure dialog box pages (e.g., Display Settings, Terrain Settings) using `<pagecollection>` elements inside `<pagecollections>`.
  - Enable/disable pages and configure specific data on information dialog boxes using `<informationpagecollection>` elements.

- **Entity Information Pages:**
  - **Compact Data (Default View):**
    - Entity Icon
    - State Marking Text
    - Embarked On Item (in a separate icon bar)
    - Create Palette Name
    - Sensor Information Page
    - Entity Speed & Altitude
    - Task State Page (dynamic content)
    - Object Console Information Status Item
  - **Expanded Data (Detailed Information, collapsible):**
    - Task State Page (dynamic content)
    - Entity Information Page (with detailed data like location, velocity, acceleration, navigation area ports, and entity state DR algorithm)
    - Entity Attributes Page
    - Resource Information Page (and more)
  - **Object Console Section:**
    - Object Console Information Widget

- **Context-Sensitive Menus:**
  - Menu varies based on selected objects.
  - Example menu for multiple entities includes tasks, set management, object information, editing/moving/copying/deleting actions, embarkation/disembarkation, aggregate management, and decorations.
  - Task and Set menus are context-sensitive and built dynamically; they don't have static configurations.
  - Editing initial task and set menus involves modifying the `initialTaskMenuConfiguration.xml` file in the simulation model sets folder. Removing a task affects all simulation objects.

- **Dynamic Content:** Some pages and menus contain dynamic content generated at runtime, not defined by static XML elements.

- **Set-Data Controller in AirBase.ope (AggregateLevel SMS):**
  - Defines a `set-data` controller with specified attributes such as:
    - `component-descriptor-type`: "set-controller-descriptor"
    - `component-type`: "cultural-feature-set-controller"
    - `min-tick-period`, `min-tick-period-variance`: -1.000000
    - `tick-period-uses-real-time`: False
    - `is-enabled`: True
    - `debug-detail`: False
    - `create-component`: True
  - Ignores specific set data requests from the menu for all simulation objects, including:
    - "set-speed"
    - "set-capability"
    - "set-engagement-rules"
    - "set-engagement-zones"
    - "set-scan-sector"
    - "set-current-speed"
    - "set-altitude"

- **Editing Set Menu:**
  - Applies only to set data requests registered in code, not scripted sets.
  - Ignore-sets strings are found in `./include/vrftasks/radioMessageTypes.h`.
  - Remove set data requests from the menu for all simulation objects by editing:
    - `./data/simulationModelSets/<sms>/gui/initialSetMenuConfiguration.xml`
    - Ensure updating the value for the `count` element to match changes.

- **Configuring Toolbars:**
  - Configure toolbar rows and command icons using XML configuration.
  - Create custom toolbars by adding a `<toolbar>` element in one of the `<toolbarrow>` elements.
  - Add tasks or sets to existing toolbars or create new ones, specifying item names based on task/set IDs (found in `./include/vrfGuiConstants/vrfMenuIds.h`) or script IDs.

- **Specifying an Icon for a Toolbar Item:**
  - Associate icons with toolbar items using SVG files placed in:
    - `./data/Icons` for light mode GUI
    - `./data/Icons/DarkMode` for dark mode GUI
  - File names should match the menu ID of the task/set, following specific naming conventions (e.g., "TaskMoveToAltitude.svg", "SetHeading.svg").

- **Locking Main GUI Elements:**
  - Lock first-level GUI elements to prevent modification by VR-Forces plug-ins using:
    - `<mainmenuconfiguration>` with `locked="True"` in configuration files, e.g.:
      ```xml
      <mainmenuconfiguration name="main_menu_configuration" locked="True">
        ...
      </mainmenuconfiguration>
      ```

- **Key Mapping Editor**: Lists all controllable functions with their corresponding keyboard keys/mouse inputs.
  - Supports editing, adding, deleting, and combining key mappings; changes are saved automatically.

- **Binary Key Mappings**:
  - Used for actions requiring continuous input (e.g., holding 'W' to move forward).
  - Displayed as paired functions (parent & children) in the editor.

- **Editing a Key Map**:
  - Access via Settings > Application > Key Mapping Editor page.
  - Select a function, then edit its key mappings:
    - Add new mapping: unmapped functions or additional keys for mapped functions.
    - Change existing mapping.
    - Delete mapping.
  - Optionally, export the key map to a file.

- **Key Maps**:
  - VR-Forces comes with default keyboard mappings that can be edited or new ones created using the Key Mapping Editor.

- **Key Mapping Scope:**
  - Key mappings added to child functions do not affect paired or parent functions.
  - Some functions may not have meaningful key mappings in certain frames.

- **Adding a Key Mapping:**
  - Optionally, filter the function list.
  - Select the desired function.
  - Click 'Add' and press the chosen key/key combination in the opened dialog box.
  - Click 'OK'. VR-Forces will notify if the key is already in use.

- **Changing a Key Mapping:**
  - Select the function and its key mapping.
  - Click 'Edit Key Mapping' and press the new key/key combination.
  - Click 'OK'.

- **Deleting a Key Mapping:**
  - Select the function and its key mapping.
  - Click 'Delete'.

- **Combined Key Mappings:**
  - Multiple functions can share a single key combination for combined behaviors.
  - Manage combined key mappings using the same steps as adding/changing/deleting a key mapping.

- **Adding Key Mapping:**
  - Add key mapping to a function.
  - If the key is already mapped:
    - Click 'Add' to share with listed functions.
    - Click 'Replace' for exclusive use in current function (removes from others).
    - Click 'Cancel' to choose a unique key mapping.

- **Key Mapping Editor:**
  - Filter function list using the filter button and select an option.
  - Create new key map:
    - Go to Settings > Application.
    - Select Key Mapping Editor page.
    - Click 'Add', name it, and add movement action key mappings.
  - Delete key map: select it in the list and click 'Delete'.

- **Troubleshooting:**
  - Use simulation engine console for debugging and diagnostics (enter 'help' for commands).
  - For performance issues, disable Nahimic by adding application name to BlackApps.dat.

- **VR-Forces Display Issues:**
  - Opening VR-Forces on a second display or moving mouse cursor to another monitor may cause program freeze/crash.
  - Selecting an SMS in Simulation Object Editor can also lead to program hang.
  - Nahimic software can sometimes crash VR-Forces; adding the application name (e.g., `vrfLauncher.exe`) to `BlackApps.dat` can help resolve this.

- **Performance Improvement:**
  - Disable unnecessary features:
    - Reduce clouds using predefined environment conditions or advanced weather settings.
    - Disable HDR lighting if high realism isn't needed.
    - Disable horizon-based ambient occlusion (HBAO) or shadows entirely, or display them for certain objects only.
    - Disable dynamic ocean for scenarios without it.
    - Disable SpeedTrees if not required.
    - Reduce anti-aliasing using command-line option `--antiAliasing level 2` or `0`.
    - Disable unnecessary terrain layers.

- **Troubleshooting:**
  - Use the Simulation Engine Console for debugging.
  - Windows' Fault Tolerant Heap (FTH) can negatively impact performance; see Microsoft's documentation for solutions.
  - Linux CentOS 8 memory issue: Upgrade kernel to at least version 5.7 to prevent unresponsiveness when using swap memory.

- **Additional Resources:**
  - MAK Technologies' reference manual for enabling/disabling terrain layers.
  - Microsoft's documentation on the Fault Tolerant Heap.

- **Optimize Terrain for VR-Vantage:**
  - Reduce memory usage by decreasing osgEarth layers and simplifying models.
  - Consider upgrading your computer's RAM.

- **Seamless Scenes with Multiple Channels:**
  - Disable HDR and Ambient Occlusion (HBAO+) when using multiple channels for a wider Field of View (FOV) to prevent visual issues at channel overlaps:
    - Go to Settings > Display.
    - Select the Observer Settings page.
    - Choose the observer assigned to the channels displaying greater FOV.
    - Ensure the observer mode matches your 3D mode (e.g., Stealth or Out-the-Window).
    - Uncheck 'Ambient Occlusion (HBAO+)' and go to the HDR page.
    - Uncheck 'Enable High Dynamic Range'.

- **Feature Indexing for Model Layers:**
  - Disable feature indexing on all model layers in osgEarth terrains to prevent performance issues and potential crashes:
    ```xml
    <model>
      <feature_indexing enabled="false"/>
      <!-- rest of model layer setup here-->
    </model>
    ```

- **VR-Forces MTL Files Syntax:**
  - VR-Forces uses various configuration files, with front-end files being XML (not manually edited) and back-end files using MAK Technologies LISP (MTL) syntax.
  - MTL files have a '.mtl' extension and can be edited in any text editor. Parameter entries typically follow the format `(setq parameter_name value)` or `(setqb parameter_name value)` for bound variables. Comments start with `;;`.

    - Example: `(setq VaporTrail ...)` assigns a symbolic name to an OpenFlight file, used in `(trail-map ... (list VaporTrail ...))`.
  - **`load`**: Instructs the application to load a specified file.
    - Example: `(load mtl-path "params.mtl")`
  - **Environment variables** can be used in MTL files with `(setqb parameter_name (getenv (quote env_var)))`. Example: `(setqb disDestAddr (getenv (quote DEST_ADDR)))`.
  - Lists of lists and multiple individual lists can be specified for parameters.
  - **Conditional statements** are used for different parameters in DIS and HLA. Format:
    - Simple: `(if (condition) (statement_to_evaluate))`
    - Sequence block: `(if (condition) (sequence (statement1) (statement2) ...))`
    